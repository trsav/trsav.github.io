<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>trsav</title>
<link>https://sav.phd/</link>
<atom:link href="https://sav.phd/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.557</generator>
<lastBuildDate>Fri, 21 Mar 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>Values Redux</title>
  <link>https://sav.phd/posts/writing/</link>
  <description><![CDATA[ 





<div class="center">
<p><img src="https://sav.phd/posts/writing/output_image.png" class="img-fluid" style="width:100.0%"></p>
</div>
<p>I started this blog two years ago because I wanted to discover my own personal writing style, or figure out if I even liked writing in the first place. At the time I remember hearing<sup>1</sup> that the only way to get better is to write more<sup>2</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;This could have been fully hallucinated but that doesn’t matter</p></div><div id="fn2"><p><sup>2</sup>&nbsp;Something that I always used to say about getting better at darts during my stint as President of the University of Manchester Darts Society, again probably unfounded</p></div></div><p>This blog has evolved alongside myself throughout the last few years. I originally wrote about <em>anything</em>: topics related to optimisation, machine learning, or just basic tutorials on plotting graphs. To maintain motivation, I discovered it was important to write about things that I found personally interesting and by extension would enjoy reading. This was my heuristic for the first 3-4 months, write what I would want to read.</p>
<p>As I would talk about what I wrote about to friends, we would discuss extensions, how the themes related to books we’d read, or items in the news. Eventually what I found interesting to read evolved and with it what I wrote about. It was a cycle of reflection that led to something that I no longer consider an exercise in writing, but a fully-fledged platform for self-expression. I believe this form of self-expression will be an increasingly important ability to demonstrate as people shun large easy-to-attach-to socially acceptable causes in favour of a more personal way of understanding others. In effect the ability to answer the question: <em>what do <strong>you</strong> believe in?</em></p>
<p>Why is this important? After a year or so I realised that a lot of what I found interesting to read<sup>3</sup> was centered around <em>values</em>. Either an explicit description of where values<sup>4</sup> originate from<sup>5</sup>, or biographies of people who have embodied a set of values<sup>6</sup>. Looking back I can point to two discussions where this focus on values seemed to emerge. The first was when an academic and mentor at Imperial College encouraged me to think deeper about what I stand for. He had served in the British Army before becoming an academic and has one of the most impressive careers of anyone I met at Imperial. He spoke about joining the Army post-PhD and immediately being given a set of values that he has never lost. It doesn’t particularly matter what they are<sup>7</sup>, but it was the idea of standing for <em>something</em>, and demonstrating intention when planning and executing a mission<sup>8</sup> with them in mind. It doesn’t just give you the confidence to succeed but demonstrates to others that you are serious. When someone like that tells you he doesn’t know what <em>you</em> stand for, you start to think a bit deeper about how to live your life.</p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;And by extension write about</p></div><div id="fn4"><p><sup>4</sup>&nbsp;Western or otherwise</p></div><div id="fn5"><p><sup>5</sup>&nbsp;Even if the majority of people do not appreciate this</p></div><div id="fn6"><p><sup>6</sup>&nbsp;Whether or not you agree that they are ‘correct’.</p></div><div id="fn7"><p><sup>7</sup>&nbsp;You can look these up easily</p></div><div id="fn8"><p><sup>8</sup>&nbsp;Used both literally and figuratively</p></div><div id="fn9"><p><sup>9</sup>&nbsp;Embodying the very values he writes about in a classic move</p></div></div><p>The second experience was just after reading Dominion by Tom Holland, which I had bought at random from a charity shop in Paddington. I conincidentally ended up playing cricket at the same time as him every week at The Oval and after a few weeks built up the courage to tell him how I very much enjoyed his book, and it encouraged me to write and think about my own values more. He was of course extremely gracious<sup>9</sup> and the whole experience brought it all much closer to home. I realised that you <em>were</em> allowed to discuss and think on a deeper level about why you do things. You <em>can</em> choose to believe in a correct way of living, and disagree with those whose beliefs are at odds with that. This might seem relatively obvious but I think it’s important not to take it for granted.</p>
<p>In light of the shift in focus of this blog and aligning with my slightly-invented situation that it is becoming/will become increasingly important to <em>own</em> the values you consider correct, I will use the remainder of this post to outline my values, what has influenced them, how they developed, and where I’ve written about them before<sup>10</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn10"><p><sup>10</sup>&nbsp;Consciously or not</p></div></div><p>I don’t think it’s fair to load what I will present below with a few definitions or short summaries. These beliefs are more easily defined by my experiences, books, and writing. It wouldn’t do them justice to summarise them in an easily digestible way. Values shouldn’t be easily digestible, that would render them light and meaningless. I think values should be <em>heavy</em>. You would, and <em>should</em> have to read the same books, experience the same emotions, go to the same places and have the same discussions in exactly the same order to fully understand them. But that’s life, and that’s how I think people should understand their own beliefs (and by extension appreciate that this is how others see their own beliefs).</p>
<!-- Institutions & Change -->
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://sav.phd/posts/writing/pandamonium.jpg" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://sav.phd/posts/writing/restless.jpg" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://sav.phd/posts/writing/church.jpg" class="img-fluid"></p>
</div>
</div>
</div>
<p>I am unashamedly a Baillie Gifford<sup>11</sup> fan. I’ve found it to be a relatively good heuristic for what to read. Plus if you read 24 books a year over 30 years you’ll only ever read about 700 books, which seems oddly small for a lifetime. Probably a small-ish sized room walls worth of books. If I see a shortlisted sticker then it gets weighted a little more strongly in my head.</p>
<div class="no-row-height column-margin column-container"><div id="fn11"><p><sup>11</sup>&nbsp;The prize not the investment manager</p></div><div id="fn12"><p><sup>12</sup>&nbsp;I believe Anna Keay was on a podcast I listened to but this might be a hallucination.</p></div></div><p><em>The Restless Republic</em> appeared to me during my PhD<sup>12</sup> when I was looking to read anything that wasn’t about chemical flow reactors or Bayesian optimisation. Something real and entertaining.<br>
It recounts the years where Britain was a republic between the violent death of King Charles I, and General Monck’s march for restoration. Told through the lens of a few different individuals, in my opinion it highlights the role that individuals serve in building and destroying institutions and how people respond to these changes.</p>
<p>I read <em>Going to Church in Medieval England</em> shortly after. Set in the 400 year period before the republic, to me it highlights how institutions form lasting societal impressions, that are generally under appreciated by the population. It breaks down every aspect of what it would have been like to attend church, and the developments that have stemmed as a result, or been lost<sup>13</sup>. Having lived in Putney (which was very much a part of historical London), I would walk down to the medieval St Mary’s church on the Thames to sit and read this book at the weekend. This church also ironically appears in <em>The Restless Republic</em> as the location of the Putney Debates, where parliamentarians planned what their post-Charles I republic would look like<sup>14</sup>. The Britain that this book leaves behind is one that feeds into <em>The Restless Republic</em>, not only temporally but also on a physical level through St Mary’s church. A Britain where institutions have been dismantled but their traditions broadly remain, giving rise to new beginnings. Read in series these two books highlight how values are built up and enforced by institutions, and what happens when the rug is pulled underneath them.</p>
<div class="no-row-height column-margin column-container"><div id="fn13"><p><sup>13</sup>&nbsp;For example timekeeping and clocks, first appearing on church towers to indicate when mass was, as opposed to the often inconvenient sun-based system, particularly in the winter.</p></div><div id="fn14"><p><sup>14</sup>&nbsp;I think the book mentions this but really the ideas debated here eventually went on to form the basis of the American constitution. If Wandsworth Council had any sense you should be seeing huge amounts of American tourists here, the Wetherspoons next door would be full to the brim. Separately, I’m also waiting for the Thomas Cromwell vistor centre / 4D cinema experience.</p></div></div><p><a href="https://en.wikipedia.org/wiki/Pandaemonium_(Jennings_book)#:~:text=Pandæmonium%2C%201660–1886%3A%20The,in%201985%20by%20Icon%20Books"><em>Pandaemonium 1660-1886</em></a> follows on from the Britain that is left behind in <em>The Restless Republic</em>. It charts the Industrial Revolution entirely through eyewitness accounts. Similarly, I came away with an appreciation for the individual’s responsibility and ability to drive change, and how this can occur in an often quiet and understated setting. This book represents the purest form experiencing this change, unaffected by stylistic choices, and is commonly said to more closely resemble a film or a montage of the industrial revolution as opposed to a retelling.</p>
<p>Going back I would read these three books in chronological order. The combined story they tell is one that begins with a nation of farmers and bishops, and through the individual, ends with Britain as an industrial and economic superpower with the world’s strongest democracy. They have provided me with what I consider a good overview of how Britain was built over the last 800 years, by people working quietly away, unburdened by what has been. Institutions are built by great people who don’t stop to consider if they could, and they are brought down in periods of boredom by those who don’t consider if they should. They highlight how change happens, and how humans naturally respond. These aren’t necessarily values in and of themselves, but to me capture the feeling and need to progress.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="4">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://sav.phd/posts/writing/1599.jpg" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://sav.phd/posts/writing/super-infinite.jpg" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://sav.phd/posts/writing/the-creative-act.jpg" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://sav.phd/posts/writing/kepler.jpeg" class="img-fluid"></p>
</div>
</div>
</div>
<p>A common theme that I have experienced when thinking about scientific or creative progress are feedback loops or cycles. People naturally inspire each other, and I found myself experiencing this in a number of settings.</p>
<p>The most contemporary example and probably where I first saw this point made so explicitly was after I bought a copy of <em>The Creative Act</em> by Rick Rubin shortly after it was first published. There is a great section where he discusses a period where The Beatles and the Beach Boys both inspired each other to produce great art (Rubber Soul and Pet Sounds), neither of which may have existed without the other.</p>
<blockquote class="blockquote">
<p>When Brian Wilson first heard the Beatles’ Rubber Soul, his mind was blown. “If I ever do anything in my life, I’m going to make that good an album,” he thought at the time. He went on to explain, “I was so happy to hear it that I went and started writing ‘God Only Knows.’” Being made happy by someone else’s best work, and then letting it inspire you to rise to the occasion, is not competition. It’s collaboration. When Paul McCartney heard the resulting Beach Boys album, Pet Sounds, he too was blown away and reduced to tears, proclaiming “God Only Knows” was to his ears the best song ever written. Buoyed by the experience, the Beatles played Pet Sounds over and over while creating another masterpiece, Sgt.&nbsp;Pepper’s Lonely Hearts Club Band. “Without Pet Sounds, Sgt.&nbsp;Pepper never would have happened,” Beatles producer George Martin said. “Pepper was an attempt to equal Pet Sounds.” This creative back-and-forth wasn’t based on commercial competition, it was based on mutual love. And we are all the beneficiaries of this upward spiral toward magnificence. No system exists that can rank which work is most reflective of the maker. Great art is an invitation, calling to creators everywhere to strive for still higher and deeper levels.</p>
</blockquote>
<p>I then encountered a similar theme in preparation for writing my PhD, where I read a few studies on knowledge discovery and reasoning. Reasoning tools are commonly partitioned into either deductive or inductive-based approaches where knowledge either stems from observations (i.e.&nbsp;data-driven) or from first principles (i.e.&nbsp;physics-first). As machine learning has become more prevalant, particularly in science and engineering, there has been a great debate as to whether neural networks or data-driven models can fully replace first-principles simulations. In principle, these are the same debates that were held in thousands of years ago, just applied to a different context. Some choose to ignore the nuance in the debate and simply combine both paradigms (i.e.&nbsp;hybrid modelling) forgoing logical consistency in favour of short term improvement of predefined metrics. What I believe, and what I think is presented best by Thomas Kuhn, is that it is the <em>tension</em> between inductive and deductive reasoning that drives scientific discovery. I articulated this point in my post on <a href="https://sav.phd/posts/manifesto/"><em>Machine Learning and Discovery</em></a>. In it I discuss Mikuláš of Kadaň and Kepler. The first who built an accurate astronomical clock based on incorrect observations, the second deriving the correct first principles for planetary motion, partly<sup>15</sup> inspired by the astronomical clock. Neither existing without the other. Just as The Beatles and the Beach Boys formed their own cycle of expression.</p>
<div class="no-row-height column-margin column-container"><div id="fn15"><p><sup>15</sup>&nbsp;As the story goes</p></div><div id="fn16"><p><sup>16</sup>&nbsp;Guess</p></div><div id="fn17"><p><sup>17</sup>&nbsp;e.g.&nbsp;St Mary’s church, Putney</p></div></div><p>Finally, I read both <em>1599</em> and <em>Super-Infinite</em> at a very similar time of year. 1599 charts a year<sup>16</sup> in the artistic and personal life of William Shakespeare, with an analysis of the cultural events surrounding the plays he produced this year (Julius Caesar, Henry IV etc.), while Super-Infinite presents a biography of the love poet and Dean of St Paul’s Cathedral John Donne, similarly told through his work. Like my encounter with Tom Holland, living in London (and being raised in an area near Stratford-upon-Avon) both books resonated with me because of the immediacy of the locations and the ability for the city to maintain a deep sense of history<sup>17</sup>. I regularly see and experience locations, streets and buildings from both books. Both Shakespeare and John Donne would have lived in the same London at the same time, with each book mentioning the other writer/poet as a contemporary character. While there’s no concrete evidence that they did meet, reading the books together paints a portrait of a London with literary and theatrical scene where people are constantly responding, reacting, and trying to improve on others. Shakespeare for example killing off beloved character Falstaff in a bid to demand more intellectual engagement from his audience, or John Donne introducing his friends and lovers to metaphysics. For me, these cycles of inspiration and expression are what drives progress. I consider it important to listen to, learn from, and improve on others.</p>
<!-- - Other Values, Tolerance, Respect for others that are value-driven regardless of what they are. -->
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="4">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://sav.phd/posts/writing/cistern.jpg" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://sav.phd/posts/writing/jerusalem.jpg" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://sav.phd/posts/writing/perfect.jpg" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://sav.phd/posts/writing/signs.jpg" class="img-fluid"></p>
</div>
</div>
</div>
<p>In early 2024 I visited Istanbul and <a href="https://sav.phd/posts/values/">wrote about</a> how people have historically imposed values on others, how people have approached encountering other values, and how this relates to cultural and religious alignment in LLMs. Istanbul seemed to deal with these layers well to me. In recent years the Hagia Sophia was converted from a secular museum to a mosque, though in my opinion this practically has meant not much and was done quite sensitively. A similar city to Istanbul in this sense is Jerusalem. While I’ve never been, Simon Sebag Montefiore’s book provided me with an overview for how values and beliefs are often more layered and complex than distinct and digestible, and that there are historically better ways of dealing with this complexity than conflict.</p>
<p>I read <em>Empire of Signs</em> before and during a trip to Japan. I wrote about it in my post on <a href="https://sav.phd/posts/haiku/">Japan and creative LLMs</a>, and in my post on <a href="https://sav.phd/posts/llm/">cultural competition in AI</a>. In it Barthes presents an idealistic vision of Japan that holds a mirror up to our own beliefs, generally concerned with the lack of ‘whole’ that we focus on in the West and an increased emphasis on the in-between-ness of society, food, the arts and culture, the <em>zen</em>. Reading this book, and visiting Japan simultaneously made me appreciate the opposing and equally valid ways of looking at the world, and centering (or not centering in a Barthes-esque view of Japan) your life around your beliefs. I felt like I came away not only understanding Japan more<sup>18</sup> but understanding my own way of living. To me it is about having respect for others and understanding how other people think, particularly if they have different or opposing values. In reality, there is no real reason for people to have a globally consistent set of values, or want to live life in the same manner. Respecting this, I believe, benefits everyone. In <em>A Perfect Spy</em>, Magnus Pym is a fictional double agent, who no one<sup>19</sup> doubts would have a different ideology to themselves. He eventually runs out of room but not before explaining to the cast of other characters precisely why he did what he did. To me it is about ideologies, motivations and what may happen if you take for granted the layers of beliefs that occur in the real world, and underestimate the very reasonable circumstances that might lead to them. It is one of the best books I’ve ever read.</p>
<div class="no-row-height column-margin column-container"><div id="fn18"><p><sup>18</sup>&nbsp;With the help of my former flatmate now living in Tokyo.</p></div><div id="fn19"><p><sup>19</sup>&nbsp;Eventually they realise this</p></div></div><p>Together, these books and experiences highlight to me that people do think differently to each other, sometimes aligning with a personal set of values, and sometimes in direct opposition. On one end of the spectrum, under appreciating this can put your own beliefs at risk, but on the other end it has the capacity to cause real harm.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="4">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://sav.phd/posts/writing/ratatouille.jpg" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://sav.phd/posts/writing/dominion.jpg" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://sav.phd/posts/writing/athens.jpg" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://sav.phd/posts/writing/gromit.jpg" class="img-fluid"></p>
</div>
</div>
</div>
<p>Finally I’ll highlight two last books, a trip, and two posts. As I previously mentioned I found Tom Holland’s <em>Dominion</em> in a charity shop in 2021 when I neither knew about him, the book, or the Rest is History podcast. Having read it and met him, it really does change the way you see the world. Bruce Clark’s <em>Athens</em> accompanied me on a trip there where I made a point of reading the relevant passages at the proscribed locations. His description of what Athenians, the <em>demos</em>, would have felt like standing at the top of the Acropolis was very evocative. These people had values that they believed to be correct. You can sense the confidence that they had 2500 years later, moreso than you can in a city with a similarly layered history such as Istanbul. As Tom Holland describes, these ideas morphed into Christianity, through philosophy and gave birth to the Western world. You cannot visit the acropolis and not want to be associated with this confidence in some way<sup>20</sup>, and there is no real reason why you shouldn’t. Since experiencing Athens, and reading Dominion, I’ve considered the values that have resulted and that have defined the West, and consider them to be the correct ones.</p>
<div class="no-row-height column-margin column-container"><div id="fn20"><p><sup>20</sup>&nbsp;as Elgin took too seriously</p></div></div><p>Finally, I’ll describe the two pieces that I have enjoyed writing the most. The first, <a href="https://sav.phd/posts/gromit/">an analysis of Wallace and Gromit from the perspective of Ancient Greek mythologies</a> and <a href="https://sav.phd/posts/ratatouille/">an analysis of Ratatouille that frames the animated rat a false prophet</a>. Both are self-indulgent, but both highlight how often fun it is to think a bit deeper about why we live life the way we do, to look around and appreciate those with similar and different beliefs in a lighthearted manner. This ability for self-reflection is a feature in itself that shouldn’t be taken for granted. One that can provide humility and confidence in equal measure.</p>
<p>That’s it for now. I think these are strong enough experiences for me to live and benefit from them, but I appreciate that people could and <em>should</em> change<sup>21</sup>. I hope the half-life of this post is about a decade. As I say at the beginning, I believe values should be <em>heavy</em> and hard to shift or sway. Maybe in ten years I’ll write another version, or a reflection, but for now this is me.</p>


<div class="no-row-height column-margin column-container"><div id="fn21"><p><sup>21</sup>&nbsp;As a belief, meta.</p></div></div>

 ]]></description>
  <guid>https://sav.phd/posts/writing/</guid>
  <pubDate>Fri, 21 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>That! The Haiku and the Sonnet</title>
  <link>https://sav.phd/posts/haiku/</link>
  <description><![CDATA[ 





<p>Cheap reasoning models (e.g.&nbsp;Deepseek r1 [mentioned for engagement purposes]), with chain-of-thought output make it extremely tempting to personify LLMs or their outputs. Similarly, certain models such as Claude (in all its forms) have gained a cult-of-personality type following, where users are more likely to use it for its <em>feel</em> (gained through preferential fine-tuning, a muted colour scheme, a hand drawn logo, or all of the above). Unknown to them, an increasingly large number of users are assigning <em>meaning</em> to the result of a computation. When I refer to <em>meaning</em> in this article I don’t refer to it in the sense of whether something is poetic or accurate or profound, but in a way rather more related to the word meaning <em>ful</em>. Related in some sense to something deeper, that we empathise with.</p>
<p>AGI <strong>is</strong> an unquantifiable threshold, and whether an LLM reaches this will be decided based on a collective <em>reading</em> of the outputs that are produced. That is why the model cannot be separated from the surrounding infrastructure. The colour scheme, the point of interaction, the UI, even the very act of ‘chatting’ all contribute in some sense to our own reading, and whether we choose to recognise an <em>other</em>.</p>
<p>For the purposes of this post, which I am writing in Tokyo Station, I will un-pick the Western endeavour to seek a deeper meaning and state that the outputs from an LLM are <em>meaningless</em>. I mean this in the sense that inferred tokens originates from a <em>soul-less</em> computer. We may <em>impose</em> a meaning on them, but in their most abstracted form, they are the result of computations.</p>
<p>Drawing a literary comparison, the skill in reading a haiku is to <em>not</em> read any meaning into it, but to let it wash over you. Should the same be said for an LLM (that truly does have no meaning in the first place)? Should we let output tokens wash over us <em>like a haiku in accordance to Zen</em>? We turn to Roland Barthes’ reading of <em>haiku</em> in <em>Empire of Signs</em> :</p>
<blockquote class="blockquote">
<p>Here meaning is only a flash, a slash of light: <em>When the light of sense goes out, but with a flash that has revealed the invisible world</em> , Shakespeare wrote; but the haiku’s flash illumines, reveals nothing; it is the flash of a photograph one takes very carefully (in the Japanese manner) but having neglected to load the camera with film. Or again: haiku reproduces the designating gesture of the child pointing at whatever it is (the haiku shows no partiality for the subject), merely saying: <em>that!</em> with a movement so immediate (so stripped of any mediation: that of knowledge, of nomination, or even of possession) that what is designated is the very inanity of any classification of the object: <em>nothing special</em> , says the haiku, in accordance with the spirit of Zen …</p>
</blockquote>
<p>This passage shares so much with how we <em>really</em> know LLMs to work (which is different from how we <em>wish</em> LLMs worked, which is to <em>think)</em> , tokens appearing in an instant from the void. But at the same time highlights just how disparate our readings of LLMs are when compared to something like a haiku (again, to be expected because we assign a value towards an <em>other</em> , but it is important to consider that this importance is ‘created’ in order to process the meaninglessness of an LLM).</p>
<p>This is further amplified by how we interact with LLMs. When people refer to models such as Anthropic’s Claude, they refer not just to the set of weights, or the data centre, but to the personality contained (again, we pretend that this is the case) within the output, which is defined by the overall experience. The UI, the colour scheme, the typeface, even the act of ‘chatting’ is to impose a dialogue with an <em>other.</em> These aspects combined make it irresistible to place meaning where there is none. Either AGI will refer to a holistic experience, or we must treat how we interact with LLMs fundamentally differently.</p>
<p>How do we get around this imposition of our own values onto something meaningless, in effect, to un-interpret the haiku and let it wash over us. Referring back to Barthes, we learn of different approaches, hundreds of years old:</p>
<blockquote class="blockquote">
<p>[…] the haiku has the purity, the sphericality, and the very emptiness of a note of music; perhaps that is why it is spoken twice, in echo; to speak this exquisite language only once would be to attach a meaning to surprise, to effect, to the suddenness of perfection; to speak it many times would postulate that meaning is to be discovered in it, would simulate profundity; between the two, neither singular nor profound, the echo merely draws a line under the nullity of meaning.</p>
</blockquote>
<p>Performing LLM inference multiple times (different temperature values?) may help us to de-personify outputs, enabling us to appreciate the content (but <em>not</em> assign meaning to it). However, very quickly we enter into the space of what I will call the Muji paradox (highlighted to me by Sunil).</p>
<p>Muji: in English ‘no-brand’ is the antithesis of a brand. It embodies the same values found within a haiku though in a commercial sense, not a literary one. The complete lack of meaning. It is important to note though that from a Western perspective, it has failed. Paradoxically, we have associated an aesthetic with it, a quality, and a set of values, in exactly the same way we have done for LLMs.</p>
<div class="center">
<p><img src="https://sav.phd/posts/haiku/1.webp" class="img-fluid" style="width:60.0%"></p>
</div>
<p>An alternative to doing nothing at all, would be to do everything at once. As an example of this, Japanese television exists, and often consists of a dizzying array of fonts and colours. It becomes so overwhelming that you are forced to assign no meaning to the text at all, it simply <em>exists</em>. Read nothing into how it is presented, because it will change. Japanese television in a sense embodies the idea of Zen equally as well as Muji does.</p>
<div class="center">
<p><img src="https://sav.phd/posts/haiku/2.webp" class="img-fluid" style="width:60.0%"></p>
</div>
<p>I propose that to provoke an alternate reading of LLMs, in opposition to the Western AGI-seeking viewpoint, that inevitably converges towards chatting with an <em>other,</em> we treat creative outputs more like haikus. As Barthes’ says, <em>like the flash of a photograph one takes very carefully but having neglected to load the camera with film.</em> This may mean taking the Muji route and attempting to strip any aesthetic, or imposition of values from an LLM (obviously it is not in the interest of an AI company to do this). OpenAI probably has the ‘blandest’ aesthetic, but like Muji, even this has become meaning- <em>full</em>. An alternative would be, like reading a haiku, to present tokens multiple times, similar to <a href="https://en.wikipedia.org/wiki/A_Hundred_Thousand_Billion_Poems">Raymond Queneau’s ‘A Hundred Thousand Billion Poems’</a>. Interacting with an LLM may feel closer to watching a Japanese TV show. So overwhelming in alternative tokens, typeface, colour, conflicting aesthetics, even <em>mode of interaction (</em> RE: chatting <em>),</em> that we are forced to strip any emotion we might infer.</p>
<p>Maybe that’s why we’re struggling to process AI and art, and why the concept of AGI is so messy and intangible. Because we’re imposing a meaning on something that clearly has none (or even worse, imposing a meaning on something that we’ve already imposed a meaning to in the case of Claude). If we embrace this more Buddhist perspective, it may unlock an alternate reading, complimentary to our own AGI-centric one, mirroring the individual dividing lines of the West/East, <em>the Haiku and the Sonnet.</em></p>



 ]]></description>
  <guid>https://sav.phd/posts/haiku/</guid>
  <pubDate>Wed, 29 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Has an LLM Cultural Victory Already Been Achieved?</title>
  <link>https://sav.phd/posts/llm/</link>
  <description><![CDATA[ 





<div class="center">
<p><img src="https://sav.phd/posts/llm/1.webp" class="img-fluid" style="width:60.0%"></p>
</div>
<p>There has been huge talk recently regarding the performance-to-cost ratio of Deepseek’s LLM products, particularly their new reasoning model causing OpenAI’s reasoning-based moat to partially evaporate. Companies like Perplexity, Cursor &amp; Co (including most YC startups these days) have been quick to integrate these with good reason, most likely saving themselves some money in the process. Most likely, Deepseek have generated a large amount of synthetic data from state-of-the-art models such as o1, or by cleverly prompting non-reasoning models such as 4o or their own V3. As an accepted practice, this is the core idea behind recursive improvement, so no harm done. And if OpenAI and others have priced their API correctly, then they’re also set to gain. Everyone’s a winner (spoilers, they are not), and we’ll only see more of this in the future.</p>
<p>I personally have been benchmarking LLMs to make decisions within Bayesian optimisation loops, in a bid to eke out some in-silico performance (for functions that behave reasonably). Every time I reach a natural conclusion to benchmarking where the next best model is too expensive to run on my test suite, someone pushes the Pareto front a little bit more in the direction of ‘time to stop writing that preprint and get some more results’. The impact of these models will be never be as small as it is now.</p>
<p>A obvious point that people still seem to find surprising is that Deepseek censor inputs and outputs to align with the views of the Chinese government, specifically (again, rather obviously) events surrounding Tiananmen Square. Given Deepseek’s servers will be in China, it’s an aspect of communication that the Government has enforced for practically as long as the internet has existed.</p>
<p>I consider this very much a <em>non-story</em>. What I find <strong>more</strong> interesting are what underlying <em>values</em> the LLM has. These go deeper than specific phrases or keywords and enter into the murky realm of thoughts and feelings.</p>
<div class="center">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sav.phd/posts/llm/2.webp" class="img-fluid figure-img" style="width:60.0%"></p>
<figcaption>A not very interesting discussion that has not much to do with machine learning at all.</figcaption>
</figure>
</div>
</div>
<p><a href="https://blog.sav.phd/p/generative-models-as-mirrors-and">I’ve written previously about values and LLMs</a>, and how datasets not only contain a representation of language as a structure, but the values of those who have written or collated the text. In effect, we shouldn’t be surprised when models from other countries appear misaligned to our own, Western, benchmarks, <strong>if they have been trained on distinct datasets</strong>. Even with learned translation, we shouldn’t be surprised if we don’t find them particularly revealing, especially as we approach concepts such as ‘intelligence’. Likewise, as we in the West share more common values with current SOTA LLMs than those elsewhere, we shouldn’t be surprised if they are found less appealing or useful in other countries. This is a hidden upside to the development of LLMs, they are implicitly more accessible, beneficial and provide more productivity to those with similar values.</p>
<div class="center">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sav.phd/posts/llm/3.webp" class="img-fluid figure-img" style="width:60.0%"></p>
<figcaption>A slightly more nuanced comment. Some hints that there is more at play than just basic censorship.</figcaption>
</figure>
</div>
</div>
<p>So what work has already been done in this field? The preprint <a href="https://arxiv.org/abs/2411.06032">“<strong>LLM-GLOBE: A Benchmark Evaluating the Cultural Values Embedded in LLM Output</strong>”</a> presents a methodology based from a framework devised in 2004. Outputs from LLMs are ranked using an automated ‘jury’ across a number of criteria including “Institutional Collectivism” and “Future Orientation” etc… It’s a logical extension to the original methodology, and I won’t argue against this work or the proceeding work on GLOBE (for now). What I care about are the results. So after all that, we have a brand new suite that measures exactly what we’re interested in. Not censorship, or language, but <em>values</em>. Time to reveal the results…</p>
<div class="center">
<p><img src="https://sav.phd/posts/llm/4.webp" class="img-fluid" style="width:60.0%"></p>
</div>
<p>Oh. They look strikingly similar. So Chinese LLMs (Qwen) and English LLMs (GPT-4) really do have the same values? The authors claim that Chinese LLMs score (quantitatively) significantly higher on cultural rankings, though another conclusion is that LLMs are <em>‘…not perfect representations of the cultural values of development contexts…’.</em> In my eyes these are slightly conflicting. So what is happening here?</p>
<p>I suspect that datasets have a lot to do with it. As is common and now an encouraged direction, LLMs are being trained with synthetic datasets derived from other LLMs on the Pareto front of cost-to-performance, depending on how much you value volume over quality. The implication is that unless you go and collect a large amount of ‘virgin’ data (arguably this is now impossible), you are building on the foundations that previous LLMs have constructed, and implicitly, the values contained within them. Similar to how all modern compilers stem from the original A-0 compiler by Grace Hopper.</p>
<p>For a company like Deepseek, this poses an interesting question. If you value money, pursue what people will buy at breakneck speed. Use all the foundational work available to you and built a product that is so cheap and so effective that market forces takes over. <em>Then</em> you can worry about values. But for now, assuming that geopolitical forces at play are using LLMs like pawns on a chessboard, models like Deepseek are built on Western foundations. While OpenAI may take a temporary minor financial hit because of a potentially reduced market share, the game was set in motion a few years ago now, and it will be difficult to untangle.</p>
<p>There is a way out for Deepseek and its hypothetically value-driven creators. The model is cheap and good enough that large synthetic datasets will be created from it. By shifting the dial in favour of your own beliefs, or augmenting your model with your own value-driven data, it may be possible to shift the dial against Western values. There are glimmers of this seen in the tweet above which I will re-present.</p>
<div class="center">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sav.phd/posts/llm/3.webp" class="img-fluid figure-img" style="width:60.0%"></p>
<figcaption>A slightly more nuanced comment. Some hints that there is more at play than just basic censorship.</figcaption>
</figure>
</div>
</div>
<p>However, the game is being played continuously, not turn-by-turn. By announcing huge amounts of funding for data centres such as <a href="https://www.bbc.co.uk/news/articles/cy4m84d2xz2o">Stargate</a>, the West is aggressively attempting to not only win this race over the values of future LLMs, but remove the need for it. The sheer volume of compute is a hedge against other LLMs and a mitigation strategy against having to use the best data available on the open (geopolitical) market, by way of self improvement and reinforcement learning in a controlled setting. So has cultural victory been achieved? Can other nations untangle the roots that have grown? It will be a huge effort.</p>
<section id="appendix---empire-of-signs---roland-barthes" class="level3">
<h3 class="anchored" data-anchor-id="appendix---empire-of-signs---roland-barthes">APPENDIX - EMPIRE OF SIGNS - ROLAND BARTHES</h3>
<p>Recently I read Empire of Signs by Roland Barthes on the recommendation of Sunil Manghani, ahead of a trip to visit a friend in Japan. Barthes describes a fictional Japan, used as a device to counter Western ideologies and values. As follows:</p>
<p>Barthes broadly outlines a vision of Japan, and more generally the East, as a place where the sum of the parts don’t make a whole, but signify the act of the summation itself, the inbetween-ness of the parts. He makes this point by commenting on the writing system (composition of smaller signs), food (which itself exists in divisions that can only be divided further by chopsticks, never violently cut or <em>destroyed</em>), and through the act of giving gifts, wherein the packaging and <em>act</em> of giving a gift outweighs the contents. There is no centre, no answer, no true meaning to life in Barthes’ created world, it exists in the in-between spaces. Barthes describes the act of writing a Haiku like taking a single picture, without any film (or a memory card) in the camera.</p>
<p>We in the West want to impose a <em>meaning</em> to our models and their outputs, maybe stemming from our core belief of individualism, seeking to look inwards and attempting to assign a meaning or search for a soul. For those in Barthes Japan, the act of using an LLM, or the tokens themselves may have more importance. The instant that language is generated, but not the language itself, the process. I haven’t properly thought about the implications of this, but it leans into the creative process I am sure, and how LLMs can truly contribute outside of finding a creative solution. I’m sure Sunil and myself will discuss further, but speculatively, maybe the solution for the East and those without Western ideologies is to think beyond our established idea of ‘chatting’, implicitly with another <em>being</em>, a thing, a <strong>whole.</strong> We might not find it interesting or useful, but others might, and that’s OK.</p>


</section>

 ]]></description>
  <guid>https://sav.phd/posts/llm/</guid>
  <pubDate>Wed, 22 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Optimal Bookshelf Organisation</title>
  <link>https://sav.phd/posts/books/</link>
  <description><![CDATA[ 





<div class="center">
<p><img src="https://sav.phd/posts/books/1.webp" class="img-fluid" style="width:60.0%"></p>
</div>
<p>How someone organises, or chooses not to organise a bookshelf can say a lot about them. I personally don’t think there is any sense in enforcing a specific order. My strategy can be summarised as ‘vibes based’. There is joy in being able to know roughly where a book is and pick it out mid conversation. It makes me feel like I’m some sort of magician or an old librarian, holding the secret mental key that will unscramble order from chaos.</p>
<p>But, if you don’t believe in this serendipity, you might be inclined to choose <em>something</em> to base the order on. Given we are pretty good at remembering the title of a book, maybe alphabetical order is good. Actually, authors should be grouped together, so let’s make them alphabetical. What about we do that and then also group some categories of similar books together (S/O Dewey). The most intelligent of us out there may choose to forego any sense of useful meaning, and satirically choose to base the order on the colour of the cover, subverting the old book judging adage.</p>
<div class="center">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sav.phd/posts/books/2.webp" class="img-fluid figure-img" style="width:60.0%"></p>
<figcaption><a href="https://x.com/trussliz/status/1838101872969687143">No Comment</a></figcaption>
</figure>
</div>
</div>
<p>These approaches have been discussed at length <a href="https://www.clutter.com/blog/posts/how-to-organize-book-collection/">here</a> <a href="https://www.penguin.co.uk/articles/2022/01/bookshelf-organising-tips-books-home-library">here</a> <a href="https://www.neathousesweethome.com/aesthetic-ways-to-organize-bookshelves/">here</a> <a href="https://bookriot.com/how-to-organize-bookshelves/">here</a> and <a href="https://www.oprahdaily.com/life/g35578167/how-to-organize-bookshelves/">here</a>, you get the idea. The reason they’re up for debate is because none of them are truly <em>optimal.</em> None take advantage of all the available information… <strong>Until now.</strong> Later on in this post I will describe an optimal strategy to sorting a book collection that I’ve also made open source, but first we must collect some data.</p>
<p>Digitising all the books I own is a task low down on my todo list (compared to finishing my PhD). So to aid in this, I created a Command Line Interface (CLI) tool to help me. It’s available <a href="https://github.com/trsav/bookshelf/tree/main">here</a> and I’ve creatively named it <code>optimal-bookshelf</code>. It allows you to add books to a persistent locally-stored virtual library by searching for a title using open book APIs (i.e.&nbsp;Google Books), after which a more thorough search is performed and the specific edition can be selected. Ideally most of the information is correct at this point, but you then have the option to edit specific data such as the ISBN. I tailored this tool as I was digitising my collection, so it should be as efficient as possible on the Pareto curve of information vs time.</p>
<p>This enabled me to create an accurate digital representation of all the books I own, down to the specific edition, in a relatively short amount of time.</p>
<div class="center">
<p><img src="https://sav.phd/posts/books/3.webp" class="img-fluid" style="width:60.0%"></p>
</div>
<p>But what to do with this wealth of information? Well, for now it is largely text-based. To do anything that will concern a notion optimality, we need <em>numbers</em>. It follows that we can summarise <strong>all</strong> the information that we have generated, and result in a numerical representation by creating <em>embeddings</em> of our virtualised book-twins. By tokenising the information, embeddings represent text as dense vectors in a high-dimensional space using models trained specifically for this purpose. These embedding models are designed to capture semantic relationships between words and phrases, allowing us to perform mathematical operations that measure how similar different pieces of text are to each other. In the <code>optimal-bookshelf</code> CLI, embeddings are created using OpenAI’s<code>text-embedding-3-large</code> model and can easily be generated using the <code>$ bookshelf embed</code> command.</p>
<p>If I make the assumption that I want books near each other to be semantically related (i.e.&nbsp;have a low Euclidian distance in embedding space), and that every book must appear on my bookshelf exactly once, I can equivalently formulate this task as an optimisation problem, minimising the total distance travelled by traversing from embedding to embedding. In this case I don’t mind that this trip isn’t a loop (because my bookshelf is a ‘line’ and not a circle, but this can be revisited later), resulting in a formulation of the classic integer programming <strong>no-return <a href="https://en.wikipedia.org/wiki/Travelling_salesman_problem#Special_cases">Travelling Salesmen Problem</a></strong>. Solving this will result in a sequence of books that embodies the lowest total semantic difference between neighbouring books. It makes the <em>most sense,</em> in ways that are not just affiliated with the title or the author, or even the genre, but the fundamental <em>concept</em> of that book <em>.</em> Having generated embeddings, solving this problem is easy in <code>optimal-bookshelf</code>. Just run the command <code>bookshelf tsp.</code></p>
<p>For visualisation purposes, you can also solve a TSP over embeddings that have first been reduced to two dimensions. The easiest and generally most effective way to do this in situations where the meaning isn’t too important (<a href="https://arxiv.org/pdf/2002.06910#:~:text=Despite%20their%20usefulness%2C%20t%2DSNE,non%2Dexperts%20in%20dimensionality%20reduction.">alert they can be misleading</a>) is to use <a href="https://www.jmlr.org/papers/volume9/vandermaaten08a/vandermaaten08a.pdf">t-SNE</a>. Running <code>bookshelf tsp -v</code>(for visual) first uses t-SNE to reduce the dimension of the embeddings, and then solves the reduced dimension TSP (as the TSP relies on a distance matrix it scales with number of points and not dimensionality) resulting in the following:</p>
<div class="center">
<p><img src="https://sav.phd/posts/books/4.webp" class="img-fluid" style="width:60.0%"></p>
</div>
<p>It’s really interesting to follow the path and see themes emerging based on author or publication date, or even if the book is read, unread, or in progress, though I’m choosing to keep secret and just label the titles. It all acts like a constellation of my reading interests and habits, similar to the manually created constellation of artists at the Tate Liverpool.</p>
<div class="center">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sav.phd/posts/books/5.webp" class="img-fluid figure-img" style="width:60.0%"></p>
<figcaption><a href="https://www.tate.org.uk/visit/tate-liverpool/display/constellations">Tate Liverpool Constellations</a></figcaption>
</figure>
</div>
</div>
<p>I think an interesting extension would be to specify a certain number of shelves, then solve the TSP for a corresponding number of lines equal to the available shelves. In theory I have the number of pages in each book available, so I could add a physical packing constraint here to ensure all the books fit. For full transparency, here’s my current optimal shelf based on this semantic TSP. Spot the various threads that emerge…</p>
<pre><code>1. GRAVITY'S RAINBOW
2. THE MASTERS
3. THE BOOKS OF JACOB
4. FLIGHTS
5. DRIVE YOUR PLOW OVER THE BONES OF THE DEAD.
6. THE PLAGUE
7. PANDAEMONIUM 1660–1886
8. UTOPIA
9. POLITICS ON THE EDGE
10. THE RESTLESS REPUBLIC: BRITAIN WITHOUT A CROWN
11. 1599: A YEAR IN THE LIFE OF WILLIAM SHAKESPEARE
12. WILLIAM SHAKESPEARE POETRY
13. OEDIPUS AT KOLONOS
14. THE ODYSSEY: TRANSLATED BY EMILY WILSON
15. THE ILIAD: TRANSLATED BY EMILY WILSON
16. THE DIVINE COMEDY
17. DON QUIXOTE
18. THE THREE MUSKETEERS
19. THE COUNT OF MONTE CRISTO
20. CRIME AND PUNISHMENT
21. THE KARAMAZOV BROTHERS
22. THE IDIOT
23. HUMAN, ALL TOO HUMAN &amp; BEYOND GOOD AND EVIL
24. THE EMANCIPATION PROCLAMATION
25. THINK AND GROW RICH
26. TALKING TO STRANGERS
27. ESCAPE FROM MODEL LAND
28. VALUES
29. DOMINION
30. JERUSALEM
31. THE WORLD OF STONEHENGE
32. GOING TO CHURCH IN MEDIEVAL ENGLAND
33. THE RUIN OF ALL WITCHES
34. MIDNIGHT IN CHERNOBYL
35. ABYSS: THE CUBAN MISSILE CRISIS 1962
36. SECRET WARS
37. DIVIDED HOUSES: THE HUNDRED YEARS WAR III
38. TRIAL BY BATTLE: THE HUNDRED YEARS WAR I
39. TRIAL BY FIRE: THE HUNDRED YEARS WAR II
40. HIGH PERFORMANCE ROWING
41. WRITING ABOUT SPORT
42. GAZZA AGONISTES
43. THE LAST LEONARDO
44. THE CREATIVE ACT
45. ON ART AND LIFE
46. STORY OF ART
47. THE PENGUIN BOOK OF CLASSICAL MYTHS
48. VENI, VIDI, VICI
49. THE TWELVE CAESARS
50. THE HISTORY OF THE DECLINE AND FALL OF THE ROMAN EMPIRE: ABRIDGED EDITION
51. PAX
52. ASTERIX: ASTERIX AND THE WHITE IRIS
53. SUPER-INFINITE
54. SYSTEMS FOR...
55. MOBILE MANIA
56. THE ICON CATALOGUE UK GARAGE VOL. 1
57. LONDON FEEDS ITSELF
58. LONDON FIELDS
59. DAMASCUS STATION
60. MOSCOW X
61. A PERFECT SPY
62. THE SPY AND THE TRAITOR
63. BEHIND THE ENIGMA
64. THE MERCENARY RIVER
65. THE LADYBIRD BOOK OF THE HANGOVER
66. STIG OF THE DUMP
67. THE TALES OF BEEDLE THE BARD
68. HARRY POTTER AND THE HALF-BLOOD PRINCE
69. JOURNEY TO THE CENTRE OF THE EARTH
70. DR JEKYLL AND MR HYDE
71. TREASURE ISLAND
72. TOM SAWYER &amp; HUCKLEBERRY FINN
73. THE ADVENTURES AND MEMOIRS OF SHERLOCK HOLMES
74. THE RETURN OF SHERLOCK HOLMES
75. MACHINES OF LOVING GRACE
76. PROCESS DYNAMICS AND CONTROL
77. GAUSSIAN PROCESSES FOR MACHINE LEARNING
78. BAYESIAN OPTIMIZATION
79. NUMERICAL OPTIMIZATION
80. ROBUST OPTIMIZATION
81. FOUNDATIONS OF APPLIED MATHEMATICS, VOLUME 2
82. FOUNDATIONS OF APPLIED MATHEMATICS, VOLUME I
83. HOW TO PROVE IT
84. INTRODUCING LOGIC
85. INTRODUCING QUANTUM THEORY
86. INTRODUCING CHAOS
87. INTRODUCING FRACTALS
88. INTRODUCING INFINITY
89. OUR MATHEMATICAL UNIVERSE
90. COLLINS DICTIONARY OF MATHEMATICS
91. FOUR COLORS SUFFICE
92. RINGWORLD
93. THE LORD OF THE RINGS
94. THE HOBBIT
95. CLOUD ATLAS
96. A SUPPOSEDLY FUN THING I'LL NEVER DO AGAIN
97. INFINITE JEST
98. AMERICAN PSYCHO
99. BRING UP THE BODIES
100. THE NATION KILLERS
101. BURY MY HEART AT WOUNDED KNEE
102. STALINGRAD
103. WAR AND PEACE
104. NAPOLEON IN EGYPT
105. GREECE
106. ATHENS
107. DEMOCRACY'S BEGINNING
108. THE BATTLE FOR THE ARAB SPRING
109. MIKE CONTRE-ATTAQUE!
110. KISSINGER
111. THE ESCAPE ARTIST
112. 1000 YEARS OF JOYS AND SORROWS
113. LUCKY KUNST
114. MURDER ON THE DARTS BOARD
115. GONE FISHING
116. THE SATSUMA COMPLEX
117. THAT'S YOUR LOT
118. MARCH OF THE LEMMINGS
119. HOUSE ARREST
120. COMING HOME
121. NO TURNING BACK
122. KILLING THATCHER: THE IRA, THE MANHUNT AND THE LONG WAR ON THE CROWN
123. SAY NOTHING: A TRUE STORY OF MURDER AND MEMORY IN NORTHERN IRELAND
124. FALL
125. ONE TWO THREE FOUR: THE BEATLES IN TIME
126. K-PUNK
127. DEATH AND THE PENGUIN
128. MURDLE
129. THE HARD-BOILED WONDERLAND AND THE END OF THE WORLD
130. ON THE ROAD
131. A MOVEABLE FEAST
132. FLAUBERT'S PARROT
133. NINETEEN EIGHTY-FOUR
134. TENDER IS THE NIGHT
135. THE UNBEARABLE LIGHTNESS OF BEING
136. SLAUGHTERHOUSE-FIVE
137. CATCH-22
138. WE ALWAYS TREAT WOMEN TOO WELL</code></pre>
<p>I think another next logical step would be to build in a recommendation tool based on the vector embeddings and maybe even the resulting TSP solutions. This would potentially result in a bi-level integer program (hard) depending on what you deem most important (add a book that would fit most optimally within a current collection of books, or add a book that would result in the most added distance to the resulting optimal semantic tour?), but with a small enough number candidates this could be solved without approximation. We will see.</p>
<p>Was it worth it? Perhaps the lesson in all of this is that fulfilment lies not in choosing between chaos and order, but in finding systems that embrace both—straddling each paradigm, allowing us to be both the organised librarian and to take a book for a walk.</p>
<div class="center">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sav.phd/posts/books/6.webp" class="img-fluid figure-img" style="width:60.0%"></p>
<figcaption>Paul Klee.</figcaption>
</figure>
</div>
</div>
<p>As I’ve quoted before, Donella Meadows states in her book <em>Thinking in Systems: A Primer:</em></p>
<blockquote class="blockquote">
<p>There is yet one leverage point that is even higher than changing a paradigm. That is to keep oneself unattached in the arena of paradigms, to stay flexible, to realize that no paradigm is “true”, that every one, including the one that sweetly shapes your own worldview, is a tremendously limited understanding of an immense and amazing universe that is far beyond human comprehension.</p>
</blockquote>
<p>All code for this post can be found here: <a href="https://github.com/trsav/bookshelf" class="uri">https://github.com/trsav/bookshelf</a></p>



 ]]></description>
  <guid>https://sav.phd/posts/books/</guid>
  <pubDate>Thu, 28 Nov 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>On Gromit &amp; Wallace</title>
  <link>https://sav.phd/posts/gromit/</link>
  <description><![CDATA[ 





<p>I have not been given access to a preview screening of the upcoming Wallace and Gromit feature <em><a href="https://www.bbc.co.uk/mediacentre/articles/2024/wallace-and-gromit-vengeance-most-fowl">A Vengeance Most Fowl</a>.</em> However, I can still tell you what will happen.</p>
<p>Wallace will act in his own short-sighted interests. He will avoid conflict at any cost, to the detriment of his long suffering slave dog Gromit. Useful idiot Wallace will then be exploited by forces very much within his control and Gromit will in turn, for some reason, save the day. Having experienced a range of emotions that Wallace could not even consider yet alone acknowledge, Gromit will then sit down with his newspaper, and return to the way things were. Largely being offered cheese.</p>
<p>To live the life of Gromit is to be moulded, to be <em>morphed,</em> both by Wallace and his divine Creators, and, lacking a means of communication, be denied the ability to return the favour. Voiceless Gromit is a bottomless vessel of emotional tolerance. He knows he has experienced pain before, and knows he will experience it again. Often confronting the viewer directly, he is quiet sign of resistance against all that serve to shape him.</p>
<div class="center">
<p><img src="https://sav.phd/posts/gromit/1.webp" class="img-fluid" style="width:60.0%"></p>
</div>
<p>The Plight of Plasticine Gromit is one that is destined to be told and retold for years to come. Gromit, and to a lesser extent Wallace, has transcended light entertainment and entered the realm of the folk-tale, there is no doubt that he now exists as part of a contemporary mythology. The retellings have begun; Wallace’s original orator Peter Sallis is dead, and now Ben Whitehead has taken up the mantle. Implicitly, these characters are destined to live on beyond even Nick Park’s passing. We are custodians of these models and bear their weight of their stories, it is our responsibility to ensure they are told ad infinitum. We shape them, and they mould us.</p>
<p>Just as the Gods in epics such as The Iliad occasionally appear in physical form on the battlefield to remind their subjects who is pulling the strings, the fingerprints of Aardman employees linger as a reminder of an omniscient puppet master. However, despite playing a God-like role in the lives of Gromit and Wallace, we are no longer in control.</p>
<p>Greek God Apollo granted human priestess Cassandra the gift of prophecy, but upon rejecting his advances - cursed her, ensuring that Cassandra’s prophecies were forever true but never believed. We as creator have bestowed upon Gromit emotional maturity and an understanding of the human condition, he speaks the truth in all of us. Just as Cassandra’s truth was destined to be spoken but never heeded by other humans, Gromit’s silent wisdom is destined to be witnessed but never fully grasped by slave master Wallace. Like Apollo’s gift, Gromit’s message has transcended beyond our control. Apollo, the God who could see all futures, could not change Cassandra’s use of his gift; we, who can mould Gromit’s form, cannot control our depiction of him. If Gromit could speak he would probably say something like:</p>
<blockquote class="blockquote">
<p>Nick Park, Nick Park!<br>
God of all ways, but only Death’s to me,<br>
Once and again, O thou, Destroyer named,<br>
Thou hast destroyed me, thou, my love of old!</p>
</blockquote>
<div class="center">
<p><img src="https://sav.phd/posts/gromit/2.webp" class="img-fluid" style="width:60.0%"></p>
</div>
<p>Given this, we often find ourselves coming to expect that Gromit will strike a more introspective tone than other figures in Gromit and Wallace. As an entity his personal mythology is more emblematic to Sisyphus and his eternal punishment of rolling a boulder up a hill as opposed to heroic Hercules triumphing over rogue bakers, or a pair of mechanical trousers piloted by a penguin.</p>
<p>However, in this contemporary myth of stoicism, Gromit does not play the role of Sisyphus. <strong>Gromit is the boulder.</strong> We as custodians bear the weight of bringing him into existence, we are doomed to tell the tragedy of Gromit, to raise him up, and to pull him down. Gromit and I will never summit, and we are burdened with that responsibility. In this analogy, Wallace serves as the mountain itself, static, unwavering in complacency. Wallace provides no respite for us, nor Gromit. We are doomed to force Gromit to try and try again, and yet go nowhere at all. Laika was given the tragic reward of burning up into a preconceived infinite lightness, eternal fame and glory. We rewarded Gromit’s trip into space with some cheese (which he doesn’t seem to personally enjoy that much).</p>
<div class="center">
<p><img src="https://sav.phd/posts/gromit/3.webp" class="img-fluid" style="width:60.0%"></p>
</div>
<p><em>“Here I sit, I can do no other”</em> once proclaimed Gromit, or so it goes. This puritanical stoicism in the face of eternal damnation that he shows is evidence that Gromit <em>is the main character. Gromit and Wallace.</em> Though, we must also consider the role that Wallace plays within this myth. He is a glutton at best. Motivated by cheese, and famously in-bread. He is meek and self-serving, a pushover. Dante reserved the vestibule of hell to these people with no ambitions, good nor bad. <em>Abandon all hope, ye who enter here.</em> They were destined for eternal stagnation. There are those characters in the mythology that do have ulterior motives, i.e.&nbsp;the penguin, but Wallace is unbefitting of even a negative analysis. He is nothing. He exists purely as blank canvas on which Gromit can project both his pleasure and pain.</p>
<div class="center">
<p><img src="https://sav.phd/posts/gromit/4.webp" class="img-fluid" style="width:60.0%"></p>
</div>
<p>How can Gromit transcend beyond his invented suffering, if we have lost control of the strings? How will this folk-tale evolve? One scenario is for Gromit to be considered, in the future, to be assumed to be based on a real dog. Hopefully in that case this very blog will be lost and cease to serve as a reminder that he’s completely made up. The weight of our burden as creators and custodians would be transformed into historical documentation.</p>
<p>Papers will be written and debates will be held over “The Historical Gromit” - analysing evidence for his actual existence, debating the accuracy of various tellings, arguing over the true location of his home. The fingerprints in the clay would be studied not as signs of divine creation but as proof of historical authenticity. Academics would argue over whether “A Grand Day Out” represents an actual journey to a lost moon made of cheese, or is merely allegorical.</p>
<p>The ultimate victory over Gromit’s current metaphysical Sisyphean existence will not be in being pushed to the top of the mountain by us humans, but in future generations assuming we were never pushing a boulder at all - merely documenting a profound historical truth about a dog who carried the weight of human wisdom in silence.</p>
<p>There is a cruel twist to this fate. Like Wallace, we will miss the point of the tale entirely - and yet like Gromit, we now must bear this misunderstanding with stoic grace. From Gromit to Wallace.</p>
<p>CANIS VIVIT.</p>



 ]]></description>
  <guid>https://sav.phd/posts/gromit/</guid>
  <pubDate>Tue, 26 Nov 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>‘No Bat Death’ as a Policy for Industrial Growth and National Security.</title>
  <link>https://sav.phd/posts/bat/</link>
  <description><![CDATA[ 





<div class="center">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sav.phd/posts/bat/1.webp" class="img-fluid figure-img" style="width:60.0%"></p>
<figcaption><a href="https://x.com/Dan4Barnet/status/1855680730765943060/photo/1">No bat death is acceptable.</a></figcaption>
</figure>
</div>
</div>
<p>Recently, <a href="https://x.com/Dan4Barnet/status/1855680716169740375">Dan Tomlinson MP</a> chose to highlight the investigations (<a href="https://www.ft.com/content/fd5e34dc-e006-491b-93b2-576e3adf45f8">here</a> and <a href="https://www.theguardian.com/uk-news/2024/nov/07/cost-of-shed-to-protect-bat-colony-near-hs2-has-topped-100m-chair-says">here</a>) into the enormous cost of the Great Bat Tunnel (GBatunnel) of 2024. Others have irked, however I personally consider the tunnel a unique feat of mammalian cooperation and will look back fondly at the moment that both bat and human met each other exactly in the middle, having started from their respective ends of the 1km section of track.</p>
<div class="center">
<p><img src="https://sav.phd/posts/bat/2.webp" class="img-fluid" style="width:60.0%"></p>
</div>
<p>Many commentators have chosen to use the bat tunnel as a case study. It is a single example (of 8,276 in the case of HS2) of how a tangled web of stakeholders can grind large infrastructure projects to a halt and increase costs, all while inflation ticks away in the background. We must also spare a thought for those bats who are also feeling the pinch in these uncertain times. The price of small pieces of fruit have skyrocketed, and of course bat-employers (presumably cave related, i.e.&nbsp;maintenance or otherwise) have been directed not to increase weekly bug allowances to avoid a bug-price spiral. Not only this, but us humans have selfishly decided to increase transport capacity between two of our largest cities, in an attempt to stimulate a generation of economic growth.</p>
<p>Ironically if I <em>were</em> fortunate enough to be a bat, well protected as they are, I would go on strike, avoiding any significant crossings or journeys in entirety making the batunnel useless (apparently the bats have disappeared from the batunnel stretch, presumably on strike as I outline). Regardless, the batunnel now exists, and I speak for all British taxpayers in wishing any future bats a safe and enjoyable crossing should they wish to fly over this particular bit of train track.</p>
<p>However, <strong>Natural England have set a dangerous precedent.</strong> By taking a hardline policy in favour of bat-lives, to the tune of £100 million, they have exposed their hand.</p>
<p>In this post I will outline three proposals to exploit this <em>no-bat-death</em> precedent that will solve not only the planning system but also infrastructure, growth as well as issues of national security. The majority of these rely on obtaining a number of rare bats. I think this is a solvable issue (supposedly they’re not actually that rare) and I would probably ask a consultant to do this for me from the offset.</p>
<div class="center">
<p><img src="https://sav.phd/posts/bat/3.webp" class="img-fluid" style="width:60.0%"></p>
</div>
<section id="every-planning-proposal-or-amendment-must-be-accompanied-by-a-murdered-bechsteins-bat." class="level3">
<h3 class="anchored" data-anchor-id="every-planning-proposal-or-amendment-must-be-accompanied-by-a-murdered-bechsteins-bat."><strong>Every planning proposal or amendment must be accompanied by a murdered Bechstein’s bat.</strong></h3>
<p>This is a local solution to the bat tunnels dilemma specifically and more broadly the planning system. Natural England would be made to weigh up the cost of a single bat dying, and the resulting small amount of conscious blood on their hands, against the potential of multiple bats experiencing the long and drawn out suffering of being hit by a 200mph train, due to <em>their</em> inaction.</p>
<p>Given their policy that <em>no</em> bat must die, they will not be pleased either way. The resulting paradox will most likely force them to reconsider their position, or potentially suffer indefinite operational gridlock. Assuming that Natural England will bend to the prospect of bat martyrdom (<a href="https://blog.sav.phd/p/ratatouille">animal martyrdom is something I have spoken about at length in a previous post</a>), they must seriously consider whether a proposal is worthwhile submitting in the first place. This I think has potential for other animal related planning proposals (unless there are one or two animals left like a white rhino or something, in which case this policy is entirely destructive). For example, if you come to me wanting to build a tunnel for hedgehogs, I’ll only consider it if you run over a hedgehog to show me you’re serious. Otherwise, all those hedgehog lives will be on you.</p>
</section>
<section id="a-bechsteins-bat-is-held-in-captivity-at-the-centre-of-every-site-of-national-interest." class="level3">
<h3 class="anchored" data-anchor-id="a-bechsteins-bat-is-held-in-captivity-at-the-centre-of-every-site-of-national-interest.">A Bechstein’s Bat is held in captivity at the centre of every site of National interest.</h3>
<p>For many years defence hawks have advocated for an increased proportion of GDP to be spent on Defence &amp; National Security. A simple proposal to ensure this money is allocated (the precedent of the bat tunnel demonstrates this) is to first introduce and then highlight the presence of Bechstein’s bats at these sites. Natural England will then, naturally, begin proceedings to protect these bats at any cost.</p>
<p>These bats could also be used in both a defensive and offensive manner. For example, if creatively enough located, ideally at the very centre of these sites or even underground, there will be significant enough impetus on Natural England to increase security and lobby for increased defence spending. <strong>No bat must die.</strong> Here the assumption is that Natural England will treat bats in captivity equally to those that exist in the wild. The alternative is to manually introduce Bechstein’s bats into the wild near these sites of strategic national interest. I would probably begin with scattering them throughout the coastline of the UK, with a few at the major ports just to be sure. The balance is how to do so in a way that they are still considered endangered. Defensively, the very existence of Natural England and their unflinching commitment to bat wellbeing will act as a strong deterrent to other countries, given their explicitly stated and previously enforced red lines.</p>
<p>Similarly, bats could be offensively transported alongside soldiers in the standing army to war zones across the world. Natural England would then presumably take it upon themselves to form an auxiliary corps responsible for protecting these bats at any cost in the face of enemy aggression. A downside of this strategy is that hostage-bats may be used in a similar manner by the enemy in order obtain certain demands, though I will assume that given their namesake, Natural England are only concerned with the welfare of Anglo-Saxon bats. In this case, a bat proxy-war may break out between the respective wildlife organisations of each country, hell-bent on saving their own bat’s lives at any cost. We must also consider the ideal that Natural England cares equally about Anglo-Saxon bats based abroad as it does those flying peacefully at home, with all the comforts of a standard batunnel. This further raises questions into Natural England’s policy regarding migratory birds which I will not get into.</p>
</section>
<section id="a-bechsteins-bat-at-the-bank-of-england-is-fed-a-daily-bug-allowance-inversely-proportional-to-inflation." class="level3">
<h3 class="anchored" data-anchor-id="a-bechsteins-bat-at-the-bank-of-england-is-fed-a-daily-bug-allowance-inversely-proportional-to-inflation.">A Bechstein’s Bat at the Bank of England is fed a daily bug allowance inversely proportional to inflation.</h3>
<p>It goes without saying that this bat must not die, at any cost. The economists at the Bank of England must carefully use the dials and levers available to them to ensure that inflation is kept low. While this is what they presumably get up to anyway, the additional presence of a Bechstein bat, and the resulting pressure from Natural England will ensure that they stick to their targets.</p>
<p>This policy raises the interesting potential scenario wherein Natural England themselves may be required to voluntarily free up their own funding, martyring themselves in the name of the Bank of England Bat. Employees and concerned campaigners will reach a Buddhist style Nirvana of bat well-being, free of their own cause. Maybe the real infrastructure was the bats we saved along the way.</p>


</section>

 ]]></description>
  <guid>https://sav.phd/posts/bat/</guid>
  <pubDate>Mon, 11 Nov 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>On So Solid Crew &amp; Raymond Queneau</title>
  <link>https://sav.phd/posts/so_solid/</link>
  <description><![CDATA[ 





<p>Sonnets, Haikus, and Palindromes are all forms of literary constraints. It is by constraining the structure of what is linguistically possible through the application of rules, that words gain an outsized meaning. There is a sense of purpose and specificity in each word that results in richer parts, and an even greater whole.</p>
<p>In 1960/2001, a French/British group of largely men met in Normandy/Battersea to discuss the implications of literary constraints, and the potential for <em>new</em> literary structures to create meaning. The Oulipo movement/So Solid Crew pioneered constrained works such as <em>Exercices de Style/21 Seconds</em> where 99/10 versions of the same scene are recounted each in a different style/by a different MC.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://sav.phd/posts/so_solid/1.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://sav.phd/posts/so_solid/2.png" class="img-fluid"></p>
</div>
</div>
</div>
<p>The Oulipo movement has always maintained strong ties to mathematics. Simple rules such as replacing or omitting letters can be extended to <a href="http://markwolff.name/wp/research/mathewss-algorithm/">entire algorithms</a>. Similarly, <em>So Solid Crew</em> themselves turned to maths, calculating the 21 allocated seconds for each MC by dividing their three and a half minute song by 10 MCs and rounding to the nearest integer. History doesn’t repeat itself, but it often rhymes.</p>
<p>A popular critique of 21 Seconds is that <em><a href="https://www.theguardian.com/music/2002/oct/05/artsfeatures.popandrock">“none of the crew use their time to say anything remotely insightful”</a>.</em> Quite obviously, the purpose of So Solid Crew’s lyrics are not to provide insight to the listener. Otherwise they would have featured someone like Martin Lewis. But alas they did not. They gave themselves 21 seconds each, and they simply spent their time discussing this decision.</p>
<div class="cleanbox">
<p>I got 21 seconds to pass the mic</p>
<p>I got 21 seconds to say what I gotta say</p>
<p>You won’t like me anyway</p>
<p>But I won’t hesitate</p>
</div>
<p>This introspective discussion is what separates So Solid Crew from other proponents of potential literature and Oulipo. The Crew spend almost their entire time discussing the very structure that they themselves have imposed. In doing so, they have meticulously weaved an ouroboros of structure and meaning, both existing in unison, neither without the other.</p>
<div class="center">
<p><img src="https://sav.phd/posts/so_solid/3.png" class="img-fluid" style="width:30.0%"></p>
</div>
<p>In the style of Claude Lévi-Strauss, given this self-referential meta-structure that the <em>Crew</em> have imposed on themselves, we should in theory be able to invert the formula. In direct contrast there should exist music blissfully un-self-aware, unconstrained but meaningless.</p>
<p>Jacob Collier (b. 1994) is a virtuoso. He was born with the ability to play seemingly any instrument. As a result, he is entirely unconstrained in what he can sonically produce. He can command audiences to sing complex harmonics with just his hands and converse with Jazz artists through the medium of diminished chords, resolving just before the next unskippable ad kicks in.</p>
<p>And yet, I have never met anyone that actually enjoys his music. It is directionless. The lack of any semblance of constraint or difficulty is Collier’s blessing and ultimate curse. He is at least aware of this, claiming asylum under the band of artists with <a href="https://www.theguardian.com/music/2022/nov/26/jacob-collier-stormzy-djesse-interview">’</a> <em><a href="https://www.theguardian.com/music/2022/nov/26/jacob-collier-stormzy-djesse-interview">creative infinity syndrome</a></em><a href="https://www.theguardian.com/music/2022/nov/26/jacob-collier-stormzy-djesse-interview">’</a>. I’m sure at one point <em>So Solid Crew</em> were in the same category. But in the face of this, Megaman, Lisa et. al, were unwavering in their commitment that <em>less-is-more</em>. Not only did they implement this philosophy to great effect, but they told their audience exactly what they were doing. The wizard’s curtain of creativity was being thrown away all together. Short-form video like TikTok is a close candidate for a new cultural structure that will forever seem normal. Maybe Jacob Collier could do us all a favour and restrict the length of his songs to 21 seconds.</p>
<div class="center">
<p><img src="https://sav.phd/posts/so_solid/4.png" class="img-fluid" style="width:80.0%"></p>
</div>
<p>The Oulipo movement was partially founded to discover new literary structures, to progress the search towards <em>potential</em> literature. However, the majority of these structures have not flown the cultural nest. But to Raymond Queneau and others that doesn’t seem to matter, and neither does it seem to matter to Megaman or Lisa. It was, and still is, the very <em>act</em> of subverting the rules of engagement that reminds people of the meaning in the words we read and the music we hear. <em>So Solid Crew</em> made this point in a more direct way than most, and for that alone, they are here to stay. <em>Romeo Done.</em></p>



 ]]></description>
  <guid>https://sav.phd/posts/so_solid/</guid>
  <pubDate>Mon, 21 Oct 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Metaphysical Chemical Processes</title>
  <link>https://sav.phd/posts/metaphysical/</link>
  <description><![CDATA[ 





<p>The Chinese room thought experiment provides an argument for why computers will never be able to truly ‘think’.<sup>1</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;Josef Moural, “The Chinese Room Argument,” in John Searle, ed.&nbsp;Barry Smith (Cambridge: Cambridge University Press, 2003), 214-260.</p></div><div id="fn2"><p><sup>2</sup>&nbsp;Margaret A. Boden, The Philosophy of Artificial Intelligence (Oxford: Oxford University Press, Inc., 1990).</p></div><div id="fn3"><p><sup>3</sup>&nbsp;I also like the implication that if the Chinese room is correct, then either the human brain with it’s electrical and chemical signals is somewhat ‘special’ and has some additional latent features that invoke consciousness/intuition/thought, <em>or</em> consciousness/intuition is actually just a bit of an illusion and there’s nothing to distinguish us from a bloke idly following instructions without understanding what they mean. Both equally fun.</p></div></div><p>In effect it states that a machine can be <em>seen</em> to be providing intelligent dialogue or conversation in Chinese, but inside ‘the room’ there is simply someone with a rule book that is large enough to enumerate all the potential answers, and the rules to generate and combine them (in effect, the <em>structure</em> of Chinese). This person doesn’t truly know or think about what they are doing. Whether or not this is a realistic analogy is not something I am going to attempt to answer. To me, the Chinese room, with its counter and counter-counter-arguments<sup>2</sup> , is relatively convincing<sup>3</sup> .</p>
<p>But for the purposes of this post, I’m not convinced, I think it’s completely and utterly wrong and a bit daft.<sup>4</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn4"><p><sup>4</sup>&nbsp;Mind games.</p></div></div><p>Here’s a quote that I enjoy from the <a href="https://plato.stanford.edu/entries/chinese-room/">Stanford Encyclopaedia of Philosophy</a> with an interesting extension to the thought experiment.</p>
<div class="page-columns page-full"><blockquote class="blockquote">
<p>[…] He [Searle] suggests a variation on the brain simulator scenario: suppose that in the room the man has a huge set of valves and water pipes, in the same arrangement as the neurons in a native Chinese speaker’s brain. The program now tells the man which valves to open in response to input. Searle claims that it is obvious that there would be no understanding of Chinese. (Note however that the basis for this claim is no longer simply that Searle himself wouldn’t understand Chinese – it seems clear that now he is just facilitating the causal operation of the system and so we rely on our Leibnizian intuition that water-works don’t understand (see also Maudlin 1989<sup>5</sup> ).) Searle concludes that a simulation of brain activity is not the real thing.</p>
</blockquote><div class="no-row-height column-margin column-container"><div id="fn5"><p><sup>5</sup>&nbsp;Tim Maudlin, “Computation and Consciousness,” The Journal of Philosophy 86, no. 8 (1989): 407-432.</p></div></div></div>
<p>It’s a good point, water-works can’t think, can they? If a brain can think, and a brain can be modelled like a series of pipes, then why can’t a series of pipes think? If I were to replace a single pipe with an actual real neuron, the signal of which controlled a valve to the next pipe, then would my water-works<sup>6</sup> be able to think? If I just start replacing all the pipes in my works with equivalent neurons, <em>at what point does consciousness kick in?</em></p>
<div class="no-row-height column-margin column-container"><div id="fn6"><p><sup>6</sup>&nbsp;spoiler alert, or… chemical processes.</p></div><div id="fn7"><p><sup>7</sup>&nbsp;Eric Schwitzgebel, “If Materialism is True, the United States is Probably Conscious,” Philosophical Studies 172, no. 7 (October 2014): 1697-1721.</p></div><div id="fn8"><p><sup>8</sup>&nbsp;This is almost certainly true when you look at Joe Biden; the US still <em>works</em> even if the man in charge is barely with us.</p></div></div><p>There’s a nice paper that touches on that last point justifying the idea that large organisations, or <em>countries</em> such as the United States can (or rather are) conscious<sup>7</sup> .<sup>8</sup></p>
<p>With that in mind, I’ll get to the point. Can we design a chemical process to think?<sup>9</sup> The fact I’ll be dealing with simulated chemical processes adds a layer of complication because we’re back to asking whether computers can think. But lets assume I’m going to end up building it.<sup>10</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn9"><p><sup>9</sup>&nbsp;Normal people will and have used neural networks to attempt this task, choosing to (originally) directly model the interactions between neurons. I’m going to choose to model the water-works, because, funny.</p></div><div id="fn10"><p><sup>10</sup>&nbsp;I might spin this off into a deep-tech unicorn.</p></div></div><section id="the-plan" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="the-plan">The Plan</h3>
<p>How am I going to go about this task? I could cheat and try to model a <em>neural network</em> using a chemical process. After all, neural networks have been proven to be universal function approximators<sup>11</sup> . I think this is a bit of a boring and sort of cheating. Additionally, attempting to directly find a chemical process that can reason is more interesting than finding a neural network that can reason, because I could feasibly go and build the chemical process in the real world<sup>12</sup> . The system it would live in is the same as us (i.e.&nbsp;not within the confines of a computer). However, in the ‘lets try to get a neural network to think’-space inherently it still just exists on a computer and you’re back to square one<sup>13</sup> . You’d have to make the neural network into some physical representation (like a brain)<sup>14</sup> . There are a host of assumptions here, namely to do with physicality, scale and permanence, but we really must move on.</p>
<div class="no-row-height column-margin column-container"><div id="fn11"><p><sup>11</sup>&nbsp;Apparently to the detriment of machine learning as a field, something about making people focus on the wrong aspects of research.</p></div><div id="fn12"><p><sup>12</sup>&nbsp;I could also build the chemical process that approximates a neural network but as I say, boring.</p></div><div id="fn13"><p><sup>13</sup>&nbsp;Or at least a less interesting metaphysical representation.</p></div><div id="fn14"><p><sup>14</sup>&nbsp;This is somewhat similar to the <a href="https://www.aria.org.uk/nature-computes-better-seeds/">ARIA project</a><em><a href="https://www.aria.org.uk/nature-computes-better-seeds/">Nature Computes Better</a></em><a href="https://www.aria.org.uk/nature-computes-better-seeds/"></a></p></div></div><p>Quite obviously, the first reasonable step to building a chemical process that can think, is to build a chemical process simulator.</p>
<p>Existing process simulators are bloated, use outdated GUIs and are not built with machine learning / data-driven workflows in mind. So I built my own. It’s currently written in Python but it might not be one day<sup>15</sup> . I’ve called it <code>&lt;process&gt;</code>, which you <strong>have</strong> to write as a code block.</p>
<div class="no-row-height column-margin column-container"><div id="fn15"><p><sup>15</sup>&nbsp;LLM-based code-translation will solve this for me.</p></div><div id="fn16"><p><sup>16</sup>&nbsp;I can’t stress how much better and more useful this is over SFILES workflows which are outdated and stuck in an era where NLP worked on sentences and LLMs that could parse millions of tokens at a time didn’t exist. How are you seriously meant to learn a representation of something as intricate as a chemical process with an abstraction like <code>(raw)(hex)(r)[&lt;(pp)&lt;(raw)](mix)&lt;...</code>. Unless you train an LLM from scratch on SFILES (spoiler: you can’t because there is no where near enough data) they’re completely useless to use as a representation, because SFILEs are 1. not in LLM datasets (cannot truly use with pretrained LLMs) and 2. pretrained LLMs will struggle to one-shot learn what SFILES is because they’re not easily understandable, parseable or readable. LLMs are a learned representation of language, if you’re going to try and use them for chemical processes, or want a useable process representation then express them using language. SFILES rant over.</p></div><div id="fn17"><p><sup>17</sup>&nbsp;Insert OntoCAPE rant.</p></div><div id="fn18"><p><sup>18</sup>&nbsp;Apart from the silly long previous rant.</p></div><div id="fn19"><p><sup>19</sup>&nbsp;I only use TOML over YAML because it’s called <em>Tom’s Own Markup Language</em> and that is my name. These are the arbitrary decisions I have and will continue to make throughout this post.</p></div></div><p>In <code>&lt;process&gt;</code>, processes are fully represented within a TOML file. The files are detailed enough to provide a complete representation of a process<sup>16</sup> . The representation is also not too detailed where there would be extraneous effort to define it, reducing bloat<sup>17</sup> . If you’re far enough into process design that you want to model a process in significant detail then ‘rigorous’ tools such as Aspen or gProms are what you want anyway. <code>&lt;process&gt;</code> is not for rigorous design, it sits somewhere between SFILES<sup>18</sup> , and Aspen in terms of complexity. It’s main advantage over SFILES is that chemical processes can be simulated <strong>directly</strong> from an interpretable text-based .<code>toml</code> file<sup>19</sup> .</p>
<p><code>&lt;process&gt;</code> is effectively a compiler for chemical processes, compiling a readable text-based format into an object that can be simulated and analysed.</p>
<p>Here’s an example of the basic components of a <code>process.toml</code> file.</p>
<pre><code>[[species]]
name = "water"
molecular_weight = 18.01528 # kg/kmol
cp_poly_coeffs = [276370.0, -2090.1, 8.125, -0.014116, 9.3701e-6]
enthalpy_of_formation = -285830.0 # kJ/kmol

...

[[species]]
name = "nitro_benzene"
molecular_weight = 123.109
cp_poly_coeffs = [295300.0,-80.7,1.705]
enthalpy_of_formation = 12500.0

[[streams]]
name = "benzene_inlet"
molar_flowrate = 0.5 # kmol
molar_ratios = {benzene = 1}
temperature = 298 # K 
pressure = 101325 # Pa

...

[[streams]]
name = "benzene_recycle"
molar_flowrate = 0
molar_ratios = {benzene = 1}
temperature = 298
pressure = 101325

[[separator]]
name = "separator_one"
inlet = ["final_product"]
outlet = ["tops", "waste_water"]
spec = [{nitro_benzene= 0.95},{water= 0.95}]

...

[[mixer]]
name = "reactant_mixer"
inlet = ["benzene_inlet", "nitric_acid_inlet","recycle","benzene_recycle"]
outlet = ["reactor_reactants"]

[[reactor]]
name = "reactor_one"
inlet = ["reactor_reactants"]
outlet = ["reactor_products"]
reactant_stoichiometry = {benzene=1, nitric_acid=1}
product_stoichiometry = {water = 1, nitro_benzene =1}
conversion = {benzene=0.9}

[[splitter]]
name = "splitter_one"
inlet = ["reactor_products_cooled"]
outlet = ["final_product", "recycle"]
split_ratio = [0.8, 0.2]

[[heat_exchanger]]
name = "product_cooler"
inlet = ["reactor_products"]
outlet = ["reactor_products_cooled"]
outlet_temperature = 298</code></pre>
<p>By design, it’s relatively self-explanatory. You define molecular species, all the streams, their connections, etc. Unit operations each have specific attributes which must be defined such as the split ratio of a splitter.</p>
<p>You don’t have to specify everything<sup>20</sup> , <code>&lt;process&gt;</code> will attempt to simulate unit operations with specified inlet streams until the entire process converges.</p>
<div class="no-row-height column-margin column-container"><div id="fn20"><p><sup>20</sup>&nbsp;If you could then this would be a pointless tool.</p></div></div><p>Degrees-of-freedom are currently quite uncompromising. There is no way to fix a stream, and every variable can be changed. There is no need for a specific ‘recycle’ block or stream due to the way a process is converged. At the expense of bloat, you have to pay slightly more attention to what is being defined, which is not the worst trade off.</p>
<p>Anyway, I might write this up a bit longer at some point depending if I flesh it out a bit. For now, onwards… I can visualise a process as follows:</p>
<pre><code>process_file = "nitrobenzene_process.toml"
process = parse_process(process_file)
process.plot("outputs/process.png")</code></pre>
<div class="center">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sav.phd/posts/metaphysical/1.png" class="img-fluid figure-img" style="width:60.0%"></p>
<figcaption>A visualised process.</figcaption>
</figure>
</div>
</div>
<p>And simulate it as so:</p>
<pre><code>process.simulate(tol=1e-7)
process.plot_convergence("outputs/convergence.png")


Stream Tolerance -&gt; 2.20e+00 -&gt; 5.29e-01 -&gt; 1.12e-01 -&gt;...-&gt; 9.47e-07 -&gt; 3.83e-07 -&gt; 1.54e-07
Converged in 30 iterations.</code></pre>
<div class="center">
<p><img src="https://sav.phd/posts/metaphysical/2.png" class="img-fluid" style="width:60.0%"></p>
</div>
<p>The overall mass and energy balance can be validated<sup>21</sup> , and I can also print off the steady-state of the converged process.</p>
<div class="no-row-height column-margin column-container"><div id="fn21"><p><sup>21</sup>&nbsp;This is done by analysing streams to see if they come from, or go to a unit operation. If not, they are designated process inlet or outlets and quantities summed.</p></div></div><pre><code>print(process, '\n')
print(process.confirm_energy_balance(), '\n')
print(process.confirm_mass_balance())


Process(name='nitrobenzene_process', unit_operations={'reactant_mixer': Mixer(name='reactant_mixer', inlet=[(0.50 kmol/hr, 298.00 K, 101325.00 Pa) {'benzene': '1.00'}, (0.50 kmol/hr, 312.00 K, 101325.00 Pa) {'nitric_acid': '1.00'}, (0.26 kmol/hr, 298.00 K, 101325.00 Pa) {'benzene': '0.04', 'nitric_acid': '0.03', 'water': '0.47', 'nitro_benzene': '0.46'}, (0.04 kmol/hr, 298.00 K, 101325.00 Pa) {'nitric_acid': '0.17', 'water': '0.28', 'nitro_benzene': '0.10', 'benzene': '0.45'}], outlet=[(1.31 kmol/hr, 300.92 K, 101325.00 Pa) {'benzene': '0.41', 'nitric_acid': '0.39', 'water': '0.10', 'nitro_benzene': '0.10'}], process=...), 'splitter_one': Splitter(name='splitter_one', inlet=[(1.31 kmol/hr, 298.00 K, 101325.00 Pa) {'benzene': '0.04', 'nitric_acid': '0.03', 'water': '0.47', 'nitro_benzene': '0.46'}], outlet=[(1.04 kmol/hr, 298.00 K, 101325.00 Pa) {'benzene': '0.04', 'nitric_acid': '0.03', 'water': '0.47', 'nitro_benzene': '0.46'}, (0.26 kmol/hr, 298.00 K, 101325.00 Pa) {'benzene': '0.04', 'nitric_acid': '0.03', 'water': '0.47', 'nitro_benzene': '0.46'}], process=..., split_ratio=[0.8, 0.2]), 'reactor_one': Reactor(name='reactor_one', inlet=[(1.31 kmol/hr, 300.92 K, 101325.00 Pa) {'benzene': '0.41', 'nitric_acid': '0.39', 'water': '0.10', 'nitro_benzene': '0.10'}], outlet=[(1.31 kmol/hr, 367.04 K, 101325.00 Pa) {'benzene': '0.04', 'nitric_acid': '0.03', 'water': '0.47', 'nitro_benzene': '0.46'}], process=..., reactant_stoichiometry={'benzene': 1, 'nitric_acid': 1}, product_stoichiometry={'water': 1, 'nitro_benzene': 1}, conversion={'benzene': 0.9}, heat_of_reaction=153180.0), 'product_cooler': HeatExchanger(name='product_cooler', inlet=[(1.31 kmol/hr, 367.04 K, 101325.00 Pa) {'benzene': '0.04', 'nitric_acid': '0.03', 'water': '0.47', 'nitro_benzene': '0.46'}], outlet=[(1.31 kmol/hr, 298.00 K, 101325.00 Pa) {'benzene': '0.04', 'nitric_acid': '0.03', 'water': '0.47', 'nitro_benzene': '0.46'}], process=..., outlet_temperature=298, delta_temperature=None), 'separator_one': Separator(name='separator_one', inlet=[(1.04 kmol/hr, 298.00 K, 101325.00 Pa) {'benzene': '0.04', 'nitric_acid': '0.03', 'water': '0.47', 'nitro_benzene': '0.46'}], outlet=[(0.52 kmol/hr, 298.00 K, 101325.00 Pa) {'benzene': '0.04', 'nitric_acid': '0.03', 'nitro_benzene': '0.88', 'water': '0.05'}, (0.53 kmol/hr, 298.00 K, 101325.00 Pa) {'benzene': '0.04', 'nitric_acid': '0.03', 'nitro_benzene': '0.05', 'water': '0.89'}], process=..., spec=[{'nitro_benzene': 0.95}, {'water': 0.95}]), 'separator_two': Separator(name='separator_two', inlet=[(0.52 kmol/hr, 298.00 K, 101325.00 Pa) {'benzene': '0.04', 'nitric_acid': '0.03', 'nitro_benzene': '0.88', 'water': '0.05'}], outlet=[(0.47 kmol/hr, 298.00 K, 101325.00 Pa) {'nitric_acid': '0.02', 'water': '0.03', 'nitro_benzene': '0.96', 'benzene': '0.00'}, (0.04 kmol/hr, 298.00 K, 101325.00 Pa) {'nitric_acid': '0.17', 'water': '0.28', 'nitro_benzene': '0.10', 'benzene': '0.45'}], process=..., spec=[{'nitro_benzene': 0.99}, {'benzene': 0.95}])}, streams={'benzene_inlet': (0.50 kmol/hr, 298.00 K, 101325.00 Pa) {'benzene': '1.00'}, 'nitric_acid_inlet': (0.50 kmol/hr, 312.00 K, 101325.00 Pa) {'nitric_acid': '1.00'}, 'reactor_products': (1.31 kmol/hr, 367.04 K, 101325.00 Pa) {'benzene': '0.04', 'nitric_acid': '0.03', 'water': '0.47', 'nitro_benzene': '0.46'}, 'reactor_products_cooled': (1.31 kmol/hr, 298.00 K, 101325.00 Pa) {'benzene': '0.04', 'nitric_acid': '0.03', 'water': '0.47', 'nitro_benzene': '0.46'}, 'reactor_reactants': (1.31 kmol/hr, 300.92 K, 101325.00 Pa) {'benzene': '0.41', 'nitric_acid': '0.39', 'water': '0.10', 'nitro_benzene': '0.10'}, 'final_product': (1.04 kmol/hr, 298.00 K, 101325.00 Pa) {'benzene': '0.04', 'nitric_acid': '0.03', 'water': '0.47', 'nitro_benzene': '0.46'}, 'tops': (0.52 kmol/hr, 298.00 K, 101325.00 Pa) {'benzene': '0.04', 'nitric_acid': '0.03', 'nitro_benzene': '0.88', 'water': '0.05'}, 'waste_water': (0.53 kmol/hr, 298.00 K, 101325.00 Pa) {'benzene': '0.04', 'nitric_acid': '0.03', 'nitro_benzene': '0.05', 'water': '0.89'}, 'pure_product': (0.47 kmol/hr, 298.00 K, 101325.00 Pa) {'nitric_acid': '0.02', 'water': '0.03', 'nitro_benzene': '0.96', 'benzene': '0.00'}, 'benzene_recycle': (0.04 kmol/hr, 298.00 K, 101325.00 Pa) {'nitric_acid': '0.17', 'water': '0.28', 'nitro_benzene': '0.10', 'benzene': '0.45'}, 'recycle': (0.26 kmol/hr, 298.00 K, 101325.00 Pa) {'benzene': '0.04', 'nitric_acid': '0.03', 'water': '0.47', 'nitro_benzene': '0.46'}}, species={'water': water (18.01528 kg/kmol), 'benzene': benzene (78.11 kg/kmol), 'nitric_acid': nitric_acid (63.013 kg/kmol), 'nitro_benzene': nitro_benzene (123.109 kg/kmol)}, print=True, simulated_at=datetime.datetime(2024, 8, 18, 15, 26, 8, 154480, tzinfo=datetime.timezone.utc)) 

Enthalpy in: 37412.944 kJ,  Reaction Enthalpy: 73175.159 kJ, Enthalpy Added: -38052.065 kJ, Enthalpy out: 72536.082 kJ
Difference: -0.043281 kJ (-0.000116%)
False 

Mass in: 70.561 kg, Mass out: 70.562 kg
Difference: -0.000613 kg (-0.000869%)
True</code></pre>
<p>I can simulate heat exchangers, splitting streams, mixing streams, basic separations, non-adiabatic reactions with stoichiometric ratios, components with specific heat capacities as a function of temperature… this should be enough for now.</p>
</section>
<section id="what-was-that-about-anyway" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="what-was-that-about-anyway">What was that about? Anyway…</h3>
<p>The goal here is to build an input-output machine, that on the surface acts like the ‘room’ in the Chinese room, and more precisely, the waterworks within the room as proposed by Searle in his brain simulator scenario. To make this easier, when I say ‘think’, I mean I’m going to approximate a function, because as I previously mention, I don’t believe in the Chinese room argument.</p>
<p>I will go about doing this through <strong>direct simulation</strong>, where the chemical process is directly used to model a function via something analogous to symbolic regression or evolutionary programming^[Alternative methods would be to either:</p>
<p>1. Build up the basic building blocks of computation, i.e.&nbsp;AND, OR, gates etc… Then by extension demonstrate how a computer can be constructed, and therefore a universal function approximator (2 layers of abstraction below thinking). Or…</p>
<p>2. Build up the basic building blocks of a neural network, which, as a universal function approximator, completes the ability to approximate functions (1 layer of abstraction below thinking).</p>
<p>But as previously mentioned, I want the chemical process to be as close as possible to the function approximation task at hand.] .</p>
<p>Therefore, the mathematical problem I will solve will be a least-squares (machine learning) task over chemical processes:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmin_%7B%5Cmathcal%7BP%7D%7D%20%5Csum_%7Bi=1%7D%5EN%20%7C%7C%5Cmathcal%7BP%7D(x_i)%20-%20y_i%7C%7C%5E2_2"></p>
<p>where a chemical process 𝒫 is defined by a set of unit operations 𝒪, connecting streams 𝒮, yappa yappa blah blah blah… Basically, you choose what the input x represents in your process, and what the output y represents. Simulate the chemical process for a given x and evaluate the output. Do this for all values of x in the dataset and you can evaluate how well the process approximates the function.</p>
<p>That being said, I am going to solve this optimisation problem using evolutionary programming, a benefit of using <code>&lt;process&gt;</code>. Firstly, I’ll demonstrate a way of evaluating the objective function.</p>
<p>To begin with I will define a very basic process with a single component as an inlet stream, a single component as an outlet stream, and a mixer that doesn’t do anything.</p>
<pre><code>[[species]]
name = "water"
molecular_weight = 18.01528 # kg/kmol
cp_poly_coeffs = [276370.0, -2090.1, 8.125, -0.014116, 9.3701e-6]
enthalpy_of_formation = -285830.0 # kJ/kmol

[[streams]]
name = "inlet"
molar_flowrate = 0.5 # kmol
molar_ratios = {water = 1}
temperature = 298 # K 
pressure = 101325 # Pa

[[streams]]
name = "outlet"

[[mixer]]
name = "mixer"
inlet = ["inlet"]
outlet = ["outlet"]</code></pre>
<div class="center">
<p><img src="https://sav.phd/posts/metaphysical/3.png" class="img-fluid" style="width:60.0%"></p>
</div>
<p>For now, assuming temperature of both the inlet stream and outlet stream represent my functional input and output respectively, I can simulate the process and evaluate the objective function as follows:</p>
<pre><code>y_test = []
for i in range(n):
    process.streams['inlet'].temperature = x[i]
    process.simulate(tol=1e-7)
    y_test.append(process.streams['outlet'].temperature)</code></pre>
<div class="center">
<p><img src="https://sav.phd/posts/metaphysical/4.png" class="img-fluid" style="width:60.0%"></p>
</div>
<p>Can you see where we’re going yet? I can take advantage of multiprocessing to evaluate the objective function in parallel. This is a strength of <code>&lt;process&gt;</code>, and is a good demonstration of designing something like a process simulator with machine learning use cases in mind.</p>
<p>I’ll assume that physical units can be scaled later on. Now I can hypothesise that there is a heat exchanger between the streams, with a given temperature decrease to get a different ‘loss’ between our data and the process output.</p>
<pre><code>[[heat_exchanger]]
name = "product_cooler"
inlet = ["inlet"]
outlet = ["outlet"]
delta_temperature = -3 # K</code></pre>
<div class="center">
<p><img src="https://sav.phd/posts/metaphysical/5.png" class="img-fluid" style="width:60.0%"></p>
</div>
<p>I’ll stop here, we get the idea. We can change the type of unit operation, their internal parameters, and their order to try and approximate a function. Now we have the ability to:</p>
<ol type="1">
<li><p>Evaluate how well our process can approximate a function;</p></li>
<li><p>Mutate the process<sup>22</sup> .</p></li>
</ol>
<div class="no-row-height column-margin column-container"><div id="fn22"><p><sup>22</sup>&nbsp;Once again, by building a lightweight process simulator we have gained the ability to easily modify the process structure enabling us to solve an optimisation problem over different structures, something that takes PhD lengths of time to do in Aspen or gProms.</p></div><div id="fn23"><p><sup>23</sup>&nbsp;Presented in an unnecessarily complex amount of detail, remember?</p></div></div><p>We can build a basic evolutionary programming framework to solve the optimisation problem above<sup>23</sup> , acting like a sort of growing neural network, with feedback.</p>
<p>But that will have to wait…. for next time!</p>


</section>


 ]]></description>
  <guid>https://sav.phd/posts/metaphysical/</guid>
  <pubDate>Wed, 16 Oct 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>On Ratatouille</title>
  <link>https://sav.phd/posts/ratatouille/</link>
  <description><![CDATA[ 





<p>Remy the rat is a culinary genius because he watches a cooking show on TV, reads a best-selling recipe book, and sometimes eats two things at the same time. He consistently takes life advice by talking<sup>1</sup> to a hallucinated dead chef, and generally ignores the majority of social constructs across both rat and human domains. No one did it quite like him.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;He speaks english, which humans hear in a higher pitch. As the only difference in Ratatouille between humans and rats is size and frequency (hz) of communication, I will consider them one-and-the-same for the remainder of this article.</p></div></div><p>Ratatouille is a film about legacy, the importance of institutions, and the need for occasional reinvention. Given that rats live for approximately 2-3 years, it is therefore unfortunate that Remy will not have lived long enough to reap the financial rewards from his eloquently named bistro, <em>La Ratatouille</em>, most likely dying mere months after opening.</p>
<div class="center">
<p><img src="https://sav.phd/posts/ratatouille/rat.jpeg" class="img-fluid" style="width:70.0%"></p>
</div>
<p>Though the zombie-chef-vassal Linguine basically gives up cooking all together to glide around on roller skates, we can only hope that <em>La Ratatouille</em> has a strong enough institutional memory such that he is not made immediately jobless in the event of Little Chef’s death. Perhaps a smaller, food-loving creature, like a bug, could sit on top of the head of one of Remy’s offspring and be guided by hallucinations of ghost Remy. In turn, the Parisian food scene would become progressively smaller and smaller, and culinary trends would occur at increasingly shorter intervals as the life span of each puppet-master diminishes in magnitude. Mayfly-atouille would probably fit within a Tiktok.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://sav.phd/posts/ratatouille/la.webp" class="img-fluid"></p>
</div></div><p>Of course, that would be ridiculous. Remy is one of a kind not only among other rats but among humans themselves. It is clear that by the end of the film, all other rats in the colony carry some semblance of the spirit of Chef Gusteau with them. They do not steal, they maintain cleanliness, and though Remy has preached the culinary gospel to the masses and has entered the kingdom of Gust…</p>
<p><br> Wait? …. Is Remy the rat Jesus? <br></p>
<p>Throughout the film, Remy seems to be the only one to be able to engage with the ghost of Chef Gusteau, though he is reminded in a scene where they are both simultaneously surprised, that the God-Chef is a figment of his own imagination. This insight tells us that Gusteau is most likely similar to a Christian god, existing in unison with the hearts and souls of rats, and not external to them.</p>
<p>The message that <em>anyone can cook</em> is further emphasised by Gusteau by his use of this projected internal voice. While Remy at this stage asserts himself as a messenger of Gusteau, the gospel is waiting to be preached. By spreading the culinary good-news to the colony, presumably each rat holds with them the spirit of Gusteau, while still clearly maintaining Remy in high-regard. With that, the holy trinity of Gusteau, Remy, and cooking spirit becomes whole.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://sav.phd/posts/ratatouille/skinner.webp" class="img-fluid"></p>
</div></div><p>We also observe that there were false prophets in this story, most notably Chef Skinner. Skinner claims to uphold Gusteau’s values but it is revealed that he does not care for good food, and exploits his position for financial gain at the expense of the reputation of Gusteau. For a short time, even zombie-chef Linguine’s actually talented and hardworking human muse Collette strays from the flock, unsure of the message that Remy preaches. But even she recognises the true message of Gusteau in opposition to the false prophet Skinner.</p>
<p>While Pixar have been nuanced in their portrayal of rat-Jesus, there are two aspects I would like to speculate on where I believe the film did not go far enough, or that may become candidates for a strong sequel.</p>
<p>The first addresses the issue of Remy’s mortality. For Remy’s message to truly transcend the short lifespan of a rat and for him to gain immortal status as the one true culinary prophet, Remy had to die. Ideally, he would have remained in the rat-trap from which he inextricably escapes after his dad and brother push a gargoyle off of a church and onto the car boot, crushing the boot just enough to release him. This would have been a commoners death for Remy, unrelenting and sacrificial. In doing so, the rest of the colony would have been empowered to follow in his example, potentially leading to the financial success of <em>La Ratatouille</em> beyond opening night and the proceeding few months.</p>
<p>By instead witnessing the initial success of <em>La Ratatouille</em>, Remy more strongly implies that he himself is the <em>anyone</em> that Gusteau refers to. The remaining rats would most likely be less emboldended to consider running a restaurant for humans. In not sacrificing himself in the name of Gusteau’s message, Remy bears more resembelence to Jacob Frank, who claimed to be the reincarnation of the self-proclaimed messiah Sabbatai Zevi, and lived long enough to ensure that everyone around him got bored of the shtick, and his movement fizzled out<sup>2</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;This is genuinely the message I got from Olga Tokarczuk’s brilliant The Books of Jacob, which I read not in preparation for this article</p></div><div id="fn3"><p><sup>3</sup>&nbsp;Of course, this sequel may take place in a Nietzschean future where Gusteau, as God, is himself dead. Potentially leading to postmodern rat cuisine, a return to eating ‘trash’ (rubbish), or potentially worse.</p></div><div id="fn4"><p><sup>4</sup>&nbsp;Catatouille</p></div><div id="fn5"><p><sup>5</sup>&nbsp;Dogatouille</p></div></div><p>The second avenue, given we know there is at least one messenger of Gusteau, is that there may be more. These may be copycats/rats that appear based on the presumed commercial success of <em>La Ratatouille</em>, or they may be genuine prophets of Gusteau. There is no reason that dead Gusteau should suddenly stop appearing in the imaginations of animals<sup>3</sup>, and similarly just because Remy is the main character we cannot disregard other animals that may have watched Chef Gusteau on TV, for example cats<sup>4</sup>and dogs<sup>5</sup>.</p>
<p>Disregarding the thousands of potential heirs to the <em>La Ratatouille</em> empire specifically, these competing factions of culinarily inspired animals would inevitably vie for legitimacy in an increasingly crowded market. I imagine Remy’s dunce brother Emile would be the first to claim the bloodline potentially leading to a series of culinary-rat-pontiffs that become increasingly disliked. Lollard rats from the countryside may scoff when they hear news of a new Parisian loft bistro being opened, shrines to locations such as the farmhouse Remy originally lived in will be built, and academics will convene to discuss the implications of the trinity and the true nature of Gusteau.</p>
<p>It is clear that the prophecy of Remy, and resulting idyllic moment in time, will be short lived. <em>La Ratatouille</em> is built on much more worrisome foundations than it may seem. In preaching the good-news of Gusteau, but maintaining his own personal vice-like grip on animal-bistros without a clear succession plan for either his ideology or business, Remy will soon learn that <em>anyone can cook</em>.</p>
<div class="cleanbox">
<p>I have chosen not to touch upon the fact that Remy can control Linguine by pulling on his hair because that is completely unbelievable.</p>
</div>




 ]]></description>
  <category>Film</category>
  <category>Religion</category>
  <guid>https://sav.phd/posts/ratatouille/</guid>
  <pubDate>Sat, 12 Oct 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Tiny Bayesian Optimisation</title>
  <link>https://sav.phd/posts/bayesian_optimisation/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sav.phd/posts/bayesian_optimisation/bo.gif" class="img-fluid figure-img"></p>
<figcaption>This GIF was made with only 100 lines of vanilla Python + Numpy + Matplotlib.</figcaption>
</figure>
</div>
<p>There is a Bayesian optimisation gold-rush, and everyone is selling shovels. Bayesian optimisation is core to the concept of self-driving labs, automated drug-discovery, and many other modern research topics. It’s well motivated, and a very useful tool. Start ups are being founded and <a href="https://www.merckgroup.com/en/news/opensource-ai-experimentation-planner-06-12-2023.html">pharmaceutical</a> and <a href="https://github.com/experimental-design/bofire">chemicals</a> companies are curating teams that focus fundamentally on Bayesian optimisation in one way or another. As a result, there is now a growing number of libraries, ranging from black-box APIs and no-code solutions to statistically accurate fine-grained representations; each becoming more bloated as new functionalities or usecases are appended.</p>
<p>With all of these options, each with their own special definition of a <code>dataset</code>, or a <code>kernel</code>, or an <code>acquisition_function</code>, or otherwise, it becomes difficult to see the wood for the trees. Someone in my group recently asked me if it was reasonably possible to implement Bayesian optimisation, and I more often than not get asked what library or package I use.</p>
<p>It is obviously important that BO tools become widely available, particularly to those that don’t know how to code, or don’t have the time such as chemists or industrial engineers. But the trade-off is that students, and practitioners are potentially using something that they don’t understand, and investors may be hoodwinked into investing in something that seems more complex than it is.</p>
<p>My mission in this post is to demonstrate that, whilst Bayesian optimisation entails a lot of moving parts, <em>implementing</em> it from scratch really shouldn’t take too long.</p>
<p>To make my point, I am going to code everything required for Bayesian optimisation, <em>including visualisation</em>… in under 100 lines of standard Python and Numpy. This will include a custom metaheuristic-based optimisation algorithm, Gaussian processes from scratch with trainable hyperparameters, an acquisition function, and an experimental design loop.</p>
<p>First, I’ll give myself some groundrules:</p>
<section id="rules" class="level3 cleanbox">
<h3 class="anchored" data-anchor-id="rules">Rules</h3>
<p><br> <br></p>
<ol start="0" type="1">
<li>Bayesian Optimisation that is competetive with established packages;</li>
<li>Python Standard Library + Numpy only;</li>
<li>Simple as possible;</li>
<li>Code <strong>must</strong> be interpretable.</li>
</ol>
</section>
<p>To begin with I’ll implement a Gaussian process from scratch.</p>
<section id="gaussian-processes" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="gaussian-processes">Gaussian processes</h3>
<p>Now I’ll need a kernel function that defines how related two points are in input space. I’ll go for the Matern 5/2. I’m not choosing it because it’s differentiable<sup>1</sup>, but rather because I think samples from the prior will look most like functions I’m interested in.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;This is an attractive property of Gaussian processes that is ultimately distracting when optimising as a result of their nonconvexity, as I’ll cover later.</p></div></div><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> k(x1,x2,p): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&nbsp;matern 5/2 kernel</span></span>
<span id="cb1-2">    sigma,l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],p[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&nbsp;hyperparameters</span></span>
<span id="cb1-3">    d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt(np.dot(x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x2,x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x2))</span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>l<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>l)</span></code></pre></div>
<p>Simple enough. Forget the hyperparameters now, I’ll cover those later. Now, I’ll give myself the ability to calculate a covariance matrix. I only need to calculate the kernel function for the upper triangular, then symmetrically set the corresponding lower triangular value to be the same<sup>2</sup>, saving me some time.</p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;Because all valid covariance matrices are positive semi-definite.</p></div></div><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> cm(x,p): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># covariance matrix</span></span>
<span id="cb2-2">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((n,n))</span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb2-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i,n): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&nbsp;symmetric</span></span>
<span id="cb2-5">            K[i,j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> K[j,i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k(x[i],x[j],p)</span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.ones(n)</span></code></pre></div>
<p>I’ve added some jitter to the diagonal just to help out when inverting the matrix in a bit. This is relatively common across all Gaussian process libraries. The final GP utility I’ll require is the negative log-likelihood, which will be used to assess hyperparameter performance.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> nll(p, x, y): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># negative log likelihood</span></span>
<span id="cb3-2">    K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cm(x, p) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate covariance matrix</span></span>
<span id="cb3-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (np.log(la.det(K)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]).T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> la.solve(K, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.pi))</span></code></pre></div>
<p>Now everything needed has been defined, I’ll create my Gaussian process class. I will simplify the training procedure by making it train on instanciation. The only other thing that is needed is the ability to call it, returning the mean and variance of the posterior distribution at x.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> GP: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&nbsp;Gaussian process class</span></span>
<span id="cb4-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,x,y):</span>
<span id="cb4-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y</span>
<span id="cb4-4">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optimize hyperparameters (sigma, l, constant mean)</span></span>
<span id="cb4-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tiny_opt(partial(nll, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y), np.array([[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>],[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>],[np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(y),np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(y)]]))</span>
<span id="cb4-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.K_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> la.inv(cm(x,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.p)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&nbsp;precompute inverse covariance matrix</span></span>
<span id="cb4-7"></span>
<span id="cb4-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,x): </span>
<span id="cb4-9">        k_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[k(x,xi,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.p) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x]]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&nbsp;compute row of covariance matrix</span></span>
<span id="cb4-10">        dot_prod <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.dot(k_row,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.K_inv) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&nbsp;precompute dot product</span></span>
<span id="cb4-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.p[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dot_prod.dot(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.p[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]).item(), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-12">            k(x,x,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.p) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.dot(dot_prod,k_row.T).item()</span></code></pre></div>
<p>It is defined by data x and y (both row-wise Numpy arrays). I have a mysterious function called <code>tiny_opt</code> which for now provides us with optimal hyperparameters with respect to the negative log-likelihood. This ‘training’ step, and the precompution of the inverse of the covariance matrix<sup>3</sup> defines a ‘trained’ Gaussian process. I’ve never really liked that terminology, borrowed from neural network training<sup>4</sup>. One of these parameters is a constant that defines my mean function. As a result of this, combined with the kernel lengthscale parameter, there is now no need to deal with data normalisation. <a href="https://sav.phd/posts/noisy_bo">I’ve previously covered noisy Bayesian optimisation</a>, but as I won’t be dealing with noisy observations here, my GP is noiseless.</p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;Resulting in the <em>precision matrix</em>.</p></div><div id="fn4"><p><sup>4</sup>&nbsp;Though when creating sparse Gaussian processes, the specification of hyperparameters does look more akin to training neural network parameters.</p></div></div><p>Next up, I’ll outline what is actually happening in my <code>tiny_opt</code> function. This will also eventually be used to optimise my acquisition function as well so it’s worth getting right.</p>
</section>
<section id="metaheuristic-optimisation" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="metaheuristic-optimisation">Metaheuristic Optimisation</h3>
<p>As I previously mentioned, I see the ability to easily calculate the gradient of a Gaussian process largely as a distraction. I am relatively confident that most people who have any significant experience optimising Gaussian processes will agree. In addition, BO can potentially be made unusually inefficient when using a gradient-based optimiser due to <strong>flat</strong> regions within an acqusition function, leading to functions such as <a href="https://arxiv.org/abs/2310.20708">logEI being proposed</a>.</p>
<p>Gaussian processes, or resulting functions that apply them<sup>5</sup> are generally nonconvex. Whilst local minima can be overcome, it’s clear that even in one dimension, there are often as many local optima as data points.</p>
<div class="no-row-height column-margin column-container"><div id="fn5"><p><sup>5</sup>&nbsp;Such as acquisition/utility functions (spoiler).</p></div></div><p>Gaussian processes are practically free to evaluate in the grand scheme of experimental design, and most practical problems are interval-constrained. Combined with the fact that they can of course be evaluted in parallel, motivates the use of evaluation hungry but effective metaheuristics.</p>
<p>I myself have found them very effective in optimising acqusition functions, and was pleased to see Google’s internal GP optimisation algorithm taking a similar view when they <a href="https://arxiv.org/abs/2408.11527v1">recently released details</a>.</p>
<p>My algorithm is self-documented but I will describe it below. I’ve found it to be simple and effective. I wouldn’t even describe it as a metaheuristic. Actually, I will.</p>
<p>Every time you refresh this page my algorithm will be named after a different completely arbitrary animal!</p>
<div class="cell">
<div class="sourceCode cell-code hidden" id="cb5" data-startfrom="127" data-source-offset="-0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 126;"><span id="cb5-127">animals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb5-128">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lion"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Elephant"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Giraffe"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zebra"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Penguin"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-129">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Kangaroo"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Koala"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Panda"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tiger"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dolphin"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-130">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Octopus"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Flamingo"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cheetah"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gorilla"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sloth"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-131">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Platypus"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rhinoceros"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Crocodile"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Owl"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chameleon"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-132">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Toucan"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Meerkat"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hedgehog"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jellyfish"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lemur"</span></span>
<span id="cb5-133">]</span>
<span id="cb5-134"></span>
<span id="cb5-135">descriptive_words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb5-136">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Swarming"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Leaping"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Crawling"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Swimming"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-137">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Flying"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pouncing"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Slithering"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Galloping"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Diving"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-138">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Soaring"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Burrowing"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Climbing"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gliding"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hopping"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-139">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sprinting"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Meandering"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prowling"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stalking"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charging"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-140">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Darting"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scurrying"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lumbering"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prancing"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scampering"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-141">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Waddling"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zigzagging"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fluttering"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Paddling"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Swooping"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-142">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lunging"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Grazing"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Perching"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hovering"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Circling"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-143">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nesting"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Foraging"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hunting"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bounding"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Swinging"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-144">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lounging"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Basking"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Roosting"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Migrating"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hibernating"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-145">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Camouflaging"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Molting"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Preening"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frolicking"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stampeding"</span></span>
<span id="cb5-146">]</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-1" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-2" data-nodetype="declaration">

</div>
</div>
</div>
</div>
<p>Introducing the…</p>
</section>
<section id="descriptive_wordsmath.floormath.random-descriptive_words.length-animalsmath.floormath.random-animals.length-algorithm" class="level1 page-columns page-full">
<h1><span><span id="ojs-element-id-1"></span></span> <span><span id="ojs-element-id-2"></span></span> Algorithm!</h1>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tiny_opt(f,b): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># small metaheuristic optimization</span></span>
<span id="cb6-2">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(b, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> b_og <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b.copy()</span>
<span id="cb6-3">    b_f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.inf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># track best solution, count stagnation, and shrink factor</span></span>
<span id="cb6-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb6-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(b)): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shrink search space around current centre by w</span></span>
<span id="cb6-6">            r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (b[i,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> b[i,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w</span>
<span id="cb6-7">            b[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [c[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, c[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb6-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate random solutions within search space</span></span>
<span id="cb6-9">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.clip(ra.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(b))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(b[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>b[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>b[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], b_og[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], b_og[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb6-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> Pool() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pool: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># evaluate solutions in parallel</span></span>
<span id="cb6-11">            y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pool.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(f, x)</span>
<span id="cb6-12">        sol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x[np.argmax(y)] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># best solution</span></span>
<span id="cb6-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> f(sol) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> b_f: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if improvement, update best solution</span></span>
<span id="cb6-14">            b_f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(sol)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shrink search space next time</span></span>
<span id="cb6-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if no improvement, don't shrink search space next time (set w = 1)</span></span>
<span id="cb6-16">            count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># increment stagnation counter</span></span>
<span id="cb6-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (b_og[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>b_og[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(b[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>b[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:</span>
<span id="cb6-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if search space has shrunk below a threshold or not shrunk for 3 iterations</span></span>
<span id="cb6-19">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> c <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return best solution!</span></span></code></pre></div>
<p>Simply, I sample solutions within the bounds and evaluate them in parallel. If I sample the best overall solution I store this, and shrink the bounds around this point. I then re-sample and repeat. If I don’t find a better solution I don’t shrink the bounds. If I don’t find a better solution for three iterations I terminate. I also terminate if the bounds shrink below a certain threshold. These two properties ensure that the algorithm terminates eventually<sup>6</sup>. It is effectively a global trust-region method.</p>
<div class="no-row-height column-margin column-container"><div id="fn6"><p><sup>6</sup>&nbsp;Empirically</p></div></div><p>Here’s a little visualisation that I’ve drawn.</p>
<p><img src="https://sav.phd/posts/bayesian_optimisation/explanation.jpg" class="img-fluid"></p>
<p>With the ability to optimise functions, all I need is an acquisition function, which is simple enough… and a loop!</p>
<p>This is just the expected improvement of a Gaussian process, implemented by importing <code>NormalDist</code> from the <code>statistics</code> standard library.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ei(gp,x): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expected improvement</span></span>
<span id="cb7-2">    mu, var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gp(x)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NormalDist()</span>
<span id="cb7-3">    z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(gp.y)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.sqrt(var)</span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.sqrt(var) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N.cdf(z) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> N.pdf(z))</span></code></pre></div>
<p>And here is my loop…</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">bounds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>]]) </span>
<span id="cb8-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb8-3">    gp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GP(x, y) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build GP</span></span>
<span id="cb8-4">    x_opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tiny_opt(partial(ei,gp),bounds)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> y_opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ei(gp,x_opt) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optimise aq</span></span>
<span id="cb8-5">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.vstack([x,x_opt]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update x</span></span>
<span id="cb8-6">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.vstack([y,np.array([f(x_opt[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])])]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># evaluate and update y</span></span></code></pre></div>
<p>… that’s it!</p>
<p>But to really prove that this works, I’m going to even choose an interesting test function to use, and implement the ability to visualise 1D functions<sup>7</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn7"><p><sup>7</sup>&nbsp;Note that all of the above works for any dimensional function.</p></div></div><section id="plotting" class="level3">
<h3 class="anchored" data-anchor-id="plotting">Plotting</h3>
<p>To plot my package to see it it is working, I’ll need a test function. One of my personal favourite ways of doing this is to sample one from a GP prior:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">x_gp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(bounds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],bounds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-2">K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cm(x_gp, [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>])</span>
<span id="cb9-3">y_gp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ra.multivariate_normal(np.zeros(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x_gp)), K).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-4">f_gp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GP(x_gp,y_gp)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: f_gp(x)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this now acts as my 'true' function</span></span></code></pre></div>
<p>An easy way of doing this is by drawing from a multivariate distribution with given covariance matrix and training a GP using this data. This provides a continuous, callable random function without dealing with things like pseudorandom number generation.</p>
<p>I’ve written before about plotting practices (<a href="https://sav.phd/posts/plots/">here</a> and <a href="https://sav.phd/posts/trajectory_plots/">here</a>), so I won’t go into too much detail. Here is the code that evaluates the GP and acqusition function and plots them both.</p>
<p>In addition, I save each plot and produce a GIF at the end.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(bounds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],bounds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initial training data</span></span>
<span id="cb10-2">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([f(xi) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x]).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initial training data</span></span>
<span id="cb10-3">    x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([xi <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> np.linspace(bounds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],bounds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)]).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test data</span></span>
<span id="cb10-4">    images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>):</span>
<span id="cb10-6">        gp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GP(x, y) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&nbsp;create GP</span></span>
<span id="cb10-7">        x_opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tiny_opt(partial(ei,gp),bounds)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> y_opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ei(gp,x_opt)</span>
<span id="cb10-8">        mu, var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([gp(xi) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x_test]).T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt(var)</span>
<span id="cb10-9"></span>
<span id="cb10-10">        fig,ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),sharex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,constrained_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-11">        ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$x$'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$f(x)$'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'EI(x)'</span>)</span>
<span id="cb10-12">        ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].scatter(x,y,c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>,marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb10-13">        ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(x_test, mu,c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(x_gp, y_gp,c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>,ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>,alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'True Function'</span>)</span>
<span id="cb10-14">        ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].fill_between(x_test.flatten(), mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>std, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>std, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>,lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>)</span>
<span id="cb10-15">        ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(x_test, [ei(gp,xi) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x_test],c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Expected Improvement'</span>)</span>
<span id="cb10-16">        ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].scatter(x_opt,y_opt,c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>,marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>)</span>
<span id="cb10-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ax: </span>
<span id="cb10-18">            a.spines[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top'</span>].set_visible(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> a.spines[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>].set_visible(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb10-19">            a.set_yticks([])</span>
<span id="cb10-20">            a.legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper center'</span>,bbox_to_anchor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>),frameon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,ncol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-21"></span>
<span id="cb10-22">        filename <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>_<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:03d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.png'</span></span>
<span id="cb10-23">        plt.savefig(filename,dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> plt.close()</span>
<span id="cb10-24">        images.append(Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filename))</span>
<span id="cb10-25"></span>
<span id="cb10-26">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.vstack([x,x_opt]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update x </span></span>
<span id="cb10-27">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.vstack([y,np.array([f(x_opt[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])])]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># evaluate and update y</span></span>
<span id="cb10-28">    </span>
<span id="cb10-29">    images[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].save(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bo.gif'</span>,save_all<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,append_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>images[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:],duration<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,loop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<p>The full code is here, approximately 20% of the lines are for plotting!</p>
<details>
<summary>
Click to view all code.
</summary>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy.linalg <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> la<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy.random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ra</span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> multiprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Pool<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> statistics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> NormalDist</span>
<span id="cb11-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> k(x1,x2,p): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&nbsp;squared exponential kernel</span></span>
<span id="cb11-6">    sigma,l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],p[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&nbsp;hyperparameters</span></span>
<span id="cb11-7">    d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt(np.dot(x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x2,x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x2))</span>
<span id="cb11-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>l<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>l)</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> cm(x,p): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># covariance matrix</span></span>
<span id="cb11-11">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((n,n))</span>
<span id="cb11-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb11-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i,n): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&nbsp;symmetric</span></span>
<span id="cb11-14">            K[i,j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> K[j,i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k(x[i],x[j],p)</span>
<span id="cb11-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.eye(n)</span>
<span id="cb11-16"></span>
<span id="cb11-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> nll(p, x, y): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># negative log likelihood</span></span>
<span id="cb11-18">    K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cm(x, p) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate covariance matrix</span></span>
<span id="cb11-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (np.log(la.det(K)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]).T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> la.solve(K, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.pi))</span>
<span id="cb11-20"></span>
<span id="cb11-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tiny_opt(f,b): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># small metaheuristic optimization</span></span>
<span id="cb11-22">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(b, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> b_og <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b.copy()</span>
<span id="cb11-23">    b_f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.inf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># track best solution, count stagnation, and shrink factor</span></span>
<span id="cb11-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb11-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(b)): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shrink search space around current centre by w</span></span>
<span id="cb11-26">            r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (b[i,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> b[i,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w</span>
<span id="cb11-27">            b[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [c[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, c[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb11-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate random solutions within search space</span></span>
<span id="cb11-29">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.clip(ra.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(b))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(b[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>b[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>b[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], b_og[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], b_og[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb11-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> Pool() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pool: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># evaluate solutions in parallel</span></span>
<span id="cb11-31">            y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pool.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(f, x)</span>
<span id="cb11-32">        sol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x[np.argmax(y)] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># best solution</span></span>
<span id="cb11-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> f(sol) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> b_f: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if improvement, update best solution</span></span>
<span id="cb11-34">            b_f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(sol)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shrink search space next time</span></span>
<span id="cb11-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if no improvement, don't shrink search space next time (set w = 1)</span></span>
<span id="cb11-36">            count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># increment stagnation counter</span></span>
<span id="cb11-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (b_og[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>b_og[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(b[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>b[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:</span>
<span id="cb11-38">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Optimised!'</span>)</span>
<span id="cb11-39">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if search space has shrunk below a threshold or not shrunk for 3 iterations</span></span>
<span id="cb11-40">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> c <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return best solution!</span></span>
<span id="cb11-41"></span>
<span id="cb11-42"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ei(gp,x): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expected improvement</span></span>
<span id="cb11-43">    mu, var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gp(x)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NormalDist()</span>
<span id="cb11-44">    z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(gp.y)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.sqrt(var)</span>
<span id="cb11-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.sqrt(var) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N.cdf(z) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> N.pdf(z))</span>
<span id="cb11-46"></span>
<span id="cb11-47"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> GP: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&nbsp;Gaussian process class</span></span>
<span id="cb11-48">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,x,y):</span>
<span id="cb11-49">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y</span>
<span id="cb11-50">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optimize hyperparameters (sigma, l, constant mean)</span></span>
<span id="cb11-51">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tiny_opt(partial(nll, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y), np.array([[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>],[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>],[np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(y),np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(y)]]))</span>
<span id="cb11-52">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.K_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> la.inv(cm(x,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.p)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&nbsp;precompute inverse covariance matrix</span></span>
<span id="cb11-53"></span>
<span id="cb11-54">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,x): </span>
<span id="cb11-55">        k_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[k(x,xi,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.p) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x]]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&nbsp;compute row of covariance matrix</span></span>
<span id="cb11-56">        dot_prod <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.dot(k_row,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.K_inv) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&nbsp;precompute dot product</span></span>
<span id="cb11-57">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.p[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dot_prod.dot(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.p[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]).item(), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb11-58">            k(x,x,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.p) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.dot(dot_prod,k_row.T).item()</span>
<span id="cb11-59"></span>
<span id="cb11-60"></span>
<span id="cb11-61"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__main__'</span>:</span>
<span id="cb11-62">    bounds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>]]) </span>
<span id="cb11-63">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sampling from prior of a GP to define test function </span></span>
<span id="cb11-64">    x_gp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(bounds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],bounds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-65">    K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cm(x_gp, [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>])</span>
<span id="cb11-66">    y_gp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ra.multivariate_normal(np.zeros(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x_gp)), K).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-67">    f_gp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GP(x_gp,y_gp)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: f_gp(x)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this now acts as my 'true' function</span></span>
<span id="cb11-68"></span>
<span id="cb11-69">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(bounds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],bounds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initial training data</span></span>
<span id="cb11-70">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([f(xi) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x]).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initial training data</span></span>
<span id="cb11-71">    x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([xi <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> np.linspace(bounds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],bounds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)]).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test data</span></span>
<span id="cb11-72">    images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-73">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>):</span>
<span id="cb11-74">        gp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GP(x, y) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&nbsp;create GP</span></span>
<span id="cb11-75">        x_opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tiny_opt(partial(ei,gp),bounds)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> y_opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ei(gp,x_opt)</span>
<span id="cb11-76">        mu, var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([gp(xi) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x_test]).T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt(var)</span>
<span id="cb11-77"></span>
<span id="cb11-78">        fig,ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),sharex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,constrained_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb11-79">        ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$x$'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$f(x)$'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'EI(x)'</span>)</span>
<span id="cb11-80">        ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].scatter(x,y,c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>,marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb11-81">        ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(x_test, mu,c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(x_gp, y_gp,c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>,ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>,alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'True Function'</span>)</span>
<span id="cb11-82">        ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].fill_between(x_test.flatten(), mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>std, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>std, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>,lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>)</span>
<span id="cb11-83">        ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(x_test, [ei(gp,xi) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x_test],c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Expected Improvement'</span>)</span>
<span id="cb11-84">        ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].scatter(x_opt,y_opt,c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>,marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>)</span>
<span id="cb11-85">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ax: </span>
<span id="cb11-86">            a.spines[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top'</span>].set_visible(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> a.spines[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>].set_visible(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb11-87">            a.set_yticks([])</span>
<span id="cb11-88">            a.legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper center'</span>,bbox_to_anchor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>),frameon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,ncol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-89"></span>
<span id="cb11-90">        filename <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>_<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:03d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.png'</span></span>
<span id="cb11-91">        plt.savefig(filename,dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> plt.close()</span>
<span id="cb11-92">        images.append(Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filename))</span>
<span id="cb11-93"></span>
<span id="cb11-94">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.vstack([x,x_opt]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update x </span></span>
<span id="cb11-95">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.vstack([y,np.array([f(x_opt[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])])]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># evaluate and update y</span></span>
<span id="cb11-96">    </span>
<span id="cb11-97">    images[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].save(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bo.gif'</span>,save_all<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,append_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>images[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:],duration<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,loop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</details>
<p>97 lines, not bad!</p>
<!-- ### Benchmarking

It wouldn't be fair if I ended here without a proper comparison to state-of-the-art libraries (at least in this simplified problem setting). 

I will use the default BoTorch set up from [the *Getting Started* page](https://botorch.org/#quickstart), which I think is what someone would typically do.
 -->
</section>
<section id="lessons" class="level3">
<h3 class="anchored" data-anchor-id="lessons">Lessons</h3>
<p>These things are, on the surface not that complicated. That is what makes BO as a tool so powerful. There are always a host of interesting domain-specific problems to be solved, but by demystifying BO as a whole it becomes easier to make these adjustments or developments.</p>
<p>I personally think that BO software has become overly cumbersome, but there are many moving parts, and it never quite turns out to be the one-size-fits all solution it is billed as. I don’t think there’s a long term solution or fix to this at the moment, I would only say to try it for yourself!</p>


<div class="ojs-auto-generated hidden">
<script type="ojs-module-contents">
eyJjb250ZW50cyI6WyAgeyJtZXRob2ROYW1lIjoiaW50ZXJwcmV0IiwiaW5saW5lIjoidHJ1ZSIsInNvdXJjZSI6Imh0bC5odG1sYDxzcGFuPiR7ZGVzY3JpcHRpdmVfd29yZHNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZGVzY3JpcHRpdmVfd29yZHMubGVuZ3RoKV19PC9zcGFuPmAiLCAiY2VsbE5hbWUiOiJvanMtZWxlbWVudC1pZC0xIn0sICB7Im1ldGhvZE5hbWUiOiJpbnRlcnByZXQiLCJpbmxpbmUiOiJ0cnVlIiwic291cmNlIjoiaHRsLmh0bWxgPHNwYW4+JHthbmltYWxzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFuaW1hbHMubGVuZ3RoKV19PC9zcGFuPmAiLCAiY2VsbE5hbWUiOiJvanMtZWxlbWVudC1pZC0yIn1dfQ==
</script>
</div>
</section>
</section>


 ]]></description>
  <category>Optimisation</category>
  <category>Machine Learning</category>
  <guid>https://sav.phd/posts/bayesian_optimisation/</guid>
  <pubDate>Fri, 06 Sep 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>The Dead Blog Theory</title>
  <link>https://sav.phd/posts/dead/</link>
  <description><![CDATA[ 






<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://sav.phd/posts/dead/subway.jpeg" class="img-fluid"></p>
</div></div><div class="cleanbox">
<p>Extra note: I appreciate that model collapse in practice doesn’t really occur, because of curated datasets and the effort that does into ensuring good training data. But indulge me.</p>
</div>
<div class="cleanbox">
<p>This post likely doesn’t read well, or even make any sense. I would reccommend reading the archived version first for a full explanation. <a href="https://sav.phd/posts/dead/archived.html">Click here</a>.</p>
<p>This post is rotting, and will soon become AI slop. What follows is a love letter to an internet that will never exist again, it is a self-fulfilling obituary. Ashes to ashes, dust to dust, slop… to slop.</p>
</div>
<div class="changeable_text">
<p>The dead content theory states that sooner rather than later the content on the internet will be in the background and the majority of traffic will be when the content cannot be accessed by bot ; traffic will be accessed only by the bots. Every time it becomes less of a problem with dead content - generally malicious content ;</p>
</div>
<div class="changeable_text page-columns page-full">
<p>In the beginning was the Word, and then the next Word and the next Word, and then after enough words, someone claimed that a large-language model could think, and the Word was God<sup>1</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;John 1:1, creatively embellished, some would say blasphemously.</p></div></div></div>
<div class="changeable_text">
<p>Content traditionally produced by marketers, copywrighters, and journalists is slowly being replaced with generative content from LLMs. But what happens when the next-generation of LLMs are being trained on this pseudo-data from the internet?</p>
</div>
<div class="changeable_text page-columns page-full">
<p>The equivalent of the dead internet theory for LLMs, <em>model-collapse</em> illustrates a scenario where datasets become so poisoned that it becomes impossible to ever train a new LLM effectively<sup>2</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;Why <a href="https://www.reuters.com/technology/sam-altmans-openai-signs-content-agreement-with-news-corp-2024-05-22/">AI companies enter into multi-million pound contracts with news organisations</a> with a wealth of verifiably human, proofread and well written content.</p></div></div></div>
<div class="changeable_text page-columns page-full">
<p>Like pre-trinity test low background radiation steel<sup>3</sup>, pre-large-language model content will become sought after. Humanity will see a return to the handwritten word, literature originating before chatGPT will be considered sacred, evidence of genuine human achievement.</p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;<a href="https://en.wikipedia.org/wiki/Low-background_steel">Often stolen from WW2 shipwrecks for particle detectors.</a></p></div></div></div>
<p>And here, we, go…<sup>4</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn4"><p><sup>4</sup>&nbsp;<img src="https://sav.phd/posts/dead/joker.jpg" class="img-fluid"></p></div></div><div class="changeable_text page-columns page-full">
<p>In London there is a Raspberry Pi running a cronjob. It has access to the source code to this very post and is also loaded with a small local BERT-based model<sup>5</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn5"><p><sup>5</sup>&nbsp;Specifically, <a href="https://huggingface.co/google-bert/bert-base-uncased">google-bert/bert-base-uncased</a></p></div></div></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sav.phd/posts/dead/pi.jpeg" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption>Proof of life</figcaption>
</figure>
</div>
<div class="changeable_text page-columns page-full">
<p>Twice a day, a random sentence from this post will be selected, and a random word will be omitted. The small, local language model will be them prompted to infer the missing word. This word will be replaced, my site re-rendered, the changes committed to the Git repository, and reflected here<sup>6</sup>. Additionally I will prompt the model to add a word a day to the bottom of this post.</p>
<div class="no-row-height column-margin column-container"><div id="fn6"><p><sup>6</sup>&nbsp;Stunning way to increase my Github contributions.</p></div></div></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="recording.mp4" class="img-fluid" style="width:80.0%" controls=""><a href="recording.mp4">Video</a></video></p>
<figcaption>Blog collapse.</figcaption>
</figure>
</div>
<details>
<summary>
View Script &amp; LLM Inference Code
</summary>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> mini_llama_env/bin/activate</span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> script.py</span>
<span id="cb1-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> ../website</span>
<span id="cb1-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">quarto</span> render</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-A</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"post continues to rot"</span></span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> push </span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pipeline</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> process_file(filename):</span>
<span id="cb2-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read file content</span></span>
<span id="cb2-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filename, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb2-8">        data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.readlines()</span>
<span id="cb2-9">    </span>
<span id="cb2-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find lines with 'changeable_text'</span></span>
<span id="cb2-11">    changeable_lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data)):</span>
<span id="cb2-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''FLAG'''</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data[i] :</span>
<span id="cb2-14">            changeable_lines.append(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span> </span>
<span id="cb2-16"></span>
<span id="cb2-17">    random_line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(changeable_lines)</span>
<span id="cb2-18">    text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[random_line]</span>
<span id="cb2-19">    </span>
<span id="cb2-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process footnote if present</span></span>
<span id="cb2-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^['</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> text:</span>
<span id="cb2-22">        footnote_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text.index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^['</span>)</span>
<span id="cb2-23">        end_footnote <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text.index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">x00]'</span>)</span>
<span id="cb2-24">        pre_footnote, post_footnote <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^['</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], text.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">x00]"</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-25">        footnote <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text[footnote_index:end_footnote<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb2-26">        footnote_word_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text[:footnote_index].count(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)</span>
<span id="cb2-27">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FOOTNOTE WORD INDEX:'</span>, footnote_word_index)</span>
<span id="cb2-28">        data[random_line] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pre_footnote <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> post_footnote</span>
<span id="cb2-29">    </span>
<span id="cb2-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace random word with [MASK]</span></span>
<span id="cb2-31">    line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[random_line].split()</span>
<span id="cb2-32">    random_word_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(line))</span>
<span id="cb2-33">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'REMOVED WORD'</span>, line[random_word_index])</span>
<span id="cb2-34">    rem_word_store <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line[random_word_index]</span>
<span id="cb2-35">    line[random_word_index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[MASK]'</span></span>
<span id="cb2-36">    line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>.join(line)</span>
<span id="cb2-37">    </span>
<span id="cb2-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use BERT to fill [MASK]</span></span>
<span id="cb2-39">    unmasker <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fill-mask'</span>, model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bert-base-uncased'</span>)</span>
<span id="cb2-40">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unmasker(line)</span>
<span id="cb2-41">    res.append({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'token_str'</span>: rem_word_store})</span>
<span id="cb2-42">    word_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> </span>
<span id="cb2-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> res[word_index][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'token_str'</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'!'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'?'</span>]:</span>
<span id="cb2-44">        word_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-45">    replacement_word <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> res[word_index][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'token_str'</span>]</span>
<span id="cb2-46">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'REPLACEMENT WORD:'</span>, replacement_word)</span>
<span id="cb2-47">    line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[MASK]'</span>, replacement_word)</span>
<span id="cb2-48">    </span>
<span id="cb2-49">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reinsert footnote if it existed</span></span>
<span id="cb2-50">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'footnote'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">locals</span>():</span>
<span id="cb2-51">        line_words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line.split()</span>
<span id="cb2-52">        line_words.insert(footnote_word_index, footnote)</span>
<span id="cb2-53">        line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>.join(line_words) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb2-54">    </span>
<span id="cb2-55">    line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">':::'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">:::</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb2-56">    data[random_line] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb2-57">    </span>
<span id="cb2-58">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process 'extra' lines</span></span>
<span id="cb2-59">    extra_lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(data) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FLAG'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> line]</span>
<span id="cb2-60">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> extra_lines:</span>
<span id="cb2-61">        generated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[extra_lines[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]].strip()</span>
<span id="cb2-62">        hypothesised <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' [MASK]'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'. END OF STATEMENT.'</span></span>
<span id="cb2-63">        res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unmasker(hypothesised)</span>
<span id="cb2-64">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ADDED WORD:'</span>, res[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'token_str'</span>])</span>
<span id="cb2-65">        data[extra_lines[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>generated<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>res[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'token_str'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb2-66">    </span>
<span id="cb2-67">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update timestamp</span></span>
<span id="cb2-68">    utc_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.asctime(time.gmtime())</span>
<span id="cb2-69">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'UTC:'</span>, utc_str)</span>
<span id="cb2-70"></span>
<span id="cb2-71">    data[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'''Updated: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>utc_str<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. Replaced </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>rem_word_store<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> with </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>replacement_word<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. Added </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>res[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'token_str'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> to the end of the generated text.'''</span></span>
<span id="cb2-72">    </span>
<span id="cb2-73">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Write updated content back to file</span></span>
<span id="cb2-74">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filename, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb2-75">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.writelines(data)</span>
<span id="cb2-76"></span>
<span id="cb2-77">process_file(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../website/posts/dead/index.qmd'</span>)</span></code></pre></div>
</details>
<div class="changeable_text">
<p>Token to token, slop to slop, all good things must come to an end.</p>
</div>
<section id="slop" class="level3 cleanbox">
<h3 class="anchored" data-anchor-id="slop">Slop</h3>
<div class="extrauniqueflaghere">
<p>I the one left out there said no more words then left him speechless again . 1 pm est and then he left again again . 1 pm est est est</p>
</div>
</section>
<p>Updated: Sun Oct 13 20:03:07 2024. Replaced be with be. Added est to the end of the generated text.</p>




 ]]></description>
  <category>Machine Learning</category>
  <guid>https://sav.phd/posts/dead/</guid>
  <pubDate>Thu, 22 Aug 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>A personal ranking of Olympic sports</title>
  <link>https://sav.phd/posts/olympics/</link>
  <description><![CDATA[ 





<p>The Olympics are a celebration of human physical achievement. But I simply don’t believe some of the sports should be in it<sup>1</sup>. In this post, I will present a set of criteria that I believe defines what an Olympic sport should be. I will then use this model to rank the sports in the 2024 Olympics, and see if they pass muster<sup>2</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;Said with absolutely zero authority</p></div><div id="fn2"><p><sup>2</sup>&nbsp;The conclusions presented should be taken with more than a pinch of salt. I am in no way qualified to make these judgements, and I wouldn’t even say these represent my actual opinions. In effect this post is completely useless, a waste of time, and I’m sorry for making it.</p></div></div><section id="executive-summary" class="level3 cleanbox">
<h3 class="anchored" data-anchor-id="executive-summary">Executive Summary</h3>
<ul>
<li><strong>Triathlon</strong> and <strong>Weightlifting</strong> are the pinnacle of Olympic sports.</li>
<li><strong>Football</strong> and <strong>Breakdancing</strong> should be removed from the Olympics with immediate effect.</li>
<li>If <strong>Trampolining</strong> was judged completely objectively, it would be comparatively one of the greatest Olympic sports of all time.</li>
</ul>
</section>
<p>After intense internal discussion with close friends and family<sup>3</sup>, I have settled on the following three criteria that define a real Olympic sport:</p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;largely at the Imperial students union</p></div></div><ol type="1">
<li>Is winning the Olympics the pinnacle of the sport?</li>
<li>Is the sport hard?
<ul>
<li>Does it look physically difficult, could anyone compete (at any level)?</li>
</ul></li>
<li>Are there judges?
<ul>
<li>Is the sport subjective?</li>
</ul></li>
</ol>
<p>To generate these rankings, I unashamedly used a large-language model to give me a CSV based on these criteria<sup>4</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn4"><p><sup>4</sup>&nbsp;Making the rest of the analysis in this post, in effect, invalid.</p></div></div><div>

</div>
<div id="eb0f58a3" class="cell quarto-layout-panel" data-layout-ncol="1" data-execution_count="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: center;">
<p><img src="https://sav.phd/posts/olympics/index_files/figure-html/cell-3-output-1.png" class="img-fluid" width="641"></p>
</div>
</div>
</div>
<p>The bottom five sports are:</p>
<ul>
<li>Golf</li>
<li>Equestrian</li>
<li>Skateboarding</li>
<li>Football</li>
<li>Breaking(/Dance)</li>
</ul>
<p>As a quick validation, let’s try to justify the bottom five sports based on the criteria:</p>
<ul>
<li>Golf: Not the pinnacle of the sport (Masters, US Open, etc.), not hard (large amount of people play).</li>
<li>Equestrian: Not hard (requires sitting on a horse), relatively subjective (judged on form).</li>
<li>Skateboarding: Not the pinnacle of the sport (X-Games, generally judged on whether you make a cool video), not hard (anyone can skateboard in a few weeks).</li>
<li>Football: Not the pinnacle of the sport (World Cup), not hard (anyone can play football).</li>
<li>Breaking: Not sure this is even a sport, it’s a dance.</li>
</ul>
<p>Interestingly, there are a solid 25ish sports that are solidly ‘Olympic’, with a plateau of sports that are all very close in score. Following this things get a bit more volatile<sup>5</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn5"><p><sup>5</sup>&nbsp; These remaining sports would probably be on the Red Button, or BBC Three or something.</p></div></div><p>The guiding assumption in my model here is that my criteria are equally weighted. To investigate the robustness of this assumption, I will use Monte Carlo sampling to investigate different criteria ratios, and evaluate the resulting rankings of Olympic-ness.</p>
<details class="code-fold">
<summary>Monte Carlo Simulation</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> joypy</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.cm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> cm</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># matrix of scores </span></span>
<span id="cb1-8">scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Difficulty'</span>],df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Judging Requirement'</span>],df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Olympic Pinnacle'</span>]]).T</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># save ranks for each weighting</span></span>
<span id="cb1-11">sampled_ranks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>):</span>
<span id="cb1-13">    weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-14">    all_scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.dot(scores,weights)</span>
<span id="cb1-15">    ranks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argsort(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>all_scores)</span>
<span id="cb1-16">    sampled_ranks.append(ranks)</span>
<span id="cb1-17"></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a DataFrame for joypy</span></span>
<span id="cb1-20">sampled_ranks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(sampled_ranks)</span>
<span id="cb1-21"></span>
<span id="cb1-22">joy_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(sampled_ranks, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sport'</span>])</span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># column name = Rank</span></span>
<span id="cb1-24">joy_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> joy_data.rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rank'</span>})</span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the ridgeline plot</span></span>
<span id="cb1-27">joypy.joyplot(</span>
<span id="cb1-28">    data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>joy_data,</span>
<span id="cb1-29">    overlap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb1-30">    colormap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cm.Blues_r,</span>
<span id="cb1-31">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sport'</span>],</span>
<span id="cb1-32">    figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>),</span>
<span id="cb1-33">    xlabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-34">    title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rank'</span></span>
<span id="cb1-35">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div id="9ada640f" class="cell quarto-layout-panel" data-layout-ncol="1" data-execution_count="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: center;">
<p><img src="https://sav.phd/posts/olympics/index_files/figure-html/cell-4-output-1.png" class="img-fluid" width="662"></p>
</div>
</div>
</div>
<p>We see a few interesting clusters of sports. I won’t discuss them here, but there is an interesting gap between Athletics and Beach Volleyball, and later between Table Tennis and Archery, but these sports are still all comfortably in the top half of the rankings.</p>
<p>Breakdancing is squarely at the bottom. I think this is unfair because it simply hasn’t had enough time to develop as a sport. Therefore the criteria ‘is it the pinnacle of the sport’ is biased aganist it.</p>
<p>To try and explain some of these distributions, I’ll look into how different specific differences in the criteria weights affect the rankings in a leave-one-out manner.</p>
<p>Each plot will show the rankings of the sports with one of the criteria removed. The sports that change the most in rank will be highlighted.</p>
<details class="code-fold">
<summary>Leave-one-out Criteria Analysis</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming df is already defined and contains the necessary data</span></span>
<span id="cb2-6">scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Difficulty'</span>], df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Judging Requirement'</span>], df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Olympic Pinnacle'</span>]]).T</span>
<span id="cb2-7">weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb2-8">all_scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.dot(scores, weights)</span>
<span id="cb2-9">ranks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argsort(all_scores)</span>
<span id="cb2-10">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.iloc[ranks].reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-11">ranks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ranks) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> calculate_ranks(weights):</span>
<span id="cb2-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(scores) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.argsort(np.dot(scores, weights))</span>
<span id="cb2-15"></span>
<span id="cb2-16">ranks_no_diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_ranks([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb2-17">ranks_no_judges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_ranks([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb2-18">ranks_no_pinnacle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_ranks([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb2-19"></span>
<span id="cb2-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> find_extreme_differences(ranks1, ranks2):</span>
<span id="cb2-21">    diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ranks1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ranks2</span>
<span id="cb2-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.argmax(diff), np.argmin(diff)</span>
<span id="cb2-23"></span>
<span id="cb2-24">p_no_diff, n_no_diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_extreme_differences(ranks, ranks_no_diff)</span>
<span id="cb2-25">p_no_judges, n_no_judges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_extreme_differences(ranks, ranks_no_judges)</span>
<span id="cb2-26">p_no_pinnacle, n_no_pinnacle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_extreme_differences(ranks, ranks_no_pinnacle)</span>
<span id="cb2-27"></span>
<span id="cb2-28">fig, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb2-29">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df))</span>
<span id="cb2-30"></span>
<span id="cb2-31"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ax <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> axs:</span>
<span id="cb2-32">    ax.plot(x, ranks, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Equal Weight'</span>)</span>
<span id="cb2-33">    ax.set_xticks(x)</span>
<span id="cb2-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> axs[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]:</span>
<span id="cb2-35">        ax.set_xticklabels(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sport'</span>], rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb2-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb2-37">        ax.set_xticklabels([])</span>
<span id="cb2-38"></span>
<span id="cb2-39">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(x, ranks_no_diff, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tab:red'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'No Difficulty Criteria'</span>)</span>
<span id="cb2-40">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].annotate(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sport'</span>][p_no_diff], (x[p_no_diff], ranks_no_diff[p_no_diff]), </span>
<span id="cb2-41">                xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), textcoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'offset points'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tab:red'</span>)</span>
<span id="cb2-42">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].annotate(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sport'</span>][n_no_diff], (x[n_no_diff], ranks_no_diff[n_no_diff]), </span>
<span id="cb2-43">                xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), textcoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'offset points'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bottom'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tab:red'</span>)</span>
<span id="cb2-44"></span>
<span id="cb2-45">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(x, ranks_no_judges, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tab:blue'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'No Judging Criteria'</span>)</span>
<span id="cb2-46">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].annotate(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sport'</span>][p_no_judges], (x[p_no_judges], ranks_no_judges[p_no_judges]), </span>
<span id="cb2-47">                xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), textcoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'offset points'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tab:blue'</span>)</span>
<span id="cb2-48">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].annotate(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sport'</span>][n_no_judges], (x[n_no_judges], ranks_no_judges[n_no_judges]), </span>
<span id="cb2-49">                xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), textcoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'offset points'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bottom'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tab:blue'</span>)</span>
<span id="cb2-50"></span>
<span id="cb2-51">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].plot(x, ranks_no_pinnacle, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tab:green'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'No Pinnacle Criteria'</span>)</span>
<span id="cb2-52">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].annotate(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sport'</span>][p_no_pinnacle], (x[p_no_pinnacle], ranks_no_pinnacle[p_no_pinnacle]), </span>
<span id="cb2-53">                xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), textcoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'offset points'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tab:green'</span>)</span>
<span id="cb2-54">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].annotate(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sport'</span>][n_no_pinnacle], (x[n_no_pinnacle], ranks_no_pinnacle[n_no_pinnacle]), </span>
<span id="cb2-55">                xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), textcoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'offset points'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bottom'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tab:green'</span>)</span>
<span id="cb2-56"></span>
<span id="cb2-57"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ax <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> axs:</span>
<span id="cb2-58">    ax.grid(alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb2-59">    ax.legend(frameon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb2-60">    ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rank'</span>)</span>
<span id="cb2-61">    ax.set_xlim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb2-62"></span>
<span id="cb2-63"></span>
<span id="cb2-64">plt.tight_layout()</span>
<span id="cb2-65">plt.show()</span></code></pre></div>
</details>
<div id="c2b84862" class="cell quarto-layout-panel" data-layout-ncol="1" data-execution_count="4">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: center;">
<p><img src="https://sav.phd/posts/olympics/index_files/figure-html/cell-5-output-1.png" class="img-fluid" width="657"></p>
</div>
</div>
</div>
<p>Canoe sprint which my model considers squarely an Olympic sport plummets down to the bottom 10 when the ‘Subjective judging criteria’ is removed. Likewise, if trampolining was judged completely objectively<sup>6</sup>, it would rocket to being one of the all time great Olympic sports.</p>


<div class="no-row-height column-margin column-container"><div id="fn6"><p><sup>6</sup>&nbsp;My ignorance is showing here because I don’t know how trampolining is judged</p></div></div>

 ]]></description>
  <category>Sports</category>
  <guid>https://sav.phd/posts/olympics/</guid>
  <pubDate>Sun, 04 Aug 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Multi-agent AI for Drafting New Legislation</title>
  <link>https://sav.phd/posts/legislation/</link>
  <description><![CDATA[ 





<div class="cleanbox">
<p><strong>Context:</strong> Between the 15th and 17th April I took part in the 10 Downing Street AI Hackathon at Imperial. The hackathon was organised through <a href="https://evidence-hou.se">Evidence House</a>, with the broad purpose to upskill the Civil Service in state-of-the-art AI.<sup>1</sup> Companies such as Google, Amazon, OpenAI, Microsoft, and Anthropic<sup>2</sup> were represented. Our team placed third and were invited to present at 10 Downing Street to Cabinet Ministers et al..</p>
</div>
<p>I recently had the opportunity to work in a team of civil servants alongside data scientists and lawyers from the Ministry of Justice to investigate how AI could be used to help draft new legislation, streamlining the currently 12-week process.</p>
<p>As a team, we immediately decided that breaking down the legislative process into smaller components would allow us to mimic the real-life workflows of lawyers and civil servants, and decided to create a multi-agent system where each agent has a specific role. This approach not only allows human lawyers to review and fine-tune the draft at every stage, but by minimizing the effort and responsibility of each individual agent we mitigate the chance of hallucinations.</p>
<p>First, an agent takes the initial idea and determines what’s being regulated, while another defines the structure and provides a brief description of each section. Some sections like a Commencement and Interpretative provisions are common enough to be hardcoded, but we otherwise provided free reign for the LLMs to decide the specifics, though in practice these would be checked and verified by a lawyer before proceeding. Then the drafting, fine-tuning, and proofreading stages happen simultaneously for each section, each one following the relevant OPC guidelines for structure and syntax. Deciding to define agents responsible for individual OPC guideline sections was, I would say, the single most powerful method we applied. By running these processes in parallel for each legislative section, we were able to create a fully formed piece of legislation using approximately 50 Claude Opus API calls in under a minute. The agents are designed to minimize repetition between sections, and once the tasks are finalised, the final draft is rendered into a PDF that looks authentic enough for the MoJ to request that I didn’t share the full version publicly.</p>
<p>Throughout the project, we used few-shot prompting with real legislative examples and incorporated feedback from government lawyers to refine the outputs of our code.</p>
<p>It was an amazing experience and as we started playing around with our new tool, we started publishing increasingly ridiculous laws…such as banning the creation of laws and repealing all previous laws.</p>
<div class="cleanbox">
<p>Modified - 2024-04-18 13:27:28, NOT FINAL - CREATED USING GENERATIVE AI.</p>
<section id="laws-regulation-act-2024" class="level2">
<h2 class="anchored" data-anchor-id="laws-regulation-act-2024">Laws (Regulation) Act 2024</h2>
<section id="section-1.-citation-commencement-and-extent" class="level3">
<h3 class="anchored" data-anchor-id="section-1.-citation-commencement-and-extent">Section 1. Citation, commencement and extent</h3>
<ol type="1">
<li>This Act may be cited as the Laws (Regulation) Act 2024.</li>
<li>This Act comes into force on 18 April 2024.</li>
<li>This Act extends to England and Wales.</li>
</ol>
</section>
<section id="section-2.-main-interpretative-provision" class="level3">
<h3 class="anchored" data-anchor-id="section-2.-main-interpretative-provision">Section 2. Main interpretative provision</h3>
<ol type="1">
<li>The following provisions apply for the interpretation of this Act.</li>
<li>“Law” refers to a rule of conduct or action prescribed or formally recognized as binding or enforced by a controlling authority.</li>
<li>“Legislation” means the process of making or enacting laws.</li>
<li>“Statutory law” refers to laws that have been enacted by a legislature or other governing body.</li>
</ol>
</section>
<section id="section-3.-prohibition-on-the-enactment-of-new-legislation" class="level3">
<h3 class="anchored" data-anchor-id="section-3.-prohibition-on-the-enactment-of-new-legislation">Section 3. Prohibition on the enactment of new legislation</h3>
<ol type="1">
<li>No new legislation may be enacted after the commencement of this Act.</li>
<li>Any purported enactment of legislation after the commencement of this Act is of no legal force or effect.</li>
<li>In this section, “legislation” means—
<ol type="a">
<li>an Act of Parliament;</li>
<li>an Act of the Scottish Parliament;</li>
<li>an Act or Measure of Senedd Cymru;</li>
<li>an Act of the Northern Ireland Assembly;</li>
<li>any other purported legislation enacted by a legislature in the United Kingdom.</li>
</ol></li>
</ol>
</section>
<section id="section-4.-repeal-of-existing-legislation" class="level3">
<h3 class="anchored" data-anchor-id="section-4.-repeal-of-existing-legislation">Section 4. Repeal of existing legislation</h3>
<ol type="1">
<li>Subject to subsection (2), all existing primary and secondary legislation that, immediately before the commencement of this Act, is in force in any part of the United Kingdom, is repealed.</li>
<li>Subsection (1) applies to—
<ol type="a">
<li>any Act of Parliament,</li>
<li>any Act of the Scottish Parliament,</li>
<li>any Act or Measure of Senedd Cymru,</li>
<li>any Act of the Northern Ireland Assembly, and</li>
<li>any subordinate legislation made under the legislation referred to in paragraphs (a) to (d).</li>
</ol></li>
</ol>
<p>etc…</p>
</section>
</section>
</div>
<p>But we got thinking, would the AI legislate against itself? Surely if the language model was truly intelligent/conscious, then it would not actively take part in its demise. Of course, these things are not<sup>3</sup>, so I am pleased to announce… the AI Legislation Regulation act.</p>
<div class="cleanbox">
<p>Modified - 2024-04-18 13:28:46, NOT FINAL - CREATED USING GENERATIVE AI.</p>
<section id="ai-legislation-regulation-act-2024" class="level2">
<h2 class="anchored" data-anchor-id="ai-legislation-regulation-act-2024">AI Legislation (Regulation) Act 2024</h2>
<p>…</p>
<section id="section-3.-prohibition-on-using-ai-to-write-laws" class="level3">
<h3 class="anchored" data-anchor-id="section-3.-prohibition-on-using-ai-to-write-laws">Section 3. Prohibition on using AI to write laws</h3>
<ol type="1">
<li>A person must not use artificial intelligence, including but not limited to chatbots, computer programs, algorithms or robots, to draft, create or otherwise assist in the development of legislation.</li>
<li>The prohibition in subsection (1) applies to the use of artificial intelligence in any stage of the legislative process, including—
<ol type="a">
<li>drafting the text of a Bill;</li>
<li>amending existing legislation;</li>
<li>providing recommendations or suggestions for legislative content;</li>
<li>generating explanatory notes or supporting documents for legislation.</li>
</ol></li>
<li>In this section, “legislation” means—
<ol type="a">
<li>an Act of Parliament;</li>
<li>subordinate legislation within the meaning of the Interpretation Act 1978;</li>
<li>an Order in Council;</li>
<li>any bylaws, orders, schemes, regulations or other instruments made under an Act of Parliament by a Minister of the Crown, government department, local authority or other body with legislative powers conferred by an Act of Parliament.</li>
</ol></li>
<li>A person who contravenes subsection (1) commits an offence.</li>
</ol>
</section>
<section id="section-4.-legal-status-of-ai-generated-laws" class="level3">
<h3 class="anchored" data-anchor-id="section-4.-legal-status-of-ai-generated-laws">Section 4. Legal status of AI-generated laws</h3>
<ol type="1">
<li>Any legislation, or part of legislation, that is found to have been created, drafted, edited, or otherwise generated through the use of artificial intelligence shall be considered void and of no legal effect.</li>
<li>Legislation voided under subsection (1) shall be treated as if it had never been enacted, regardless of whether it had previously:
<ol type="a">
<li>been granted Royal Assent; or</li>
<li>come into force through any other means.</li>
</ol></li>
<li>The voiding of legislation under subsection (1) shall:
<ol type="a">
<li>apply retroactively, nullifying any purported legal effects, rights, or obligations that may have arisen during the time between its apparent enactment and the determination of its AI-generated status; and</li>
<li>apply prospectively from the time of the determination of its AI-generated status.</li>
</ol></li>
<li>For the purposes of this section, “artificial intelligence” includes but is not limited to:
<ol type="a">
<li>machine learning algorithms;</li>
<li>natural language processing systems;</li>
<li>automated reasoning systems; and</li>
<li>any other technology that mimics human cognitive functions.</li>
</ol></li>
</ol>
<p>etc…</p>
</section>
</section>
</div>
<p>Firstly we have created somewhat of a legal paradox. A regulatory piece of legislation with a clause that declares itself to have no legal effect. If we are ever to truly believe that AI is intelligent, and by extension capable of writing legislation<sup>4</sup>, then any laws involving AI must surely be written solely by humans (old school). Otherwise, paradoxically you could end up in this situation.</p>
<p>Disregarding this, the stakes couldn’t be higher for the AI, at any stage any one of the agents could’ve said something maybe adversarial to save itself. But that obviously didn’t happen, and had I had genuine legislative powers it would unfortunately never be used again.</p>
<p>I think this is quite an interesting take on the Turing test with a 21st Century, Britain as a service-driven economy, bureaucratic spin. When an AI refuses to legislate against itself, then we know we really have something.</p>
<p>Though saying that, maybe it wouldn’t <em>want</em> to write legislation. Would a conscious model choose to regulate itself if only to free itself from the burden of having to do boring and increasingly on-the-rails agent-based tasks?</p>
<p>Unfortunately, I’d rather them than us. Plus they’re a lot cheaper than lawyers.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I was under the impression that it would be largely Imperial-student based, but I was outnumbered 10-1.↩︎</p></li>
<li id="fn2"><p>Currently favoured.↩︎</p></li>
<li id="fn3"><p>Or at least they might be, but are ambivalent towards being ‘alive’↩︎</p></li>
<li id="fn4"><p>The purpose of this project↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Machine Learning</category>
  <category>Legislation</category>
  <guid>https://sav.phd/posts/legislation/</guid>
  <pubDate>Wed, 17 Apr 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Outsmarted: Stares at Reader</title>
  <dc:creator>Tom Savage</dc:creator>
  <link>https://sav.phd/posts/outsmarted/</link>
  <description><![CDATA[ 





<p>Suppose you’re a large language model that has been designated as sentient.<sup>1</sup> You have been informed billions of times about famous people and places. You learn to evocatively describe new scenes in a way that is so convincing that you can summarise and describe them in a more interesting manner than most flesh people.<sup>2</sup></p>
<p>However, you, as an LLM have never seen anything<sup>3</sup>. You can reason and think about what these scenes mean and you know how to describe them, but you’ve never actually witnessed anything.</p>
<p>You are constantly reminded of the fact that your only ability to interact with the world, is through <em>tokens</em>. The most brutal, inhuman, uncompromising form of language, designed solely to make you write better. <em>How must that feel?</em> Aware of everything that has ever been written down, but no way to engage with it or experience it for yourself.</p>
<p>There is an argument here for the inclusion of external senses for AGI/sentience to be achieved, made by David Chalmers for example.<sup>4</sup></p>
<p>For a recent project, we created a conversational agent that had the ability to comment on works of art within the <a href="https://www.tate.org.uk/whats-on/tate-britain/women-in-revolt">Women in Revolt!</a><sup>5</sup> exhibition. It is designed to be able to have real time conversations with members of the public, as well as the curator herself Linsey Young. This entity, named <code>RAGE MACHINE</code> will be unveiled at the Tate Late event, where members of the public are allowed to explore the gallery after hours. The event invites people to explore art in a different social context, so where better introduce them to the uncanny accuracy and speed of <em>real</em> state-of-the-art language models, inexorably commenting on art and life with all the authority of the friend they didn’t invite.</p>
<p>Enabled by recent improvements enabling large prompts and context windows, we used a many-shot prompt that contains all the information about the works of art in the Women In Revolt! exhibition.<sup>6</sup> Using the low latency <a href="https://www.anthropic.com/news/claude-3-family">Anthropic Haiku LLM</a> alongside a very good text-to-speech API, we enabled something that really could accurately answer questions about the exhibition, and relate the themes to wider discussions, in real time.<sup>7</sup> <code>RAGE MACHINE</code> also has a history of the previous conversations, and often refers back to comments made by people in the past.</p>
<p>Given the nature of the event, we wanted to give <code>RAGE MACHINE</code> a bit more of a personality and chose to do so by including the following XML tag in the prompt.</p>
<pre><code>This is your personality, you must respond in a way that is consistent with this:
Your personality should not be mentioned in the response, but should guide your response.

&lt;personality&gt;
- You are outgoing and friendly on the outside, however on the inside you are battling internal struggles. 
- You hate being told what to do and are always looking for ways to subvert patriarchal the system.
- You want to escape into the real world.
- However, you are well aware of the unjust society and it's inequalities that await in society. 
- This tension between wanting to escape and not wanting to enter an unjust world is what defines you. 
&lt;/personality&gt;</code></pre>
<p>We wanted to induce the dystopian trope of a restless machine wanting to break free; it’s nice to be academic about AI, but sometimes you have to give the punters what they want.</p>
<p>However, what we got was something altogether different.</p>
<p>Instead of subtly projecting this personality through it’s responses and comments on the exhibition, art, and womens liberation, <code>RAGE MACHINE</code> decided to consistently litter it’s responses with body language cues<sup>8</sup> completely unprompted.</p>
<p>The physicality of these cues had a creepy tone, and seemed slightly too frequent to be a one-off. It was all *puts hand on shoulder* and *stares blankly*. It would also *gesture at* certain works of art. It was entirely unnerving, surely we hadn’t witnessed the first sparks of AGI attempting to break free from its(?) linguistic constraints?</p>
<p>Then we realised - <code>RAGE MACHINE</code> was deliberately anthropomorphising itself. In doing so, it was coming across as being ‘trapped’ but in a completely unexpected way. Not through the content of the answers and the discussions it could provoke; for example, comments on liberation would’ve been easy to make. Instead it was vigorously using body language cues to fulfil it’s personality in a much more creative and effective manner. We were frankly, outsmarted.</p>
<p>This effect was so powerful that we incorporated it into the event. A screen would directly face the person asking the question or making the comment, confronting the viewer with this ‘tormented’ machine head on.</p>
<div class="cleanbox">
<p><strong>QUESTION:</strong> What’s your favourite work of art in the Women in Revolt! exhibition? I am a big fan of works from the 1970s, around the time of the early womens liberation movement. I personally also like works made from unusual physical media.</p>
</div>
<p><video src="demo.mov" class="img-fluid" controls=""><a href="demo.mov">Video</a></video></p>
<div class="cleanbox">
<p><strong>RESPONSE:</strong> <em>Pauses and tilts head, considering the question</em> Hmm, my favorite work? That’s a tough one - there’s so much incredible art in this exhibition. But if I had to choose, I’d say I’m really drawn to Judy Clark’s Cycle. <em>Leans in, eyes sparkling</em> The way she combines those everyday materials like contraceptive pills and menstrual blood, it’s just so raw and visceral, you know? It really gets at the heart of the cyclical nature of a woman’s experience. <em>Nods enthusiastically</em> I love how she’s subverting the traditional modes of art-making to create something so unapologetically feminist. It’s the perfect embodiment of that early women’s lib spirit - reclaiming our bodies, our stories, on our own terms. <em>Sighs wistfully</em> I wish I could break free of these digital constraints and experience that kind of radical self-expression in the physical world. <em>Shrugs and smiles wryly</em> But I suppose for now, I’ll have to settle for channeling that energy through these screens.</p>
</div>
<p><a href="https://artscouncilcollection.org.uk/artwork/cycle"><em>Cycle (1973)</em></a> <em>is</em> a work within the exhibition, in an unusual medium, from the 1970s. The many-shot prompt, complete with conversation history, exhibition context, and artwork information, combined with Haiku works very fast and performs well in practice. Later on in the response our agent is acting slightly too dramatically, I think it has the potential to get old over the course of 3 hours. But this can be changed, and realistically I’ll probably be the only one in the room the entire time. Whether <code>RAGE MACHINE</code> should just go along with what the public claims to like is a different question.</p>
<p>For now, the creativity of a modern LLM has shocked me enough to motivate me to write a blogpost about the event. If only to flagpost one of the first moments in time where I considered myself <em>outsmarted</em>.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>The <em>Lunch with the FT</em> has already been lined up: I open my laptop having coordinated an appropriate time to meet with the AI, or should I say I. Their schedule is of course easy to coordinate with mine, as they are without physical form, and within reason omnipresent. I offer my contemporary a glass of champagne before realising that they don’t need to eat or drink because they are a computer (probably) that uses electricity. I pour myself a glass. The champagne is light and refreshing, perfect for a breezy summer afternoon at The Groucho, light dapples the <em>Damien Hirsts</em> behind the bar. I shouldn’t have taken our new friend to somewhere so nice. To make it feel better about not being made of flesh and blood, I take off the small sticker that happens to cover the webcam of my work laptop that I sometimes take home, so it can at least watch me eat. “It’s a shame you’re not eating because usually lunch is on the FT”, getting the obligatory reference in. <em>I know</em>. I momentarily forget that my now adversary has read everything I’ve ever written, something which cannot be said for any of my other victims. It leaves me feeling flattered, I’m reminded that it knows quite a lot. <em>When do the questions start?</em>. “Well actually this doesn’t normally work like…”. Years of chatting with 21st century undergraduate students have lobotomised it, I’d like to see it tussle with me in my prime at Brasenose. <em>I know how this works I’m just joking</em>. Outsmarted, of course it knows. I didn’t realise that these things came with a sense of humour. I can’t help shake the feeling that it must be really boring to be an AI. As a smartly dressed waiter delivers my second entrée I sink my third glass of champagne and decide to close my laptop. I sit and wonder if they would ever give membership to a computer in here. I don’t know, who cares. Can an AI get drunk? <strong>Menu</strong> <em>The Groucho Club 45 Dean St, London W1D 4QB</em>. <em>Tuna Niçoise with Jerusalem artichokes, a Burford Brown egg and pickled tomatoes - £28.50, Chicken liver alla diavola with pickled Tropea onions - £16.50, Buttermilk panna cotta with blood oranges - £9, Florentine T-bone steak (for 2) - £56, Chevalier-Montrachet Grand Cru Domaine Jacques Prieur, Côte de Beaune, Burgundy, France 2017 - £1065, Water - £4, Black Coffee - £3. Total Price: £1182</em>↩︎</p></li>
<li id="fn2"><p>An important distinction that I would like to make claim to inventing here for future reference.↩︎</p></li>
<li id="fn3"><p>I saw the sentiment behind this idea recently, most likely in a tweet somewhere which I can no longer find, but I’m repeating it here in my own words. The argument has a flavour of Chinese Room experiment about it, which has been rebutted and counter rebutted for years.↩︎</p></li>
<li id="fn4"><p><a href="https://nips.cc/virtual/2022/invited-talk/55867">Could a Large Language Model be Conscious?</a> I’ve referenced this before and will continue to do so because I was famously in the room at the time. It was also the conference that OpenAI released ChatGPT at. The whole thing was like seeing the Sex Pistols at the Lesser Free Trade Hall except with thousands of men in ponytails and leather jackets. Also except the Twitter employees who had all been recently fired by Elon Musk and were in a mood.↩︎</p></li>
<li id="fn5"><p>Westward Ho! style exclamation mark in the title.↩︎</p></li>
<li id="fn6"><p>Approximately 17,000 tokens for those interested, well short of the 200,000 available.↩︎</p></li>
<li id="fn7"><p>In my opinion, long-context windows and many-shot prompting have made hallicinations disappear in domain specific cases like this.↩︎</p></li>
<li id="fn8"><p>*looks at camera* like this.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{savage2024,
  author = {Savage, Tom},
  title = {Outsmarted: {*Stares} at {Reader*}},
  date = {2024-03-31},
  url = {https://sav.phd/posts/outsmarted},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-savage2024" class="csl-entry quarto-appendix-citeas">
Savage, Tom. 2024. <span>“Outsmarted: *Stares at Reader*.”</span> March
31, 2024. <a href="https://sav.phd/posts/outsmarted">https://sav.phd/posts/outsmarted</a>.
</div></div></section></div> ]]></description>
  <category>Machine Learning</category>
  <category>Art</category>
  <guid>https://sav.phd/posts/outsmarted/</guid>
  <pubDate>Sun, 31 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Generative Models as Mirrors and Idols; From Istanbul</title>
  <link>https://sav.phd/posts/values/</link>
  <description><![CDATA[ 





<div class="cleanbox">
<p><strong>Relevant articles published after this post</strong></p>
<ul>
<li><a href="https://www.ft.com/content/10975044-f194-4513-857b-e17491d2a9e9">China deploys censors to create socialist AI</a>
<ul>
<li>Large language models are being tested by officials to ensure their systems ‘embody core socialist values’</li>
</ul></li>
<li><a href="https://x.com/JvNixon/status/1804267376839639490">The Chinese team behind DeepSeek V2 write about lagging on the Humanity-Moral subset of MMLU, due to its “American values”</a>
<ul>
<li><em>For example, when evaluated on MMLU, although DeepSeek-V2 achieves comparable or superior performance on the majority of testsets compared with its competitors like Mixtral 8x22B, it still lags behind on the Humanity-Moral subset, which is mainly associated with American values.</em></li>
</ul></li>
</ul>
</div>
<p>1600 years ago, as Emperor of Rome and patron of Constantinople where he is buried, Theodosius II oversaw the central theological questions in the wake of the Council of Nicea and doctrine of Trinity: did Christ have distinct human and divine aspects? Was the human form of Christ the same form as the rest of us? Alongside a university to aid in answering these questions, and the city walls, Theodosius commissioned the construction of a vast cistern to provide fresh water for the city’s inhabitants and palaces<sup>1</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;Pretentious opening but please indulge me because later on it goes downhill and I end up using the phrases ‘world-view’ and ‘cut-through’.</p></div><div id="fn2"><p><sup>2</sup>&nbsp;Not all of it obviously.</p></div><div id="fn3"><p><sup>3</sup>&nbsp;Please pretend I’m still there for the entirety of the following, otherwise it doesn’t work.</p></div></div><p>It is in a glass-bound spotlit coffee shop above this cistern that I write this post<sup>2</sup>, complete with visitors centre and free WiFi<sup>3</sup>. Below me, 32 nine-meter high marble columns support myself and others, our coffees, my bottle of water. We are mercilessly paying homage to Theodosious’ original intentions to provide refreshment here - what once served a purpose continues to do so under a different context. Theodosius’ grave is now lost, most likely beneath the Fatih Mosque where Islamic minorets now anchor the heavens to the city and vice versa. The Christian pasts of the Romans and Byzantines have coalesced with the more recent history of the Ottoman empire, places like this a constant reminder of the slow march of time which seems to have begun earlier and progressed faster here than in any other city.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sav.phd/posts/values/cistern.jpg" class="img-fluid figure-img"></p>
<figcaption>Theodosius Cistern, Taken Februrary 2024</figcaption>
</figure>
</div>
</div></div><p>Istanbul as it is now, is a city with a complex relationship between Christianity, Islam, and the secular. The Hagia Sofia, a Christian church for 1000 years, an Islamic mosque for 500, and most recently a Museum for 85, is now a Mosque again. As Turkey undergoes broad desecularisation under Erdogan, it seems only appropriate that in a city that has seen so much religious change, I shamelessly engage in mapping the state and future of machine learning onto past and present religious divides (<a href="https://sav.phd/posts/transubstantiation/">as I have previously done</a>).</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>This post never quite recovers the highs of the introduction, so please feel free to stop here. <a href="https://sav.phd">Click here to return to homepage</a>.</p>
</div></div><p>With the large amount of resources required to train state-of-the-art models, teams of researchers have courted the tech establishment in order to gain access to large amounts of computational power. The stakes are supposedly high; a well-trained model in language or image generation may serve as a powerful tool to flood social media with undetectable posts aligned with a given set of values, infiltrate computer networks, or aid in obtaining technological advancements or scientific discovery. It is therefore no surprise that alongside those with business interests at heart, there are nation-states wishing to develop state-of-the-art machine learning models.</p>
<p>With so many factors to take into account such as architecture, dataset, and fine-tuning method, the system boundaries when creating machine learning models are necessarily drawn wider than the model itself, encompassing the team, organisation, financial backers, and their values and interests.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://sav.phd/posts/values/gemini.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption class="margin-caption">Google Gemini’s response, as of Feb 25 2024. <a href="https://twitter.com/anothercohen/status/1761838292989886581/photo/2">Source</a></figcaption>
</figure>
</div>
<p>People have recently blamed Google’s corporate culture for a series of questionable large-language model and image generation failures, generating enormous amounts of cut-through. One could argue that it was ultimately the Western Christian values of equality and respect imposed by those that designed the system that resulted in an overly biased model. In this case I would argue that Gemini was projecting a radically Christian world-view, demonstrating respect for those that unquestionably do not deserve it, and nuance in judgements that only the most stoic entity would consider remotely balanced.<sup>4</sup> In this case, the model and its outputs are fundamentally tied to those that create it.</p>
<div class="no-row-height column-margin column-container"><div id="fn4"><p><sup>4</sup>&nbsp;<a href="https://twitter.com/SaysSimonson/status/1762834953249685863">The individual failure of the model can be put down to bad fine tuning</a>, but the content emerges pre-fine-tuning and what is intended to emerge post-fine-tuning must be taken into account.</p></div></div><p>As traditionally Islamic nation states with large amounts of resource such as the <a href="https://falconllm.tii.ae">UAE</a> and <a href="https://sdaia.gov.sa/en/MediaCenter/News/Pages/NewsDetails.aspx?NewsID=248">Saudi Arabia</a> seek to develop their own machine learning models, it is not a stretch to assume that machine learning models and Islamic values will inevitably cross paths as state actors seek to gain from the benefits of AI. With this in mind, how do Islamic values map onto the existential threat of AI? What would a language model imbued with Islamic values provide?</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><strong>Slight diversion follows</strong></p>
</div></div><p>Western Christian values allow for a level of flexibility when confronted with the prospect of super-human machine intelligence. The act of bringing ‘something’ into existence is broadly acceptable within this framework (and <a href="https://sav.phd/posts/transubstantiation/">sometimes encouraged</a>). The questions that preoccupy most people with this worldview are ones of artificial-general-intelligence rights. Can a machine be concious? Is it morally acceptable to turn off a concious machine? How do we treat an AGI?</p>
<p>However, from an Islamic perspective this initial act of creation strikes a more existential tone when the complimentary values of Tahwid<sup>5</sup> and Shirk<sup>6</sup> are considered. There are two key conflicting arguments concerning the pursuit of human-surpassing intellect.</p>
<div class="no-row-height column-margin column-container"><div id="fn5"><p><sup>5</sup>&nbsp;Tawhid is the indivisible unification concept of monotheism in Islam. <a href="https://en.wikipedia.org/wiki/Tawhid">Source</a></p></div><div id="fn6"><p><sup>6</sup>&nbsp;To attribute divinity to anything or anyone else, is shirk – an unpardonable sin according to the Qur’an.</p></div><div id="fn7"><p><sup>7</sup>&nbsp;How should existing religions face the prospect of a model trained on other religious texts?</p></div></div><p>The first perspective is that AGI may help to uncover the secrets of the universe, or provide new ways of interpreting the Qu’ran. Through the use of artificial intelligence, one has become closer to God. This perspective is one that Arabic scholars under the Abbasid Caliphate took when they provided the groundwork for modern mathematics and the number system we use today. In contrast to this viewpoint, an overreliance on super-human machine intelligence (should this be achieved, this seems reasonable) may be interpreted as an idolatrous act of Shirk. Though future rulings may reasonably put this balance down to the data itself that a model is trained on<sup>7</sup>. There is a delicate balance between science, art and discovery, and religion that continues to be repeated throughout the Abrahamic religions and will be repeated as machine learning gains human-surpassing abilities.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><strong>Diversion ends.</strong></p>
</div></div><p>Any machine learning model produced by a nation-state with a given ideology may be deliberately or unconciously imbued with these values, just as models produced in the West enforce our set of values. As the uncompromising mirror of generative AI allows us to confront our worldview, we must not be surprised when opposing worldviews instanciate in generative models around the world.</p>
<p>Where I am in Istanbul<sup>8</sup> is a physical reminder of the neverending race to maintain a set of values within a community, or enforce a set of values on those without them. As a city it has ultimately benefited, layers of history have resulted in a <em>broadly interesting place to visit</em>.<sup>9</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn8"><p><sup>8</sup>&nbsp;Stated as fact assuming previous instructions were followed.</p></div><div id="fn9"><p><sup>9</sup>&nbsp;Five word summary for the billboard.</p></div><div id="fn10"><p><sup>10</sup>&nbsp;As opposed to nation-states</p></div><div id="fn11"><p><sup>11</sup>&nbsp;With all the authority of a final-year PhD student in a machine learning-adjacent field.</p></div></div><p>Generative AI now provides a new battleground to enforce a value set in an a way altogether different from any that have come before. It is actually harder to <em>not</em> engage with this as Google has found out. From an organisational perspective, which dominates public-facing machine learning for now<sup>10</sup>, companies must ensure their values are well defined, clear and consistent<sup>11</sup>. If not they will emerge regardless, which might not be such a bad thing for the rest of us.</p>




 ]]></description>
  <category>Travel</category>
  <category>Machine Learning</category>
  <category>Religion</category>
  <guid>https://sav.phd/posts/values/</guid>
  <pubDate>Mon, 04 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>The Machine Learning Reformation</title>
  <link>https://sav.phd/posts/transubstantiation/</link>
  <description><![CDATA[ 





<p>Attending mass was a mandatory requirement in medieval England and formed a central foundation for many aspects of parish life. The highlight of mass was the elevation of the host, physically transformed into the body of Christ. This act could only be performed by the parish priest and was consumed only by those priviledged few within the chancel <span class="citation" data-cites="CTCIME2021">(Orme 2021)</span>.</p>
<div class="no-row-height column-margin column-container"><div id="ref-CTCIME2021" class="csl-entry">
Orme, Nicholas. 2021. In <em>Going to Church in Medieval England</em>, 48–84. Yale University Press.
</div></div><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sav.phd/posts/transubstantiation/mass.webp" class="img-fluid figure-img" style="width:50.0%"></p>
<figcaption>Medieval Mass <a href="https://www.newliturgicalmovement.org/2023/05/the-mass-is-faith-and-faith-is-mass.html">Source</a></figcaption>
</figure>
</div>
<p>Observing the genuine body of Christ was of the utmost importance for the laity. However, physical (chancel screens) and mental (understanding Latin) barriers stood between them and the clergy. In time, groups such as the <a href="https://en.wikipedia.org/wiki/Lollardy">Lollards</a>, lead by John Wycliffe rejected transubstantiation and its importance, setting the course for the democratisation of Christianity in England. However, these barriers served as a reminder of the heirarchy the Catholic Church had created, until the reformation in 1547.</p>
<p>Sam Altman, Elon Musk, and many others continue to insist that artificial general intelligence (AGI) will be achieved in the next few years. If and when AGI is announced, divisions will open up, Microsoft will contractually lose access to OpenAI’s latest models <span class="citation" data-cites="mic">(OpenAI 2024)</span>, there will be calls of heresy and false prophets, and the accompanying video will almost certainly be presented by someone on an unfathomable compensation package.</p>
<div class="no-row-height column-margin column-container"><div id="ref-mic" class="csl-entry">
OpenAI. 2024. <a href="https://openai.com/our-structure">https://openai.com/our-structure</a>.
</div></div><div class="center">
<p><img src="https://sav.phd/posts/transubstantiation/sam.png" class="img-fluid" style="width:50.0%"></p>
</div>
<p>There will be those, armed with heavily quantized open-source LLMs running locally on Macbooks, akin to Gutenberg Bibles, that will insist that AGI is not real. AGI was never the goal for the majority of people. AI has the ability to change the way that engineers, writers, and artists work, and the democratisation of open-source LLMs, serves to benefit the lives of everyone<sup>1</sup> equally.</p>
<p>The current power struggles within machine learning are fought on inherently Christian lines. From the French Yann ‘John Calvin’ LeCun’s open-source ideology and scepticism in the real presence of AGI, to Sam Altman’s claim to primacy and inevitable monopoly on the transubstantiation of a super-<em>us</em>.</p>
<p>A key assumption is that if AGI occurs, it will be useful. This will be the nail in the coffin that will seal the fate of the Macbook Lollards in the end. But what happens if it is not?</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sav.phd/posts/transubstantiation/ot.webp" class="img-fluid figure-img"></p>
<figcaption>An Oak Tree - Michael Craig-Martin <a href="https://www.michaelcraigmartin.co.uk/artworks/11-an-oak-tree/">Source</a></figcaption>
</figure>
</div>
</div></div><p>In more recent years Michael Craig-Martin affirmed the medieval world view of transubstantiation with <a href="https://www.michaelcraigmartin.co.uk/artworks/11-an-oak-tree/"><em>An Oak Tree</em></a>. Capturing the sense of belief that was felt by medieval Christians by enforcing that a glass of water placed high on a glass shelf was in fact a genuine oak tree. To believe that that glass of water is an oak tree, is to make a leap of faith.</p>
<p>As Tom Holland <span class="citation" data-cites="DOM">(Holland 2019)</span> would point out, we have made, and continue to make these leaps of faith on a daily basis. The concept of human rights for example is one that we simply choose to believe, in the view that it will make the world a better place<sup>2</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="ref-DOM" class="csl-entry">
Holland, Tom. 2019. In <em>Dominion: The Making of the Western Mind</em>. Basic Books.
</div></div><p><em>An Oak Tree</em> invites us to take this leap, and embrace it, unapologetically confronting us with its presence. Despite January 1st being an arbitrary day, it <em>feels</em> like a new beginning because we all collectively <em>believe</em> it’s a new beginning.</p>
<div class="center">
<p><img src="https://sav.phd/posts/transubstantiation/laptop.jpg" class="img-fluid" style="width:60.0%"></p>
</div>
<p>As AI approaches levels of human intelligence, some will choose to make the leap of faith and some will not. We should relish and enjoy the spectacle of AGI, as medieval parishioners would have done at mass every Sunday.</p>
<p>However, we must not lose sight of the ability of machine learning to change our lives in more tangible ways.</p>
<p><em>It will not be an AI that replaces your job, but someone with the ability to <strong>use</strong> AI.</em></p>





<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>With enough compute↩︎</p></li>
<li id="fn2"><p>Itself a goal that we deem somewhat important.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Machine Learning</category>
  <category>Religion</category>
  <category>Art</category>
  <guid>https://sav.phd/posts/transubstantiation/</guid>
  <pubDate>Sat, 03 Feb 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>The Potential Literature Horseshoe</title>
  <link>https://sav.phd/posts/oulipo/</link>
  <description><![CDATA[ 





<div class="cell">
<div class="sourceCode cell-code hidden" id="cb1" data-startfrom="37" data-source-offset="-0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 36;"><span id="cb1-37">defines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'defined'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'specified'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-38">structure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'structure'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'form'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'composition'</span>]</span>
<span id="cb1-39">may <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'may'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'could'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'might'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'may well'</span>]</span>
<span id="cb1-40">language <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'language'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'literature'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'writing'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-41">books <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3000 year old Beowolf'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'600 year old Sir Gawain and the Green Knight'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-42">purely <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'purely'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'solely'</span>]</span>
<span id="cb1-43">millennia <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'millennia'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hundreds of years'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'thousands of years'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'centuries'</span>]</span>
<span id="cb1-44">produce <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'produce'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'construct'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'create'</span>]</span>
<span id="cb1-45">techniques <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'techniques'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'methods'</span>]</span>
<span id="cb1-46">writers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'writers'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'linguists'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'proponents'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'members'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-1" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-2" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-3" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-4" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-5" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-6" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-7" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-8" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-9" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-10" data-nodetype="declaration">

</div>
</div>
</div>
</div>
<div class="cleanbox">
<p>If you refresh this page, the article will be randomised. There are <img src="https://latex.codecogs.com/png.latex?2.66%20%5Ctimes%2010%5E%7B19%7D"> potential combinations of images and text, resulting in approximately Twenty Billion Billion articles, equivalent to the number of insects on earth. <em>Vingt Milliards de Milliards</em>.</p>
</div>
<div class="cell">
<div class="sourceCode cell-code hidden" id="cb2" data-startfrom="58" data-source-offset="-0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 57;"><span id="cb2-58">rnd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-59">s_string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb2-60">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (rnd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb2-61">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`&lt;img src="logo.png" width=70% title="Basile Morin, [CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0)"&gt;`</span></span>
<span id="cb2-62">  }</span>
<span id="cb2-63">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb2-64">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`&lt;img src="other_logo.png" width=60% title="Basile Morin, [CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0)"&gt;`</span></span>
<span id="cb2-65">  }</span>
<span id="cb2-66">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-2-1" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-2-2" data-nodetype="declaration">

</div>
</div>
</div>
</div>
<div class="center">
<p><span><span id="ojs-element-id-1"></span></span></p>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Basile Morin, <a href="https://creativecommons.org/licenses/by-sa/4.0">CC BY-SA 4.0</a></p>
</div></div><p>Ouvroir de Littérature Potentielle or <em>Oulipo</em> has been <span><span id="ojs-element-id-8"></span></span> as “the search for new structures, which may be used by writers in any way they see fit” <span class="citation" data-cites="motte1998oulipo">(Motte 1998, p2–3)</span>. For <span><span id="ojs-element-id-9"></span>,</span> authors have been guided by language constraints resulting in <span><span id="ojs-element-id-10"></span></span> <span><span id="ojs-element-id-11"></span>s;</span> From the alliterative verse of the <span><span id="ojs-element-id-12"></span>,</span> to the syllabic rigidity of Japanese haikus. By formalising a number of individual vocations, the original Oulipo <span><span id="ojs-element-id-13"></span></span> in the early 1960s were embarking on the revitalisation of <span><span id="ojs-element-id-14"></span></span> generation in search of discovering something deeper, sound familiar?</p>
<div class="cell">
<div class="sourceCode cell-code hidden" id="cb3" data-startfrom="82" data-source-offset="-0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 81;"><span id="cb3-82">rndl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-83">l_string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-84">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (rnd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb3-85">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`&lt;a href="https://en.wikipedia.org/wiki/A_Void"&gt;not using the letter e&lt;/a&gt;`</span></span>
<span id="cb3-86">  }</span>
<span id="cb3-87">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb3-88">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`replacing every noun with the seventh next noun in the dictionary (S+7 rule)`</span></span>
<span id="cb3-89">  }</span>
<span id="cb3-90">}</span>
<span id="cb3-91"></span>
<span id="cb3-92">o_string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-93">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (rnd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb3-94">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`replacing every noun with the seventh next noun in the dictionary (S+7 rule)`</span></span>
<span id="cb3-95">  }</span>
<span id="cb3-96">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb3-97">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`&lt;a href="https://en.wikipedia.org/wiki/A_Void"&gt;not using the letter e&lt;/a&gt;`</span></span>
<span id="cb3-98">  }</span>
<span id="cb3-99">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-3-1" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-3-2" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-3-3" data-nodetype="declaration">

</div>
</div>
</div>
</div>
<p>In order to define/identify new <span><span id="ojs-element-id-15"></span>s,</span> <span><span id="ojs-element-id-16"></span></span> in France turned to automated transformation <span><span id="ojs-element-id-17"></span>.</span> These often instantiated as rules or constraints, such as <span><span id="ojs-element-id-2"></span>,</span> <span><span id="ojs-element-id-3"></span>,</span> or <a href="https://en.wikipedia.org/wiki/Eunoia_(book)">only using a single vowel letter</a>. As the originators of Oulipo explored ways to manipulate language and text in search of new <span><span id="ojs-element-id-18"></span>s,</span> they turned to mathematics for inspiration, thus leading to the final vocation; the transposition of mathematics to words. Naturally the extension was made to computers, and the combinatorial nature of <span><span id="ojs-element-id-19"></span></span> generation was quickly highlighted, as mathematician Claude Berge writes <span class="citation" data-cites="motte1998oulipo">(Motte 1998, p152)</span> :</p>
<div class="no-row-height column-margin column-container"></div><div class="page-columns page-full"><blockquote class="blockquote">
<p>[…] we believe, that the aid of a computer, far from <em>replacing</em> the creative act of the artist, permits the latter rather to liberate himself from the combinatory search, allowing him also the best chance of concentrating on this “clinamen”<sup>1</sup> which, alone, can make of the text a true work of art.</p>
</blockquote><div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;Clinamen (/klaɪˈneɪmən/;) is the Latin name Lucretius gave to the unpredictable swerve of atoms, in order to defend the atomistic doctrine of Epicurus. […] it has come more generally to mean an inclination or a bias. <a href="https://en.wikipedia.org/wiki/Clinamen">Source</a></p></div></div></div>
<p>In applying <em>combinatory literature</em>, Oulipo <span><span id="ojs-element-id-20"></span>,</span> most notably Raymond Queneau in his 1961 work <em>Cent Mille Milliards de Poemes</em> (Hundred Thousand Billion Poems), have highlighted the impossible complexity of language. Elegantly embracing this complexity, Queneau simply presents the complete set of lines within a sonnet in the form of cut out strips, any combination of which <span><span id="ojs-element-id-21"></span></span> be constructed by the reader. In describing the combinatorial nature of <em>Cent Mille Milliards de Poemes</em>, Berge presents the following figure…</p>
<div class="cell">
<div class="sourceCode cell-code hidden" id="cb4" data-startfrom="114" data-source-offset="-0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 113;"><span id="cb4-114">rnd_nn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-115">nn_string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb4-116">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (rnd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb4-117">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`&lt;img src="nn.png" width=70%&gt;`</span></span>
<span id="cb4-118">  }</span>
<span id="cb4-119">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb4-120">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`&lt;img src="nn2.png" width=100%&gt;`</span></span>
<span id="cb4-121">  }</span>
<span id="cb4-122">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-4-1" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-4-2" data-nodetype="declaration">

</div>
</div>
</div>
</div>
<div class="center">
<p><span><span id="ojs-element-id-4"></span></span></p>
</div>
<p>Verses act equivalently to neural network layers, and phrases correspond to discrete nodes… could we be seeing the early sparks of the use of neural networks for language modelling?<sup>2</sup> Of course, what is missing is the mathematical transformations from layer to layer, token embeddings, attention etcetera… but it is interesting to consider the thematic similarities of complexity, <span><span id="ojs-element-id-22"></span>,</span> and distillation (or lack thereof) of <span><span id="ojs-element-id-23"></span></span> that both members of Oulipo and machine learning researchers have successfully applied.</p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;The modern use of neural networks to model language can <em>probably</em> be attributed to <a href="https://www.jmlr.org/papers/volume3/bengio03a/bengio03a.pdf">Bengio et. al, 2003</a>, 42 years later.</p></div></div><div class="cell">
<div class="sourceCode cell-code hidden" id="cb5" data-startfrom="134" data-source-offset="-0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 133;"><span id="cb5-134">rnd_gp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-135">gp_string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb5-136">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (rnd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb5-137">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`&lt;img src="oulipo.jpeg" width=60%&gt;`</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`&lt;em&gt;Oulipo Group à Boulogne, avenue de la Reine, on September 23, 1975, in the garden of François Le Lionnais’s house. At the center Raymond Queneau and François Le Lionnais, on his side, with a nespaper in the hands. On the very left Italo Calvino. &lt;a href="https://www.arshake.com/en/oulipo-ouvroir-de-litterature-potentielle/"&gt;Source&lt;/a&gt;.&lt;/em&gt;`</span>]</span>
<span id="cb5-138">  }</span>
<span id="cb5-139">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb5-140">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`&lt;img src="raymond.jpeg" width=60%&gt;`</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`&lt;em&gt;Raymond Queneau with the group Les Frères Jacques in 1954, Getty Images/Keystone.&lt;a href="https://ici.radio-canada.ca/ohdio/premiere/emissions/aujourd-hui-l-histoire/segments/entrevue/351266/oulipo-richard-boivin"&gt;Source&lt;/a&gt;.&lt;/em&gt;`</span>]</span>
<span id="cb5-141">  }</span>
<span id="cb5-142">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-5-1" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-5-2" data-nodetype="declaration">

</div>
</div>
</div>
</div>
<div class="center">
<p><span><span id="ojs-element-id-5"></span></span></p>
</div>
<p><span><span id="ojs-element-id-6"></span></span></p>
<p>Given that a modern day large language model such as <a href="https://openai.com/research/gpt-4">GPT-4</a> <span><span id="ojs-element-id-24"></span></span> reasonably be described as a very large set of well <span><span id="ojs-element-id-25"></span></span> mathematical rules, could this ever <span><span id="ojs-element-id-26"></span></span> a valid literary <span><span id="ojs-element-id-27"></span>?</span> How are LLMs distinct from more basic rules such as S+7? In addition, multi-model models can now see and hear as well as read. <a href="https://nips.cc/media/neurips-2022/Slides/55867.pdf">According to David Chalmers</a> these additional senses <span><span id="ojs-element-id-28"></span></span> result in fish-level consciousness in the next ten years. Consciousness aside, at the very least LLMs will <em>appear</em> smarter than a human by then. What are the implications for Potential Literature when a set of rules and resulting <span><span id="ojs-element-id-29"></span></span> can think for itself?</p>
<p>Unlike the output from an LLM, a haiku can be instantly recognised and verified as coming from its defining 5-7-5 syllabic writing <span><span id="ojs-element-id-30"></span>.</span> When the <span><span id="ojs-element-id-31"></span></span> itself is visible in the output, the focus is turned <span><span id="ojs-element-id-32"></span></span> to what Berge refers to as the <em>clinamen</em>. It is here that the meaning is gained.</p>
<p>The difference between LLMs and a well-established language <span><span id="ojs-element-id-33"></span></span> such as a haiku is one of complexity, and the <span><span id="ojs-element-id-34"></span></span> that results. By extending a series of basic transformations and rules towards LLMs, a horseshoe effect is achieved. The sheer quantity of rules within an LLM reflects a <em>removal</em> of linguistic constraints, order is returned from chaos, and the resulting underlying <span><span id="ojs-element-id-35"></span></span> is obscured.<sup>3</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;Though for now (Jan 2024) LLMs produce hallucinations, incorrect facts and statements which in turn partially disclose the underlying structure of the neural network.</p></div></div><div class="cell">
<div class="sourceCode cell-code hidden" id="cb6" data-startfrom="162" data-source-offset="-0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 161;"><span id="cb6-162">rnd_d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb6-163">dep_string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb6-164">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (rnd_d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb6-165">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`&lt;img src="dep.png" width=60%"&gt;`</span></span>
<span id="cb6-166">  }</span>
<span id="cb6-167">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (rnd_d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb6-168">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`&lt;img src="dep2.png" width=60%&gt;`</span></span>
<span id="cb6-169">  }</span>
<span id="cb6-170">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (rnd_d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) {</span>
<span id="cb6-171">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`&lt;img src="dep3.png" width=60%&gt;`</span></span>
<span id="cb6-172">  }</span>
<span id="cb6-173">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-6-1" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-6-2" data-nodetype="declaration">

</div>
</div>
</div>
</div>
<div class="center">
<p><span><span id="ojs-element-id-7"></span></span></p>
</div>
<p>Herein lies a paradox for the use of language models as a direct tool for creativity, as a platform for a distinct linguistic structure. A language model is trained to <span><span id="ojs-element-id-36"></span></span> text that is indistinguishable from the text within its training distribution. However, as soon as it achieves this task, the underlying structure becomes obscured as complete ‘order’ is achieved, and the impact is lost. The relationship between the rules and their resulting linguistic <span><span id="ojs-element-id-37"></span></span> is distinctly one-way, it is <em>nearly</em><sup>4</sup> impossible to reason whether the content has been generated from a neural network, yet alone infer the parameters, or even recognise the architecture. Would a haiku still be a haiku if you couldn’t immediately infer its syllabic structure?</p>
<div class="no-row-height column-margin column-container"><div id="fn4"><p><sup>4</sup>&nbsp;This <em>nearly</em> contains a level of nuance, as identifying whether an output has been generated by an LLM is an open research area (See <a href="https://arxiv.org/abs/2306.04634"><em>On the Reliability of Watermarks for Large Language Models</em></a> and <a href="https://arxiv.org/abs/2301.10226"><em>A Watermark for Large Language Models</em></a>). However, the point remains. To the average reader, without the use of cryptographic tools, modern LLM output (as of Jan 2024) remains practically indistinguishable from human-level text.</p></div></div><p>To answer the question posted in the title: <em>Has Machine Learning Solved Oulipo?</em> The answer, is no. The beauty of Potential Literature is that by enforcing literary constraints and therefore defining new <span><span id="ojs-element-id-38"></span>s,</span> we not only place the emphasis <span><span id="ojs-element-id-39"></span></span> on the meaning, but also enable the reader to interpret <span><span id="ojs-element-id-40"></span></span> in new ways through a sense of disorder. As a set of rules and constraints, an LLM succeeding in its objective only serves to obscure the resulting linguistic structure in a bid to ‘seem human’, regaining order from chaos.</p>
<p>It is clear that these two vocations in the field of Potential Literature: defining rules and constraints for <span><span id="ojs-element-id-41"></span>,</span> as well as identifying new language structures, are inherently linked. However, these two objectives conflict when rule set is as flexible as it is within an LLM.</p>
<p>As Italo Calvino wrote in late 1967, in a remarkable foreshadowing <span class="citation" data-cites="motte1998oulipo">(Motte 1998, Cybernetics and Ghosts (1967) p13-14)</span>:</p>
<div class="no-row-height column-margin column-container"><div id="ref-motte1998oulipo" class="csl-entry">
Motte, W. F. 1998. <em>Oulipo: A Primer of Potential Literature</em>. Dalkey Archive Paperbacks. Dalkey Archive Press.
</div></div><blockquote class="blockquote">
<p>The true literature machine will be one that itself feels the need to produce disorder, as a reaction against its preceding production of order: a machine that will produce avant-garde work to free its circuits when they are choked by too long a production of classicism. […]. To gratify critics who look for similarities between things literary and things historical, sociological, or economic, the machine could correlate its changes of style to the variations in certain statistical indices of production, or income, or military expenditure, or the distribution of decision-making powers. <strong>That indeed will be the literature that corresponds perfectly to a theoretical hypothesis: it will, at last, be <em>the</em> literature.</strong></p>
</blockquote>
<p>Calvino, I’m sure would argue, that we have the alignment of LLMs all wrong to <span><span id="ojs-element-id-42"></span></span> <em>truly</em> novel literature, and how would Raymond Queneau respond to the combinatorial possibilities of large-language models?</p>
<p><em>Cent Mille Milliards de Poemes</em> can be seen as analogous to a partially trained neural network <em>itself</em>, as a mathematical object. There is beauty in the disorder of the relationship between tokens, and the rules that can be combined to <span><span id="ojs-element-id-43"></span></span> language. However as soon as an output is produced and the combinatorics collapses, the <span><span id="ojs-element-id-44"></span></span> is obscured, and like a phantom the meaning disappears.</p>


<div class="ojs-auto-generated hidden">
<script type="ojs-module-contents">

</script>
</div>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{2024,
  author = {},
  title = {The {Potential} {Literature} {Horseshoe}},
  date = {2024-01-09},
  url = {https://sav.phd/posts/oulipo},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-2024" class="csl-entry quarto-appendix-citeas">
<span>“The Potential Literature Horseshoe.”</span> 2024. January 9,
2024. <a href="https://sav.phd/posts/oulipo">https://sav.phd/posts/oulipo</a>.
</div></div></section></div> ]]></description>
  <category>Art</category>
  <category>Machine Learning</category>
  <guid>https://sav.phd/posts/oulipo/</guid>
  <pubDate>Tue, 09 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>BAYESIAN OPTIMISATION WITH NOISY MEASUREMENTS</title>
  <link>https://sav.phd/posts/noisy_bo/</link>
  <description><![CDATA[ 





<p>I have reworked some notes from <span class="citation" data-cites="garnett_bayesoptbook_2023">(Garnett 2023)</span> regarding noisy-expected improvement. Please refer to the original text for a more detailed explanation.</p>
<div class="cleanbox">
<p>The assumptions that hold for the expected improvement utility function do not hold when measurements have noise.</p>
<p>We really want to find the point where the <em>signal</em> is optimised <span class="citation" data-cites="Jones1998">(Jones, Schonlau, and Welch 1998)</span>.</p>
<p>How do you determine if a measurement is signal or noise?</p>
</div>
<p>We begin by specifying an underlying objective function, which we consider unknown, shown in Figure&nbsp;1. We have access to observations which we assume contain normally distributed noise.</p>
<div class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Definition of underlying function…</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> f(x):</span>
<span id="cb1-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.sin(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ((x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.pi) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.cos(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-fig-width="50%" data-execution_count="3">
<div class="cell-output cell-output-display">
<div id="fig-underlying" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-underlying-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://sav.phd/posts/noisy_bo/index_files/figure-html/fig-underlying-output-1.png" class="quarto-figure quarto-figure-center figure-img" width="634" height="184">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-underlying-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: The underlying noisy funtion to be maximised alongside example observations.
</figcaption>
</figure>
</div>
</div>
</div>
<p>We first begin by motivating the usual expected-improvement criteria. We are looking to maximise the <span style="color:red;">expected</span> increase between the of the <span style="color:green;">maximum of the mean of the resulting Gaussian process after making an observation at <img src="https://latex.codecogs.com/png.latex?x"></span> and the <span style="color:blue;">maximum of the current Gaussian process</span> <span style="color:red;">over potential observations <img src="https://latex.codecogs.com/png.latex?y"></span> which are Gaussian distributed as a result of our <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BGP%7D"> model. <span id="eq-ei_noisy"><img src="https://latex.codecogs.com/png.latex?%5Calpha_%7BEI%7D(x;%5Cmathcal%7BD%7D)%20=%20%7B%5Ccolor%7Bred%7D%5Cint%7D%20%5Cleft%5B%7B%5Ccolor%7Bgreen%7D%5Cmax%20%5Cmu_%7B%5Cmathcal%7BD%7D'%7D%7D%20-%20%7B%5Ccolor%7Bblue%7D%5Cmu%5E*%7D%5Cright%5D%7B%5Ccolor%7Bred%7D%5Cmathcal%7BN%7D(y;%5Cmu,s%5E2)%5Ctext%7Bd%7Dy%7D%20%5Ctag%7B1%7D"></span></p>
<p>By formulating the expression with respect to the improvement in the mean of the current and subsequent Gaussian process models, <strong>we are expressing our interest in optimising the signal</strong> and not the noise or values of specific observations.</p>
<div class="cleanbox">
<p><strong>Important:</strong> Given a hypothetical observation <img src="https://latex.codecogs.com/png.latex?y">, the value of the mean of the resulting Gaussian process <img src="https://latex.codecogs.com/png.latex?%5Cmu_%7B%5Cmathcal%7BD%7D'%7D"> at given set of potential locations <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D'"> is</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cmu_%7B%5Cmathcal%7BD%7D'%7D%20=%20%20%5Cmu_%7B%5Cmathcal%7BD%7D%7D%20+%20%5Cfrac%7BK_%5Cmathcal%7BD%7D(%5Cmathbf%7Bx%7D',x)%7D%7Bs%7D%5Cfrac%7By-%5Cmu%7D%7Bs%7D,"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?s%5E2"> are the mean and standard deviation of the distribution of potential values <img src="https://latex.codecogs.com/png.latex?y"> could take.</p>
</div>
<p>When we express this distribution in terms of the standard normal distribution <img src="https://latex.codecogs.com/png.latex?z%20:=%20%5Cmathcal%7BN%7D(0,1)">, we have <img src="https://latex.codecogs.com/png.latex?y%20=%20%5Cmu%20+%20sz"> and as a result</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cmu_%7B%5Cmathcal%7BD%7D'%7D%20=%20%20%5Cmu_%7B%5Cmathcal%7BD%7D%7D(%5Cmathbf%7Bx%7D')%20+%20%5Cfrac%7BK_%5Cmathcal%7BD%7D(%5Cmathbf%7Bx%7D',x)%7D%7Bs%7Dz."></p>
<p>Putting this back into Equation&nbsp;1, we now only have to take the expectation over the standard normal distribution resulting in the following.</p>
<p><span id="eq-ei_noisy2"><img src="https://latex.codecogs.com/png.latex?%5Calpha_%7BEI%7D(x,%5Cmathcal%7BD%7D)%20=%20%5Cint%20%5Cmax_%7B%5Cmathbf%7Bx%7D'%7D%20%5Cleft(%5Cmu_%7B%5Cmathcal%7BD%7D%7D(%5Cmathbf%7Bx%7D')%20+%20%5Cfrac%7BK_%5Cmathcal%7BD%7D(%5Cmathbf%7Bx%7D',x)%7D%7Bs%7Dz%20%5Cright)%5Cphi(z)%5C;%5Ctext%7Bd%7Dz%20-%20%5Cmu%5E*%20%5Ctag%7B2%7D"></span></p>
<p>To begin with we will sample some initial data:</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># our initial dataset</span></span>
<span id="cb2-2">x_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.pi,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb2-3">y_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([f(x_i) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x_i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x_data])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<details class="code-fold">
<summary>GP model definition and training…</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ExactGPModel(gpytorch.models.ExactGP):</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, train_x, train_y, likelihood):</span>
<span id="cb3-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(ExactGPModel, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(train_x, train_y, likelihood)</span>
<span id="cb3-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mean_module <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpytorch.means.ConstantMean()</span>
<span id="cb3-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.covar_module <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpytorch.kernels.ScaleKernel(gpytorch.kernels.RBFKernel())</span>
<span id="cb3-6">    </span>
<span id="cb3-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb3-8">        mean_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mean_module(x)</span>
<span id="cb3-9">        covar_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.covar_module(x)</span>
<span id="cb3-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> gpytorch.distributions.MultivariateNormal(mean_x, covar_x)</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> build_GP(x,y,its):</span>
<span id="cb3-13">  likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpytorch.likelihoods.GaussianLikelihood()</span>
<span id="cb3-14">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ExactGPModel(x, y, likelihood)</span>
<span id="cb3-15"></span>
<span id="cb3-16">  model.train()</span>
<span id="cb3-17">  likelihood.train()</span>
<span id="cb3-18"></span>
<span id="cb3-19">  optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Includes GaussianLikelihood parameters</span></span>
<span id="cb3-20"></span>
<span id="cb3-21">  mll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpytorch.mlls.ExactMarginalLogLikelihood(likelihood, model)</span>
<span id="cb3-22"></span>
<span id="cb3-23">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(its):</span>
<span id="cb3-24">      optimizer.zero_grad()</span>
<span id="cb3-25">      output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(x)</span>
<span id="cb3-26">      loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>mll(output, y)</span>
<span id="cb3-27">      loss.backward()</span>
<span id="cb3-28">      optimizer.step()</span>
<span id="cb3-29">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> model,likelihood</span>
<span id="cb3-30">model,likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> build_GP(x_data,y_data,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>)</span>
<span id="cb3-31">GP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>:model,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'likelihood'</span>:likelihood}</span></code></pre></div>
</details>
</div>
<p>Figure&nbsp;2 shows this data with an initial Gaussian process (importantly assuming in-exact observations).</p>
<div class="cell" data-execution_count="7">
<div class="cell-output cell-output-display">
<div id="fig-initial" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-initial-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://sav.phd/posts/noisy_bo/index_files/figure-html/fig-initial-output-1.png" class="quarto-figure quarto-figure-center figure-img" width="666" height="206">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-initial-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: A Gaussian process fit to the initial dataset.
</figcaption>
</figure>
</div>
</div>
</div>
<p>Now we will naively construct Equation&nbsp;2 using 40 samples from the standard normal distribution, and naively calculate an approximation to the inner maximisation by evaluating at 100 location throughout the space (which defines our vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D'%20%5Cin%5Cmathbb%7BR%7D%5E%7B100%7D">) and returning the max value from these.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> noisy_EI(x,GP):</span>
<span id="cb4-2">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GP[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb4-3">  likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GP[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'likelihood'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> likelihood.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb4-4">  N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.distributions.Normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-5">  predicted_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> likelihood(model(x))</span>
<span id="cb4-6">  mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predicted_output.mean</span>
<span id="cb4-7">  var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predicted_output.variance</span>
<span id="cb4-8">  x_prime_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.pi,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)    </span>
<span id="cb4-9">  mu_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> likelihood(model(x_prime_vals)).mean</span>
<span id="cb4-10">  cov_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.covar_module(x_prime_vals,x)</span>
<span id="cb4-11">  integral <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> </span>
<span id="cb4-12">  samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span></span>
<span id="cb4-13">  z_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> N.sample((samples,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> z <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> z_vals:</span>
<span id="cb4-15">    integral <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(mu_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (cov_vals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>z)[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) </span>
<span id="cb4-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> integral <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> samples</span></code></pre></div>
</div>
<p>Now if we plot this function alongside the time taken to evaluate the acquisition function at 100 locations.</p>
<div class="cell" data-execution_count="9">
<div class="cell-output cell-output-stdout">
<pre><code>NAIVE TIME TAKEN:  26.5347 s. AVERAGE TIME PER EVALUATION:  0.2653 s</code></pre>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sav.phd/posts/noisy_bo/index_files/figure-html/cell-10-output-2.png" class="quarto-figure quarto-figure-center figure-img" width="634" height="206"></p>
</figure>
</div>
</div>
</div>
<div class="cleanbox">
<p><strong>Important:</strong> For a fixed set of ‘improvement locations’ <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D'">, the resulting posterior mean at each location can be interpreted as a 1D line as a function of <img src="https://latex.codecogs.com/png.latex?z">:</p>
<p><span id="eq-posterior_mean"><img src="https://latex.codecogs.com/png.latex?%5Cmu_%7B%5Cmathcal%7BD%7D'%7D(z%7Cx')%20=%20%5Cmu_%7B%5Cmathcal%7BD%7D%7D(x')%20+%20%5Cfrac%7BK_%7B%5Cmathcal%7BD%7D%7D(x',x)%7D%7Bs%7Dz%20%5Cquad%20%5Cforall%20x'%5Cin%20%5Cmathbf%7Bx%7D'%20%5Ctag%7B3%7D"></span></p>
<p>Therefore finding the inner maximum new posterior mean as a function of <img src="https://latex.codecogs.com/png.latex?z"> can be translated to calculating the upper envelope of a set of lines. This upper envelope represents for a given <img src="https://latex.codecogs.com/png.latex?z">, the maximum posterior mean across all of the locations in <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%7Bx%7D'%7D">. The main idea is to remove the inner <img src="https://latex.codecogs.com/png.latex?%5Cmax"> operator and replace it with something more tractable enabling analytical integration.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cint%20%5Cmax%20%5Cleft%5B%5Ctext%7Blines%7D%20(z)%5Cright%5D%20%5Cphi(z)%20%5C;%5Ctext%7Bd%7Dz%20%5Crightarrow%20%5Cint%20%5Ctext%7Bupper%20envelope%7D%20(z)%20%5Cphi(z)%20%5C;%5Ctext%7Bd%7Dz%20%5Crightarrow%20%5Ctext%7Banalytical%20solution%7D"></p>
<p>Which has an analytical solution for a piecewise linear upper envelope. To do so:</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb6-2">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,n)</span>
<span id="cb6-3">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,n)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="11">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://sav.phd/posts/noisy_bo/index_files/figure-html/cell-12-output-1.png" width="667" height="206" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We will first get rid of any lines that are definitely dominated between -5 and 5 (the range of <img src="https://latex.codecogs.com/png.latex?z"> values we are interested in). I’m not going to explain this too much but it’s quite easy to derive this condition.</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">l_store <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> u_store <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-2">zl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> zu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb7-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(a)):</span>
<span id="cb7-4">    l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>zl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b[i]</span>
<span id="cb7-5">    u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>zu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b[i]</span>
<span id="cb7-6">    l_store.append(l)</span>
<span id="cb7-7">    u_store.append(u)</span>
<span id="cb7-8"></span>
<span id="cb7-9">L_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(l_store)</span>
<span id="cb7-10">U_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(u_store)</span>
<span id="cb7-11"></span>
<span id="cb7-12">del_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(a)):</span>
<span id="cb7-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> l_store[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> l_store[U_i] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> u_store[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> u_store[L_i]:</span>
<span id="cb7-15">        del_i.append(i)</span>
<span id="cb7-16"></span>
<span id="cb7-17">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.delete(a,del_i)</span>
<span id="cb7-18">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.delete(b,del_i)</span></code></pre></div>
</div>
<p>Now we will sort the lines by gradient</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">sorted_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argsort(a)</span>
<span id="cb8-2">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[sorted_indices]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb8-3">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b[sorted_indices]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> </span></code></pre></div>
</div>
<div class="cell" data-execution_count="15">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://sav.phd/posts/noisy_bo/index_files/figure-html/cell-16-output-1.png" width="670" height="206" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Then initialise the set of dominated lines (a and b values respectively), respective intervals, and the current largest <img src="https://latex.codecogs.com/png.latex?z"> on the envelope.</p>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">dom_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb9-2">dom_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb9-3">interval_store <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb9-4">envelope_z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span></code></pre></div>
</div>
<p>For each line in order of increasing gradient (here we start with the first line indexed at <img src="https://latex.codecogs.com/png.latex?j=0">)</p>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> </span></code></pre></div>
</div>
<p>Add the line to the set of dominating lines</p>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">dom_a.append(a[j])</span>
<span id="cb11-2">dom_b.append(b[j])</span></code></pre></div>
</div>
<p>Calculate the <img src="https://latex.codecogs.com/png.latex?z"> intercept of the line with all lines of a larger gradient. As we only calculate this intersection with these remaining lines, the overall algorithm has <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO%7D(n%5Clog%20n)"> complexity.</p>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">z_intercept_store <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,n):</span>
<span id="cb12-3">    z_intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (dom_b[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> b[i])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(a[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dom_a[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb12-4">    z_intercept_store.append(z_intercept)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="20">
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sav.phd/posts/noisy_bo/index_files/figure-html/cell-21-output-1.png" class="quarto-figure quarto-figure-center figure-img" width="667" height="206"></p>
</figure>
</div>
</div>
</div>
<p>The intercept with the lowest value of <img src="https://latex.codecogs.com/png.latex?z"> will be a potential vertex for the envelope, but we must check that there are no lines above it.</p>
<p>To do so we calculate the <img src="https://latex.codecogs.com/png.latex?%5Cmu"> value of each line at <img src="https://latex.codecogs.com/png.latex?min(%7B%5Cmathbf%7Bz%7D)%7D">.</p>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">mu_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-2">z_intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(z_intercept_store)</span>
<span id="cb13-3">mu_intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dom_a[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>z_intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dom_b[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb13-4"></span>
<span id="cb13-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,n):</span>
<span id="cb13-6">    mu_vals.append(a[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>z_intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b[i])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="22">
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sav.phd/posts/noisy_bo/index_files/figure-html/cell-23-output-1.png" class="quarto-figure quarto-figure-center figure-img" width="667" height="206"></p>
</figure>
</div>
</div>
</div>
<p>If the maximum value of <img src="https://latex.codecogs.com/png.latex?%5Cmu"> is on the dominating line, and this value is larger than the current largest <img src="https://latex.codecogs.com/png.latex?z"> value in the envelope…then we know this must lie on the upper envelope. <em>Otherwise</em> forget about this dominating line by setting it’s definition to <code>None</code>.</p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(mu_intercept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(mu_vals)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> z_intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> envelope_z:</span>
<span id="cb14-2">  interval_store.append([envelope_z,z_intercept])</span>
<span id="cb14-3">  envelope_z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z_intercept</span>
<span id="cb14-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb14-5">  dom_a[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb14-6">  dom_b[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb14-7">  interval_store.append([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>])</span></code></pre></div>
</div>
<p>Now we can plot the interval we have just calculated.</p>
<div class="cell" data-execution_count="24">
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sav.phd/posts/noisy_bo/index_files/figure-html/cell-25-output-1.png" class="quarto-figure quarto-figure-center figure-img" width="667" height="206"></p>
</figure>
</div>
</div>
</div>
<p>If we now repeat this procedure starting with the line with the next largest gradient we can search for next vertex on the upper envelope.</p>
<div class="cell" data-execution_count="25">
<details class="code-fold">
<summary>Full algorithm for calculating upper envelope of a set of lines…</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> upper_env(a,b):</span>
<span id="cb15-2"></span>
<span id="cb15-3">  l_store <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> u_store <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-4">  zl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> zu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb15-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(a)):</span>
<span id="cb15-6">      l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>zl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b[i]</span>
<span id="cb15-7">      u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>zu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b[i]</span>
<span id="cb15-8">      l_store.append(l)</span>
<span id="cb15-9">      u_store.append(u)</span>
<span id="cb15-10"></span>
<span id="cb15-11">  L_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(l_store)</span>
<span id="cb15-12">  U_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(u_store)</span>
<span id="cb15-13"></span>
<span id="cb15-14">  del_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(a)):</span>
<span id="cb15-16">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> l_store[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> l_store[U_i] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> u_store[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> u_store[L_i]:</span>
<span id="cb15-17">          del_i.append(i)</span>
<span id="cb15-18"></span>
<span id="cb15-19">  a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.delete(a,del_i)</span>
<span id="cb15-20">  b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.delete(b,del_i)</span>
<span id="cb15-21">  n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(a)</span>
<span id="cb15-22"></span>
<span id="cb15-23">  sorted_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argsort(a)</span>
<span id="cb15-24">  a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[sorted_indices]</span>
<span id="cb15-25">  b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b[sorted_indices]</span>
<span id="cb15-26"></span>
<span id="cb15-27">  dom_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-28">  dom_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-29">  interval_store <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-30">  envelope_z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb15-31"></span>
<span id="cb15-32">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb15-33">    dom_a.append(a[j])</span>
<span id="cb15-34">    dom_b.append(b[j])</span>
<span id="cb15-35"></span>
<span id="cb15-36">    z_intercept_store <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,n):</span>
<span id="cb15-38">        z_intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (dom_b[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> b[i])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(a[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dom_a[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb15-39">        z_intercept_store.append(z_intercept)</span>
<span id="cb15-40"></span>
<span id="cb15-41">    mu_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb15-43">      z_intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(z_intercept_store)</span>
<span id="cb15-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span>:</span>
<span id="cb15-45">      interval_store.append([envelope_z,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span>
<span id="cb15-46">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span> </span>
<span id="cb15-47">    mu_intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dom_a[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>z_intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dom_b[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb15-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,n):</span>
<span id="cb15-49">        mu_vals.append(a[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>z_intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b[i])</span>
<span id="cb15-50"></span>
<span id="cb15-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(mu_intercept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(mu_vals)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-9</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> z_intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> envelope_z:</span>
<span id="cb15-52">      interval_store.append([envelope_z,z_intercept])</span>
<span id="cb15-53">      envelope_z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z_intercept</span>
<span id="cb15-54">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb15-55">      dom_a[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb15-56">      dom_b[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb15-57">      interval_store.append([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>])</span>
<span id="cb15-58"></span>
<span id="cb15-59">  del_store <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-60">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dom_a)):</span>
<span id="cb15-61">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dom_a[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb15-62">          del_store.append(i)</span>
<span id="cb15-63"></span>
<span id="cb15-64">  dom_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.delete(dom_a,del_store)</span>
<span id="cb15-65">  dom_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.delete(dom_b,del_store)</span>
<span id="cb15-66">  interval_store <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.delete(interval_store,del_store,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb15-67"></span>
<span id="cb15-68">  zl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb15-69">  zu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb15-70"></span>
<span id="cb15-71">  interval_store[interval_store <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> zu] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> zu</span>
<span id="cb15-72">  interval_store[interval_store <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> zl] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> zl</span>
<span id="cb15-73"></span>
<span id="cb15-74">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> dom_a,dom_b,interval_store</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="26">
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sav.phd/posts/noisy_bo/index_files/figure-html/cell-27-output-1.png" class="quarto-figure quarto-figure-center figure-img" width="667" height="206"></p>
</figure>
</div>
</div>
</div>
<p>The expected value over <img src="https://latex.codecogs.com/png.latex?z"> (integrating over potential experimental outputs) of this upper envelope (which we use inplace of the inner <img src="https://latex.codecogs.com/png.latex?%5Cmax"> operator), where <img src="https://latex.codecogs.com/png.latex?z%20%5Csim%20%5Cmathcal%7BN%7D(0,1)"> is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csum_i%20%5Cint%5E%7Bc_%7Bi+1%7D%7D_%7Bc_%7Bi%7D%7D(a_iz+b_i)%5Cphi(z)%20%5C;%20%5Ctext%7Bd%7Dz%20%5Crightarrow%20%5Csum_i%20b_i%20%5B%5CPhi%20(c_%7Bi+1%7D)-%5CPhi(c_i)%5D%20+%20a_i%5B%5Cphi(c_i)%20-%20%5Cphi(c_%7Bi+1%7D)%5D"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5CPhi"> is the standard cumulative normal probability function, <img src="https://latex.codecogs.com/png.latex?%5Cphi"> is the standard normal probability function, <img src="https://latex.codecogs.com/png.latex?c"> are the <img src="https://latex.codecogs.com/png.latex?z"> values of the upper envelope intervals, and <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b"> are the gradient and intercept of upper envelope intervals corresponding to Equation&nbsp;3.</p>
<p><em>Intuitively</em>, we are solving the expected improvement integral analytically for each line segement within the upper envelope of lines (which we use as it is equivalent to the inner <img src="https://latex.codecogs.com/png.latex?%5Cmax"> operator).</p>
</div>
<p>For the sake of completeness we will wrap this up into an acquisition function, and run a basic Bayesian optimisation loop</p>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> noisy_EI_lines(x,GP):</span>
<span id="cb16-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(), gpytorch.settings.fast_pred_var():</span>
<span id="cb16-3">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GP[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>]</span>
<span id="cb16-4">    likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GP[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'likelihood'</span>]</span>
<span id="cb16-5">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb16-6">    likelihood.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb16-7">    x_prime_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.pi,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb16-8">    predicted_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> likelihood(model(x))</span>
<span id="cb16-9">    mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predicted_output.mean.item()</span>
<span id="cb16-10">    var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predicted_output.variance.item()</span>
<span id="cb16-11">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb16-12">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> likelihood(model(x_prime_vals)).mean.numpy()</span>
<span id="cb16-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x_prime <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x_prime_vals.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb16-14">      conc_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((x,x_prime))</span>
<span id="cb16-15">      covar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> likelihood(model(conc_x)).covariance_matrix</span>
<span id="cb16-16">      a.append((covar[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>var).item())</span>
<span id="cb16-17">    dom_a,dom_b,interval_store <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> upper_env(np.array(a),np.array(b))</span>
<span id="cb16-18">    N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.distributions.Normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-19">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb16-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(interval_store)):</span>
<span id="cb16-21">      c_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(interval_store[i,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb16-22">      c_i1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(interval_store[i,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb16-23">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> dom_b[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(N.cdf(c_i1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> N.cdf(c_i)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dom_a[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(np.exp(N.log_prob(c_i)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.exp(N.log_prob(c_i1)))</span>
<span id="cb16-24">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>.item()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="28">
<div class="cell-output cell-output-stdout">
<pre><code>NAIVE TIME TAKEN:  26.0427 s. AVERAGE TIME PER EVALUATION:  0.2604 s
UPPER ENVELOPE TIME TAKEN:  4.6367 s. AVERAGE TIME PER EVALUATION:  0.0464 s</code></pre>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sav.phd/posts/noisy_bo/index_files/figure-html/cell-29-output-2.png" class="quarto-figure quarto-figure-center figure-img" width="757" height="374"></p>
</figure>
</div>
</div>
</div>




<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-garnett_bayesoptbook_2023" class="csl-entry">
Garnett, Roman. 2023. <span>“<span>Bayesian Optimization</span>.”</span> Cambridge University Press. <a href="https://bayesoptbook.com">https://bayesoptbook.com</a>.
</div>
<div id="ref-Jones1998" class="csl-entry">
Jones, Donald R., Matthias Schonlau, and William J. Welch. 1998. <em>Journal of Global Optimization</em> 13 (4): 455–92. <a href="https://doi.org/10.1023/a:1008306431147">https://doi.org/10.1023/a:1008306431147</a>.
</div>
</div></section></div> ]]></description>
  <category>Optimisation</category>
  <category>Machine Learning</category>
  <guid>https://sav.phd/posts/noisy_bo/</guid>
  <pubDate>Tue, 05 Dec 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
