{
  "hash": "0157c3510b2be7a61caa72537d2c1715",
  "result": {
    "markdown": "---\ntitle: Scatter Plots\nauthor: Tom Savage\ncategories:\n  - Visualisation\nimage: figure.svg\ndate: 01/31/2024\ncallout-appearance: minimal\n---\n\n\n\nHere I will outline my personal preferences for best plotting practices for 2D scatter plots using [Matplotlib](https://matplotlib.org). I will be initialising the plot as demonstrated in my [previous post](https://sav.phd/posts/convergence_plots/).\n\nTo start with I will simulate a thousand data points that may have come from a dimensionality reduction technique such as [t-SNE](https://en.wikipedia.org/wiki/T-distributed_stochastic_neighbor_embedding). \n\n::: {.cell execution_count=2}\n\n::: {.cell-output .cell-output-stderr}\n```\n/var/folders/wb/035mswds69j2l_sw8yg6tdjw0000gr/T/ipykernel_66542/585749580.py:4: RuntimeWarning: covariance is not symmetric positive-semidefinite.\n  X = np.random.multivariate_normal(mean,cov,n)\n```\n:::\n:::\n\n\nThis is as simple and basic as a plot can be in Matplotlib.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nfig,ax = plt.subplots(1,1)\nax.scatter(X[:,0],X[:,1]);\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=568 height=410 fig-align='center'}\n:::\n:::\n\n\nFirst of all we need to size and scale the plot appropriately. \n\nBy default, **the aspect-ratio of the axis will not be equal**. If the axis have similar units or meaning this can provide misleading interpretation of the data. We will fix this first.\n\n:::{.cleanbox}\n**Always** set the aspect ratio to be equal if both quantities are comparable in meaning and magnitude using ```ax.set_aspect('equal')```\n:::\n\n::: {.cell execution_count=4}\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=568 height=263 fig-align='center'}\n:::\n:::\n\n\nWe will now add appropriate labels, with a legible fontsize to our axis, using LaTeX where appropriate.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nax.set_xlabel('$x_1$',fontsize=20)\nax.set_ylabel('$x_2$',fontsize=20)\n```\n:::\n\n\n::: {.cell execution_count=6}\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){width=597 height=292 fig-align='center'}\n:::\n:::\n\n\nWith so many data points, adding some opacity can help the reader interpret the density. Note that reducting the opacity affects the fill and the edge of each point differently. \n\nAt this point I will set the color to black, considering we have no separable classes (yet).\n\n:::{.cleanbox}\n**Always** consider removing the edge of each scatter-point if decreasing the opacity to make the plot look cleaner.\n:::\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nax.scatter(X[:,0],X[:,1],color='k',linewidth=0,alpha=0.2);\n```\n:::\n\n\n::: {.cell layout-ncol='2' execution_count=8}\n\n::: {.cell-output .cell-output-display}\n![With edges](index_files/figure-html/cell-9-output-1.png){width=597 height=292 fig-align='center'}\n:::\n\n::: {.cell-output .cell-output-display}\n![**Without** edges](index_files/figure-html/cell-9-output-2.png){width=597 height=292 fig-align='center'}\n:::\n:::\n\n\nAlternatively, the marker size may be changed to a smaller value and the opacity set to 1. This provides a less clear image of the **distribution** of points, but a clearer view of the specific locations of data.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nax.scatter(X[:,0],X[:,1],color='k',s=3);\n```\n:::\n\n\n::: {.cell execution_count=10}\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-1.png){width=597 height=292 fig-align='center'}\n:::\n:::\n\n\nDespite these plots containing the same data, they are visually different and tell different stories to the reader. As always...\n\n:::{.cleanbox}\nIt is important to consider what message you wish to convey, and how visual elements such as opacity, and marker size support this message.\n:::\n\n\nIf the specific location of data is critically important, the '+' symbol may be used. When scaling up the size of this marker appropriately, make sure to reduce the linewidth to ensure that the symbol isn't too thick.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nax.scatter(X[:,0],X[:,1],color='k',s=50,linewidth=0.75,marker='+');\n```\n:::\n\n\n::: {.cell layout-ncol='2' execution_count=12}\n\n::: {.cell-output .cell-output-display}\n![Standard Linewidth](index_files/figure-html/cell-13-output-1.png){width=597 height=292 fig-align='center'}\n:::\n\n::: {.cell-output .cell-output-display}\n![Reduced Linewidth](index_files/figure-html/cell-13-output-2.png){width=597 height=292 fig-align='center'}\n:::\n:::\n\n\nIt may be helpful in this situation to ensure the grid is turned on, but remember to ensure it is **behind** other elements by using `ax.set_axisbelow(True)`. \n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nax.grid(alpha=0.5)\nax.set_axisbelow(True)\n```\n:::\n\n\n::: {.cell execution_count=14}\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-15-output-1.png){width=597 height=292 fig-align='center'}\n:::\n:::\n\n\nWhat if we have different classes that we want to highlight? For now I will plot these clusters in the `tab:` colour pallette. \n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nfor i in range(6):\n    X = clusters[i]\n    ax.scatter(X[:,0],X[:,1],s=20,alpha=0.75,linewidth=0);\n```\n:::\n\n\n::: {.cell execution_count=16}\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-17-output-1.png){width=597 height=292 fig-align='center'}\n:::\n:::\n\n\nHowever, we now need to label our clusters. Adding a legend inside the plot will make it cluttered. \n\nTherefore we can add the legend outside the plot itself, on the right, above or below. \n\nBecause there are a reasonable number of labels, I will place the legend just above the plot in a single row, ensuring that the rounded frame is turned off. \n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15),\n          ncol=5,frameon=False)\n```\n:::\n\n\n::: {.cell execution_count=18}\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-19-output-1.png){width=612 height=308 fig-align='center'}\n:::\n:::\n\n\nHow to make the plot accessible to people who have colour-blindness? We may use different markers...\n\n::: {.cell execution_count=19}\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-20-output-1.png){width=612 height=308 fig-align='center'}\n:::\n:::\n\n\nHowever clearly the plot becomes illegible. I think in the scenario where colours are not desired (or their use should be minimised) the best option is to use multiple subplots, and opacity as follows:\n\n::: {.cell layout-ncol='2' layout-nrow='2' execution_count=20}\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-21-output-1.png){width=612 height=308 fig-align='center'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-21-output-2.png){width=612 height=308 fig-align='center'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-21-output-3.png){width=612 height=308 fig-align='center'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-21-output-4.png){width=612 height=308 fig-align='center'}\n:::\n:::\n\n\nWhilst we have increased the overall number of plots, this is an accessible alternative to using colours, and follows [Edward Tufte's philosophy of Small Multiples](https://en.wikipedia.org/wiki/Small_multiple).\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}