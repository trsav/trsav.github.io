{
  "hash": "911c6d646268d036f81e5708cc55a022",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"What Constitutes an Olympic Sport?\"\ndate: \"08/02/2024\"\ncomments:\n    utterances:\n        repo: trsav/trsav.github.io\nhtml: \n    self-contained: true\n    grid: \n    margin-width: 450px\n\nfig-cap-location: margin\ncitation-location: margin\nreference-location: margin\n---\n\n\nThe Olympics are a celebration of human physical achievement. But I simply don't believe some of the sports should be in it^[Said with absolutely zero authority]. In this post, I present a manifesto, a set of criteria that will define what an Olympic sport should be. I will then use this model to rank the sports in the 2024 Olympics, and see if they pass the test. \n\nThe conclusions presented should be taken with mountains of salt^[This couldn't be stressed enough]. I am in no way qualified to make these judgements, and I wouldn't even say these represent my actual opinions. In effect this post is completely useless, a waste of time, and I'm sorry for making it^[Pathetic].\n\n:::{.cleanbox}\n### Executive Summary\n\n<br>\n\n\n- **Triathalon** and **Weightlifting** are the pinnacle of Olympic sports.\n- **Football** and **Breakdancing** should be removed from the Olympics with immediate effect.\n- **Darts** should be added to the Olympics.\n:::\n\n\n\nIn my opinion^[A note on darts, I don't actually substanciate this claim at all, it is just something I believe deeply in. Apologies for the clickbait.], after intense internal discussion with close friends and family, I have settled on the following three criteria that define a real Olympic sport:\n\n1. Is winning the Olympics the pinnacle of the sport?\n1. Is the sport hard?\n    - Does it look physically difficult, could anyone compete (at any level)?\n2. Are there judges?\n    - Is the sport subjective?\n\nTo generate these rankings, I unashamedly used a large-language model to give me a CSV based on these criteria, making the rest of the analysis in this post, in effect, invalid.\n\n\n\n::: {#5ac7131c .cell layout-ncol='1' execution_count=2}\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=641 height=398}\n:::\n:::\n\n\nThe bottom five sports are:\n- Golf\n- Equestrian\n- Skateboarding\n- Football\n- Breaking(/Dance)\n\nAs a quick validation, let's try to justify our preference model.\n\n- Golf: Not the pinnacle of the sport (Masters, US Open, etc.), not hard (large amount of people play).\n- Equestrian: Not hard (requires sitting on a horse), relatively subjective (judged on form).\n- Skateboarding: Not the pinnacle of the sport (X-Games, generally judged on whether you make a cool video), not hard (anyone can skateboard in a few weeks).\n\nThe assumption here is that my criteria are equally weighted. To investigate the robustness of this assumption, I will use Monte Carlo sampling to investigate different criteria ratios, and evaluate the resulting rankings of Olympic-ness.\n\n::: {#88d4f184 .cell layout-ncol='1' execution_count=3}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Monte Carlo Simulation\"}\nimport numpy as np\nimport joypy\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.cm as cm\nimport matplotlib.pyplot as plt\n# matrix of scores \nscores = np.array([df['Difficulty'],df['Judging Requirement'],df['Olympic Pinnacle']]).T\n\n# save ranks for each weighting\nsampled_ranks = []\nfor i in range(1000):\n    weights = np.random.uniform(1,3,3)\n    all_scores = np.dot(scores,weights)\n    ranks = np.argsort(-all_scores)\n    sampled_ranks.append(ranks)\n\n\n# Create a DataFrame for joypy\nsampled_ranks = np.array(sampled_ranks)\n\njoy_data = pd.DataFrame(sampled_ranks, columns=df['Sport'])\n\n# Create the ridgeline plot\njoypy.joyplot(\n    data=joy_data,\n    overlap=4,\n    colormap=cm.Blues_r,\n    labels=df['Sport'],\n    title=\"\",\n    figsize=(7, 9),\n);\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=662 height=847}\n:::\n:::\n\n\nWe see a few interesting clusters of sports. I won't discuss them here, but there is an interesting gap between Athletics and Beach Volleyball, and later between Table Tennis and Archery, but these sports are still all comfortably in the top half of the rankings.\n\n\nTo try and explain some of these distributions, I'll look into how different specific differences in the criteria weights affect the rankings in a leave-one-out manner.\n\n::: {#6f6523cb .cell layout-ncol='1' execution_count=4}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Leave-one-out Criteria Analysis\"}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Assuming df is already defined and contains the necessary data\nscores = np.array([df['Difficulty'], df['Judging Requirement'], df['Olympic Pinnacle']]).T\nweights = np.array([1, 1, 1])\nall_scores = np.dot(scores, weights)\nranks = np.argsort(all_scores)\ndf = df.iloc[ranks].reset_index(drop=True)\nranks = np.arange(1, len(ranks) + 1)\n\ndef calculate_ranks(weights):\n    return len(scores) - np.argsort(np.dot(scores, weights))\n\nranks_no_diff = calculate_ranks([0, 1, 1])\nranks_no_judges = calculate_ranks([1, 0, 1])\nranks_no_pinnacle = calculate_ranks([1, 1, 0])\n\ndef find_extreme_differences(ranks1, ranks2):\n    diff = ranks1 - ranks2\n    return np.argmax(diff), np.argmin(diff)\n\np_no_diff, n_no_diff = find_extreme_differences(ranks, ranks_no_diff)\np_no_judges, n_no_judges = find_extreme_differences(ranks, ranks_no_judges)\np_no_pinnacle, n_no_pinnacle = find_extreme_differences(ranks, ranks_no_pinnacle)\n\nfig, axs = plt.subplots(3, 1, figsize=(7,6))\nx = np.arange(len(df))\n\nfor ax in axs:\n    ax.plot(x, ranks, color='k', label='Equal Weight')\n    ax.set_xticks(x)\n    if ax == axs[-1]:\n        ax.set_xticklabels(df['Sport'], rotation=90, ha='right')\n    else:\n        ax.set_xticklabels([])\n\naxs[0].plot(x, ranks_no_diff, color='tab:red', label='No Difficulty Criteria')\naxs[0].annotate(df['Sport'][p_no_diff], (x[p_no_diff], ranks_no_diff[p_no_diff]), \n                xytext=(0, -4), textcoords='offset points', ha='center', va='top', color='tab:red')\naxs[0].annotate(df['Sport'][n_no_diff], (x[n_no_diff], ranks_no_diff[n_no_diff]), \n                xytext=(0, 4), textcoords='offset points', ha='center', va='bottom', color='tab:red')\n\naxs[1].plot(x, ranks_no_judges, color='tab:blue', label='No Judging Criteria')\naxs[1].annotate(df['Sport'][p_no_judges], (x[p_no_judges], ranks_no_judges[p_no_judges]), \n                xytext=(0, -4), textcoords='offset points', ha='center', va='top', color='tab:blue')\naxs[1].annotate(df['Sport'][n_no_judges], (x[n_no_judges], ranks_no_judges[n_no_judges]), \n                xytext=(0, 4), textcoords='offset points', ha='center', va='bottom', color='tab:blue')\n\naxs[2].plot(x, ranks_no_pinnacle, color='tab:green', label='No Pinnacle Criteria')\naxs[2].annotate(df['Sport'][p_no_pinnacle], (x[p_no_pinnacle], ranks_no_pinnacle[p_no_pinnacle]), \n                xytext=(0, -4), textcoords='offset points', ha='center', va='top', color='tab:green')\naxs[2].annotate(df['Sport'][n_no_pinnacle], (x[n_no_pinnacle], ranks_no_pinnacle[n_no_pinnacle]), \n                xytext=(0, 4), textcoords='offset points', ha='center', va='bottom', color='tab:green')\n\nfor ax in axs:\n    ax.grid(alpha=0.3)\n    ax.legend(frameon=False)\n    ax.set_ylabel('Rank')\n    ax.set_xlim(-0.5, len(df) - 0.5)\n\n\nplt.tight_layout()\nplt.show()\n\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=657 height=566}\n:::\n:::\n\n\nGot bored, will finish later^[I won't].\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}