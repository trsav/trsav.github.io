{
  "hash": "2fbe554517bc4c6d84e9c1098416c32c",
  "result": {
    "markdown": "---\ntitle: Best Practices\nauthor: Tom Savage\ncategories:\n  - visualisation\nimage: image.jpg\nsubtitle: Visualisations & Plots\ndate: 10/23/2023\ncallout-appearance: minimal\nformat:\n  html:\n    grid:\n      margin-width: 350px\n  pdf: default\nreference-location: margin\ncitation-location: margin\n---\n\n>\"The First Bite Is With The Eyes.\" - Apicius, 1st Century Rome\n\n\nHere I will outline my personal preferences for best plotting practices. I will most likely update this as and when I make design choices across research.\n\n\n\n::: {.callout-tip}\n**Always** use the LaTeX extension to render figures by including ```plt.rcParams['text.usetex'] = True'``` at the top of your script.\n:::\n\nTo begin with we'll simulate some convergence data where we have 4 different benchmarks, each containing 16 separate repeat runs. \nLet's start by plotting this data in just about the _worst_ way, and slowly improve on this.\n\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nplt.figure()\nplt.title('This is a bad plot',fontsize=20)\ncols = ['r','b','g','k']\nfor b in range(benchmarks):\n    for i in range(runs):\n        plt.plot(iterations,data[b,i,:],color=cols[b])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=566 height=436}\n:::\n:::\n\n\nNow we will initialise our plot correctly using the object-oriented syntax which leads us to our first design rules:\n\n::: {.callout-tip}\n**Always** initialise a plot using the object-oriented interface `fig,ax = plt.subplots...`\n:::\n\n::: {.callout-important}\n**Never** initialise a plot using the pyplot interface `plt.figure...`\n:::\nWe must also select a figure size appropriate for our need. **This will be the size of the final overall figure**. We can adjust the fontsize of the tick values and labels later, but _I would reccommend adjusting the size of the plot now to ensure that the text is legible_. I am going to pretend that this figure span my text, but don't want it to take up too much vertical space. I also want the ticks to be legible, so I will set the figure to be 7 by 3. Upon initialisation I will ensure the layout is constrained.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfig,ax = plt.subplots(1,1,figsize=(7,3),layout=\"constrained\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=683 height=299}\n:::\n:::\n\n\nFor the sake of completeness I will include this as a rule.\n\n::: {.callout-tip}\n**Always** adjust the figure size appropriately, ensuring it is the right dimensions for the context.\n:::\nNow we will draw our attention to plotting the data itself. **It is important to think about what message you want to convey to the reader**. Clearly providing each run for each benchmark is not useful. I will plot the mean and standard deviation of regret across each benchmark.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nfig,ax = plt.subplots(1,1,figsize=(7,3))\nfor b in range(benchmarks):\n    mean = np.mean(data[b,:,:],axis=0)\n    std = np.std(data[b,:,:],axis=0)\n    ax.plot(iterations,mean,color=cols[b])\n    ax.fill_between(iterations,mean-std,mean+std,alpha=0.2,color=cols[b])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=566 height=262}\n:::\n:::\n\n\nNow we have decided what specifically to plot and all the information we wish to present is here we can work on making the plot more interpretable. \n\n::: {.callout-tip}\n**Always** separate your data generation and plotting code. This will make it easier to adjust the plot later. Save data at generation (for example during optimisation) and then load it in for plotting.\n:::\n\n::: {.cell execution_count=6}\n\n::: {.cell-output .cell-output-display execution_count=218}\n```\nText(0, 0.5, 'Regret, $r_\\\\tau$')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-2.png){width=593 height=289}\n:::\n:::\n\n\nWe should first add some axis labels as follows. Ensure the font size is large enough to be legible. You can use LaTeX within labels by using \\$ \\$ as standard, when doing so include an ```r``` in front of the string to ensure it gets parsed appropriately.\n\n::: {.callout-tip}\n**Always** choose a legible font size and text for axis labels, using LaTeX where appropriate.\n:::\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nax.set_xlabel(r'Iteration, $\\tau$',fontsize=18)\nax.set_ylabel(r'Regret, $r_\\tau$',fontsize=18)\nplt.show()\n```\n:::\n\n\nNow we will focus on the ticks. Ticks are important because they enable the reader to interpret the _values_ of the data. It is important to consider what tick values are appropriate to display. For example in this case, I want to convey to the reader the differences in overall convergence characteristics between these methods. Therefore, it may not be necessary to display intermediate values. Likewise, I may wish to display more intermediate values for iterations. \n\n::: {.cell execution_count=8}\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-1.png){width=605 height=298}\n:::\n:::\n\n\n::: {.callout-tip}\n**Always** select appropriate tick values for your context, adjusting the fontsize as necessary.\n:::\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nx_ticks = [0,10,20,30,40,50,60,70,80,90,100]\ny_ticks = [0,0.5,1]\nax.set_xticks(x_ticks,x_ticks,fontsize = 18)\nax.set_yticks(y_ticks,y_ticks,fontsize = 18)\n```\n:::\n\n\nNow we are happy with the externals, we will focus back on the data itself. It is important to provide a legend to ensure the reader can interpret the data. Not everything has to have a label. In this case I want to convey which color corresponds to which benchmark, but I also need to convey what the error bars mean. In order not to distract from the plot, I will choose to omit this from the plot itself and instead include it in the caption. Including a label for the error bars does not contribute to the story and the message of the plot. \n\n::: {.cell execution_count=10}\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-1.png){width=605 height=298}\n:::\n:::\n\n\n::: {.callout-tip}\n**Always** include labels for the relevant information, such as distinguishing between benchmarks. If the plot is too crowded [place the legend outside of the plot](https://matplotlib.org/stable/users/explain/axes/legend_guide.html).\n:::\n\n::: {.callout-important}\n**Never** overwhelm the reader with information and labels. Some information is fine to include within the caption, as the caption and the image are considered complimentary and dependent. \n:::\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nlabels = [f'Benchmark {b}' for b in range(1,benchmarks+1)]\nfor b in range(benchmarks):\n    mean = np.mean(data[b,:,:],axis=0)\n    std = np.std(data[b,:,:],axis=0)\n    ax.plot(iterations,mean,color=cols[b],label=labels[b])\n    ax.fill_between(iterations,mean-std,mean+std,alpha=0.2,color=cols[b])\n  \nax.legend(frameon=False,fontsize=14)\n```\n:::\n\n\nYou will notice that I have chosen *not* to include the frame on the caption. This makes the plot look cleaner and less cluttered.\n\n::: {.callout-tip}\n**Always** use the ```frameon=False``` option for legends.\n:::\n\nNow I'll outline a few important bits before moving onto the final adjustments. Firstly, when using  ```fill_between``` a faint outline is drawn which can make the plot look cluttered, I always like to remove this by setting ```linewidth=0```. Secondly, I always use and reccomend the ```tab:``` set of colours in matplotlib. Here is a list of examples that you can copy and paste.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ncols = ['tab:blue','tab:orange','tab:green','tab:red','tab:purple','tab:brown','tab:pink','tab:gray','tab:olive','tab:cyan']\n```\n:::\n\n\nThese colours are softer than the default colours and are more aesthetically pleasing. Let's make these changes.\n\n::: {.cell execution_count=13}\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-1.png){width=605 height=298}\n:::\n:::\n\n\n::: {.callout-tip}\n**Always** use the ```tab:``` set of colours and remove the linewidth of ```fill_between```.\n:::\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ncols = ['tab:blue','tab:orange','tab:green','tab:red','tab:purple','tab:brown','tab:pink','tab:gray','tab:olive','tab:cyan']\nfor b in range(benchmarks):\n    mean = np.mean(data[b,:,:],axis=0)\n    std = np.std(data[b,:,:],axis=0)\n    ax.plot(iterations,mean,color=cols[b],label=labels[b])\n    ax.fill_between(iterations,mean-std,mean+std,alpha=0.2,color=cols[b],linewidth=0)\n```\n:::\n\n\nWe are now almost there. I now reccomend adjusting the axis limits to ensure that your data is placed appropriately. In this case, the regret values are fine but the iterations should start exactly at 0 and end at 100. \n\n::: {.cell execution_count=15}\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-16-output-1.png){width=622 height=298}\n:::\n:::\n\n\n::: {.callout-tip}\n**Always** adjust the axis limits appropriately. The x-axis particularly may be too large.\n:::\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nax.set_xlim([0,100])\n```\n:::\n\n\nFinally, it is important to consider whether a ```grid``` is appropriate. In this case I will for demonstration, but it may be distracting. I will adjust the transparency to make it less pronounced. \n\n::: {.cell execution_count=17}\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-18-output-1.png){width=622 height=298}\n:::\n:::\n\n\n::: {.callout-tip}\n**Always** consider using ```ax.grid()``` if the individual values of the data are important.\n:::\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nax.grid(alpha=0.4)\n```\n:::\n\n\nThat is just about it for this plot. Always to remember to save figures as ```.svg``` or ```.pdf```. If you require a ```.png``` then use the ```dpi=``` option in ```fig.savefig``` to increase the resolution. \n\n::: {.cell execution_count=19}\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-20-output-1.png){width=622 height=298}\n:::\n:::\n\n\n::: {.callout-tip}\n**Always** save your figure as ```.svg``` or ```.pdf```. \n:::\n\n![Final SVG figure](figure.svg)\n\nFinally finally, [**READ THE DOCUMENTATION**](https://matplotlib.org/stable/).\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}