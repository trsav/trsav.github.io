---
title: "Best Practices"
author: "Tom Savage"
categories: [visualisation]
image: "image.jpg"
subtitle: "Visualisations & Plots"
date: "10/23/2023"
format:
  html:
    grid:
      margin-width: 350px         # <1>
  pdf: default
reference-location: margin        # <2>
citation-location: margin         # <2>
---
Here I will outline my personal preferences for best plotting practices. I will most likely update this as and when I make design choices across research.
```{python}
#| echo: false
import matplotlib.pyplot as plt 
import numpy as np 
import numpy.random as rnd
``` 
To begin with we'll simulate some convergence data where we have 4 different benchmarks, each containing 8 separate repeat runs. 
Let's start by plotting this data in just about the _worst_ way, and slowly improve on this.
```{python}
#| echo: false 
it = 100; runs = 8; benchmarks = 4
iterations = np.linspace(1,it,it)
x = iterations
data = []
for b in range(benchmarks):
    y = []
    for i in range(runs):
        noise = [rnd.uniform(i*(b+1),0) for i in reversed(range(it))]
        y.append(noise - 50*((b+1))*np.log(x) + 50*(b+1)*np.log(it))
    y = np.array(y)
    data.append(y)
data = np.array(data) / 1200
```
```{python}
plt.figure()
cols = ['r','b','g','k']
for b in range(benchmarks):
    for i in range(runs):
        plt.plot(iterations,data[b,i,:],color=cols[b])
plt.show()
```